{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"source/resource/微软常用运行库合集_2023.03.03.exe","path":"resource/微软常用运行库合集_2023.03.03.exe","modified":1,"renderable":0},{"_id":"source/img/config/node-check.png","path":"img/config/node-check.png","modified":1,"renderable":0},{"_id":"source/img/config/node-path.png","path":"img/config/node-path.png","modified":1,"renderable":0},{"_id":"source/img/electron/electron-devtool.png","path":"img/electron/electron-devtool.png","modified":1,"renderable":0},{"_id":"source/img/inkscape/file-export.png","path":"img/inkscape/file-export.png","modified":1,"renderable":0},{"_id":"source/img/inkscape/file-unit.png","path":"img/inkscape/file-unit.png","modified":1,"renderable":0},{"_id":"source/img/inkscape/file-property.png","path":"img/inkscape/file-property.png","modified":1,"renderable":0},{"_id":"source/img/inkscape/xml-editor.png","path":"img/inkscape/xml-editor.png","modified":1,"renderable":0},{"_id":"source/img/micro-app/micro-横向业务.png","path":"img/micro-app/micro-横向业务.png","modified":1,"renderable":0},{"_id":"source/img/micro-app/micro-纵向业务.png","path":"img/micro-app/micro-纵向业务.png","modified":1,"renderable":0},{"_id":"source/img/micro-app/cors-error.png","path":"img/micro-app/cors-error.png","modified":1,"renderable":0},{"_id":"source/img/svg/Y轴倾斜.png","path":"img/svg/Y轴倾斜.png","modified":1,"renderable":0},{"_id":"source/img/svg/svg-1.gif","path":"img/svg/svg-1.gif","modified":1,"renderable":0},{"_id":"source/img/svg/svg-path-wather.gif","path":"img/svg/svg-path-wather.gif","modified":1,"renderable":0},{"_id":"source/img/svg/translate-150-200.png","path":"img/svg/translate-150-200.png","modified":1,"renderable":0},{"_id":"source/img/svg/viewBox放大.png","path":"img/svg/viewBox放大.png","modified":1,"renderable":0},{"_id":"source/img/svg/viewbox对比.png","path":"img/svg/viewbox对比.png","modified":1,"renderable":0},{"_id":"source/img/svg/x轴倾斜.png","path":"img/svg/x轴倾斜.png","modified":1,"renderable":0},{"_id":"source/img/svg/初始坐标系.png","path":"img/svg/初始坐标系.png","modified":1,"renderable":0},{"_id":"source/img/svg/坐标系独立.png","path":"img/svg/坐标系独立.png","modified":1,"renderable":0},{"_id":"source/img/svg/svg初始坐标系.png","path":"img/svg/svg初始坐标系.png","modified":1,"renderable":0},{"_id":"source/img/svg/大小加倍.png","path":"img/svg/大小加倍.png","modified":1,"renderable":0},{"_id":"source/img/svg/嵌套链式链式转换.png","path":"img/svg/嵌套链式链式转换.png","modified":1,"renderable":0},{"_id":"source/img/svg/平移-旋转-平移.png","path":"img/svg/平移-旋转-平移.png","modified":1,"renderable":0},{"_id":"source/img/svg/指定点旋转.png","path":"img/svg/指定点旋转.png","modified":1,"renderable":0},{"_id":"source/img/svg/平移对比.png","path":"img/svg/平移对比.png","modified":1,"renderable":0},{"_id":"source/img/svg/放大.png","path":"img/svg/放大.png","modified":1,"renderable":0},{"_id":"source/img/svg/放大一倍.png","path":"img/svg/放大一倍.png","modified":1,"renderable":0},{"_id":"source/img/svg/无中心点旋转.png","path":"img/svg/无中心点旋转.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/inkscape.md","hash":"9f63d16d91260dcf22fdf6d5db690135413a9f68","modified":1694187857664},{"_id":"source/_posts/wasm-md.md","hash":"11c9a174389c7460b840349eebe001f0c6ca7c90","modified":1705217099792},{"_id":"source/about/index.md","hash":"b3a546c31afc4ba9d17f392122aa184512376169","modified":1694012960947},{"_id":"source/_posts/algorithm/flip the string.md","hash":"6e4a4af14a8de1e129551467652bfb788f110744","modified":1701180997299},{"_id":"source/_posts/algorithm/code-35.md","hash":"cb40501d05d4bfa923a3576823b823c0afb6e909","modified":1701786547114},{"_id":"source/_posts/algorithm/lru.md","hash":"73782bbe2c0ee51f7a78eacabf0be79db7097bbc","modified":1713194982667},{"_id":"source/_posts/electron/electron-question.md","hash":"2679a50003570d4d1cec276425f67493846de39e","modified":1702981278728},{"_id":"source/_posts/config/config.md","hash":"ac7c2a75301d1bdbfbea72b8a121667685433bdf","modified":1711847556769},{"_id":"source/_posts/electron/electron-start.md","hash":"01c45c4ba554a717452f274d364647c15441152f","modified":1701181487748},{"_id":"source/_posts/frontend-big-data/batch-render.md","hash":"94c75977d15485615944c4a7d8281711b80faab5","modified":1718688596182},{"_id":"source/_posts/data/min-pq.md","hash":"ab0ae419fed292cf29166c69031b47ba2462fb67","modified":1719795432689},{"_id":"source/_posts/data/stack.md","hash":"4241ccf7a2b69500c53d8aa7c49d1e86611fb5b0","modified":1718809325966},{"_id":"source/_posts/data/min.ts","hash":"267c95ab23caa518b022706496a9999f3924ea87","modified":1719795432689},{"_id":"source/_posts/data/queue.md","hash":"4f303369c454814bea97623367e48bd1e5e545f1","modified":1719414070244},{"_id":"source/_posts/micro-web/micro-frontend-1.md","hash":"261f931499ad2d9b448c2e55515d5e8a20984697","modified":1724724204689},{"_id":"source/_posts/micro-web/micro-app.md","hash":"9f543466fd0df51310fbd201951fa65c532faa28","modified":1701181274352},{"_id":"source/_posts/micro-web/micro-deploy.md","hash":"4e9bce3845793de457aa3d2d61dfa71bcebbcd9b","modified":1701181487749},{"_id":"source/_posts/micro-web/micro-app_01.md","hash":"c09ed1b9c4784e5830cb4cd2cb142e875b8b1b80","modified":1708609702983},{"_id":"source/_posts/python-lsp/python-lsp.md","hash":"784431179c60009932c660a23f42f3fa58db91c2","modified":1701181347286},{"_id":"source/_posts/svg-animate/svg-animate.md","hash":"0f2f086acf47d441d47c6f37a0e03067b5bdde86","modified":1701181438583},{"_id":"source/_posts/pnpm-monorepo/pnpm-monorepo.md","hash":"a03d152429aae5a2a1976a130019e73e855b6469","modified":1717657738530},{"_id":"source/img/config/node-check.png","hash":"b528e28ef590ad4580302cd6b06623b6ef567d2f","modified":1711847556769},{"_id":"source/_posts/vim/vim-code copy.md","hash":"b8665b4f1818fe226562f35c58a417df1b7ff0ba","modified":1726023816183},{"_id":"source/_posts/vim/vim-code.md","hash":"923fda1eea781daa5a5f20d5446cf045271fac47","modified":1726023818375},{"_id":"source/_posts/svg/svg-coordinate-systems.md","hash":"0da7185058af483b3b4030c33bc35d9c60531608","modified":1701181487749},{"_id":"source/_posts/svg/svg-animate.md","hash":"0f2f086acf47d441d47c6f37a0e03067b5bdde86","modified":1701181487749},{"_id":"source/img/config/node-path.png","hash":"3a91201a69a3580e870ffabf73666d48869f637c","modified":1711847556769},{"_id":"source/img/electron/electron-devtool.png","hash":"621b706cbdeb9a922236186b45702c8ca6c8ad03","modified":1701181487750},{"_id":"source/img/micro-app/micro-横向业务.png","hash":"a1936a2452fe88dd75da88721e4d2c95a4cd96e2","modified":1724720331264},{"_id":"source/img/micro-app/micro-纵向业务.png","hash":"c86df946c356450dace36d39a4c6cd15a9219bab","modified":1724720799286},{"_id":"source/img/micro-app/cors-error.png","hash":"fbf1333697dc97eff77bc32ffdd4ef8bc72fd3ea","modified":1694828473262},{"_id":"source/_posts/three/three_01.md","hash":"e64e6078db8ceae14978cf01b4ed5112eb0c2081","modified":1723115865397},{"_id":"source/img/svg/svg-1.gif","hash":"48fbf8755032832381ca43353ecc7ce4134a00f4","modified":1694480361125},{"_id":"source/img/svg/Y轴倾斜.png","hash":"f42f7507ae1ea9663c0a20064ca4dea489800187","modified":1701181487751},{"_id":"source/img/svg/viewBox放大.png","hash":"c49a56f9e8f212c0d4b10827e47df979dd78e369","modified":1701181487752},{"_id":"source/img/svg/translate-150-200.png","hash":"8faf541a1a0fa993de87d3ba28abb88762bad1e9","modified":1701181487751},{"_id":"source/img/svg/x轴倾斜.png","hash":"fc18b4a6ac656d5eb35b267368a413513aebc2d0","modified":1701181487753},{"_id":"source/img/svg/初始坐标系.png","hash":"add8902402786f0064408068e3f082c34aab3147","modified":1701181487753},{"_id":"source/img/svg/坐标系独立.png","hash":"b4717c4dca282a1859c9b8f2f2d2f963c6a2c203","modified":1701181487754},{"_id":"source/img/svg/大小加倍.png","hash":"ac86c0d3bce7a3dea69e65daa964ee9faa0cce37","modified":1701181487754},{"_id":"source/img/svg/平移-旋转-平移.png","hash":"5aae623247cac73b640ab28d31478ed60e34dc3b","modified":1701181487755},{"_id":"source/img/svg/嵌套链式链式转换.png","hash":"c9afcb8d2011f6a6a84b284006be54b5c3d969fd","modified":1701181487755},{"_id":"source/img/svg/指定点旋转.png","hash":"dbb1b03e7f5988d310a3c3d1bcd07faea6a33d91","modified":1701181487756},{"_id":"source/img/svg/平移对比.png","hash":"ab91ccb1c3727b0701a6e5c487eab1ef059a37e2","modified":1701181487755},{"_id":"source/img/svg/放大一倍.png","hash":"605a4e6103d4fea05207615a4a7c53f0787a93ac","modified":1701181487756},{"_id":"source/img/svg/无中心点旋转.png","hash":"33ae2dd215ab8ef3092deb05bca17398858c2432","modified":1701181487757},{"_id":"source/img/svg/放大.png","hash":"3920a30176e921791f4608c46ea26032a3965def","modified":1701181487756},{"_id":"source/img/svg/svg初始坐标系.png","hash":"d185e76c3eb2b9b8f276b59ed6a14cc25dcbe531","modified":1701181487751},{"_id":"source/img/svg/svg-path-wather.gif","hash":"90d1445f05f8d560eef1281136a6df0c931e4f9c","modified":1694480361126},{"_id":"source/img/svg/viewbox对比.png","hash":"bdccab5d724b314674cdb92e54af80e177c3b157","modified":1701181487753},{"_id":"source/img/inkscape/file-property.png","hash":"69d93c3e66073d7d4429dce8a1a7173e6449423e","modified":1694185650487},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1694011523206},{"_id":"source/img/inkscape/file-unit.png","hash":"11ad9ed3e405cedcf58b7eb8c8476c0db6eb748a","modified":1694186862839},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"b2c283d4e9aaf9ba49b8abb81adc03117b0e07db","modified":1694011522399},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1694011522373},{"_id":"node_modules/hexo-theme-fluid/layout/.DS_Store","hash":"e2295dbe42d85b294e6f3aeefaf3623bd31759ed","modified":1694011522141},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"cdde6c6d6a1bdf9fb965313e21d92cf6213582b6","modified":1694011523206},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"49f681a203eecfa7127ac22edc13bd3b49693d0a","modified":1694011522399},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1694011522374},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1694011522378},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1694011522379},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1694011522386},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1694011522383},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1694011522383},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1694011522371},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1694011522373},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1694011522384},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1694011522388},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1694011522388},{"_id":"node_modules/hexo-theme-fluid/scripts/.DS_Store","hash":"daec53fd4601c37ca272321ba2eb594d9b0a43ac","modified":1694011522141},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1694011522387},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1694011523207},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1694011523207},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1694011523207},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1694011523207},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1694011523207},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1694011523208},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1694011523207},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1694011523207},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1694011522378},{"_id":"node_modules/hexo-theme-fluid/source/.DS_Store","hash":"e11e97632e6d13d5b9dccadcc514268f3c039508","modified":1694011522143},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1694011523208},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1694011522379},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1694011522374},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1694011522380},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1694011522381},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1694011522381},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1694011522395},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1694011522383},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1694011522383},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1694011522396},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1694011522395},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1694011522393},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1694011522387},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1694011522397},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1694011522397},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1694011522384},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1694011522393},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1694011522394},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1694011522398},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1694011522395},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1694011522394},{"_id":"node_modules/hexo-theme-fluid/scripts/events/.DS_Store","hash":"80308812974d7cb7e001cd8f64ff9fced30ff139","modified":1694011522142},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1694011522386},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1694011522398},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1694011522399},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1694011522387},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1694011522397},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1694011522395},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1694011522399},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1694011522392},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1694011522392},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1694011522395},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1694011522394},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1694011522397},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1694011522392},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1694011522399},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1694011522397},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1694011522398},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1694011522398},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1694011522397},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1694011522142},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1694011522372},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1694011522144},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1694011522399},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1694011523201},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1694011523206},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1694011522395},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1694011523201},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1694011522391},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1694011522392},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1694011522394},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1694011522396},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1694011522399},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1694011522397},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1694011522392},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1694011522396},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1694011522379},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1694011522381},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1694011522381},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1694011522382},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1694011522387},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1694011522384},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1694011522383},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1694011522381},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1694011522389},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1694011522389},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1694011522378},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1694011522389},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1694011522388},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1694011522390},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1694011522377},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1694011522385},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1694011522374},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1694011522374},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1694011522380},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1694011522381},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1694011522384},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1694011522381},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1694011522383},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1694011522385},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1694011522386},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1694011522378},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1694011522389},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1694011522380},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1694011522385},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1694011522385},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1694011522393},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"b2f61b91fffb17d11ad56811f07d52d23f012741","modified":1694011522394},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1694011522394},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1694011522387},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1694011522395},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1694011522388},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1694011522394},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1694011522396},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1694011522397},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1694011522388},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1694011523202},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1694011523202},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1694011523205},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1694011523203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1694011523201},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1694011523205},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1694011523203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1694011523202},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1694011523202},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1694011523203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1694011523203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1694011523203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1694011523203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1694011523205},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1694011523206},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1694011523205},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1694011523202},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1694011523203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1694011523203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1694011523203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1694011523205},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1694011523204},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1694011523206},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1694011523205},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1694011523205},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1694011523202},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1694011523206},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1694011523206},{"_id":"source/img/inkscape/file-export.png","hash":"0081562712294df35116aa58cc902020819eed13","modified":1694187794767},{"_id":"source/img/inkscape/xml-editor.png","hash":"517160bb251dcc979f9fd18ba2361f80477c5624","modified":1694187483737},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1694011523200},{"_id":"source/resource/微软常用运行库合集_2023.03.03.exe","hash":"7b524c08354f6edbd3a4be95c256fba676228374","modified":1702979819806},{"_id":"public/local-search.xml","hash":"5f9108a0d8f1344c3a16038d12e5a7d22265e2dc","modified":1726023866645},{"_id":"public/about/index.html","hash":"6ec24976087b2c5b77501cec0a49d26573839ab7","modified":1726023866645},{"_id":"public/archives/index.html","hash":"b89baf82fb38dc9f87b52b03af6209b0377083bb","modified":1726023866645},{"_id":"public/archives/page/2/index.html","hash":"f5e316d003b2bf48082b9b44f07af27132e19016","modified":1726023866645},{"_id":"public/archives/page/3/index.html","hash":"f2b7b710d330b05d97397984a41a3b56f8672640","modified":1726023866645},{"_id":"public/archives/2020/index.html","hash":"fb8493c4ff12d7f1545493b53fa912ac09f0b655","modified":1726023866645},{"_id":"public/archives/2020/10/index.html","hash":"5db58167369838f3606e3d683c45a43698e95547","modified":1726023866645},{"_id":"public/archives/2023/index.html","hash":"ecb15b46de40e5075540f8cc5804605176b05ce5","modified":1726023866645},{"_id":"public/archives/2023/page/2/index.html","hash":"838b28fcb7d42da5b8dcdb7606ce3ebd1c9f3f67","modified":1726023866645},{"_id":"public/archives/2023/09/index.html","hash":"620e45275fb7fb6cd30d68582452a6f7a89be3cb","modified":1726023866645},{"_id":"public/archives/2023/10/index.html","hash":"dcbc772519688d8639db9e3fa2f051141cef59fb","modified":1726023866645},{"_id":"public/archives/2023/11/index.html","hash":"519f88279dc02176a8946874856bbb78ef463d67","modified":1726023866645},{"_id":"public/archives/2023/12/index.html","hash":"2507db1cdbc3d789f800210db0e9ba44132610bb","modified":1726023866645},{"_id":"public/archives/2024/index.html","hash":"cf6fc4bcb5751acd06ec63816d31a4032b7c6777","modified":1726023866645},{"_id":"public/archives/2024/01/index.html","hash":"50dbdd1d455ce6595fe1e8365ad6398b02ee725d","modified":1726023866645},{"_id":"public/archives/2024/02/index.html","hash":"77f7a38e42082f6986232511bc2d0ca03b01afa7","modified":1726023866645},{"_id":"public/archives/2024/03/index.html","hash":"66a911b6070fb3c9fb56db14108d60fce982b892","modified":1726023866645},{"_id":"public/archives/2024/04/index.html","hash":"0a4d15a96ccc55ed3c303cb23afca9cb76588751","modified":1726023866645},{"_id":"public/archives/2024/06/index.html","hash":"a495a8a8e88b61bb4af128095e4c4f599bb51aec","modified":1726023866645},{"_id":"public/archives/2024/08/index.html","hash":"fe47287af4d9953cf60b9215a7d01f09e7945119","modified":1726023866645},{"_id":"public/archives/2024/09/index.html","hash":"c250264d175916d1c567f7454d114d61ee161c92","modified":1726023866645},{"_id":"public/categories/算法题/index.html","hash":"d848cd90d3e7cba6987de0d7bfd94ec8a2a0748c","modified":1726023866645},{"_id":"public/categories/微前端/index.html","hash":"5343b20ad3394198a744b341c029b1df3c6d6606","modified":1726023866645},{"_id":"public/categories/python代码编辑器/index.html","hash":"39c458c54e6690096e2c321dd6e254531c56f2ee","modified":1726023866645},{"_id":"public/categories/SVG/index.html","hash":"95a6b69823636947e70218d8ed439b4f7775c784","modified":1726023866645},{"_id":"public/categories/Linux/index.html","hash":"0c8e5c0dcd04b515116e7b856f74fa8c85890063","modified":1726023866645},{"_id":"public/tags/svg/index.html","hash":"7e487dcdee25cc79a227155ab298594c1ff3d894","modified":1726023866645},{"_id":"public/tags/algorithm/index.html","hash":"6536531c5e69c3cd40347bc0ccc6a8cf38cfc779","modified":1726023866645},{"_id":"public/tags/wasm/index.html","hash":"6b45454af86ddc008e48e12a48640f5d55b64ba8","modified":1726023866645},{"_id":"public/tags/electron/index.html","hash":"fd1faca796e55d3aae28e5c4dedf816ba3fd2845","modified":1726023866645},{"_id":"public/tags/数据结构/index.html","hash":"9ae1b21d4a1d4cb3e6cdd0bc98573e62fb9dfaa8","modified":1726023866645},{"_id":"public/tags/vue/index.html","hash":"873bc9bc45f7c846844a07aaeddd05d81d789415","modified":1726023866645},{"_id":"public/tags/微前端/index.html","hash":"7ca4baab02c6ed542a01734845cb35beac54b172","modified":1726023866645},{"_id":"public/tags/javascript/index.html","hash":"153f5de1d144d3ea0e6cd5d9359e14c7dd1d7882","modified":1726023866645},{"_id":"public/tags/前端/index.html","hash":"af5019c333cca1f9ba5819ae66b91cafa8317367","modified":1726023866645},{"_id":"public/tags/python/index.html","hash":"bb7fafac4b23abc3ee531341137053b723eb3990","modified":1726023866645},{"_id":"public/tags/monorepo/index.html","hash":"d7e22eb18dfc68bf12df3f1d2a01833ec30cf160","modified":1726023866645},{"_id":"public/tags/BASH/index.html","hash":"83f6cbe9d8dbf776cd590fc6f9f5b9c475c91ef9","modified":1726023866645},{"_id":"public/tags/vim/index.html","hash":"ddd21b9d7c1d21446d52553a226720f17cb1fa11","modified":1726023866645},{"_id":"public/tags/three-js/index.html","hash":"119c13a5b9d80a09eeae824e66dea6f43f2d05c8","modified":1726023866645},{"_id":"public/404.html","hash":"266923f85b2f451cee1d996e1d201c194bcada31","modified":1726023866645},{"_id":"public/tags/index.html","hash":"fc96d78a14e037973421ca3a8184b4d847c3d419","modified":1726023866645},{"_id":"public/links/index.html","hash":"b423e4f306b2a63481686d6224352ede559060f5","modified":1726023866645},{"_id":"public/2024/09/04/vim/vim-code copy/index.html","hash":"7b40f6621d99c6d12698de1fd1b252aa3bf4cad0","modified":1726023866645},{"_id":"public/2024/08/06/micro-web/micro-frontend-1/index.html","hash":"85122a617f977b31b9cf01b8c1b2dffafe4c09b8","modified":1726023866645},{"_id":"public/2024/06/10/frontend-big-data/batch-render/index.html","hash":"5780c3492af161b5215cdcad6596d5d0d5ccc608","modified":1726023866645},{"_id":"public/2024/06/01/pnpm-monorepo/pnpm-monorepo/index.html","hash":"7b343d2ef6a21f04391e3a609eaf95e21f08446b","modified":1726023866645},{"_id":"public/2024/04/15/algorithm/lru/index.html","hash":"810910e36e80300c03c440433f4e9d715038f509","modified":1726023866645},{"_id":"public/2024/03/31/three/three_01/index.html","hash":"504ed6c9bcd4a902600626a5c706d3c7e9199e9d","modified":1726023866645},{"_id":"public/2024/02/19/config/config/index.html","hash":"536de621b81ff4d523707cbd10490943b7fff4c8","modified":1726023866645},{"_id":"public/2024/01/14/wasm-md/index.html","hash":"abdec634e7fe7f79cdda6b3fb5fdcad4d8d6cb71","modified":1726023866645},{"_id":"public/2023/12/05/algorithm/code-35/index.html","hash":"c707d3f1838c54b5ce7ab3b83db28c9b7d6a2e76","modified":1726023866645},{"_id":"public/2023/12/04/vim/vim-code/index.html","hash":"f0fb39c3c1054b4df79ee2472cb12b1f66fdb167","modified":1726023866645},{"_id":"public/2023/11/28/algorithm/flip the string/index.html","hash":"5c1608f50d791be7bfea85a7b8a6642b379c326f","modified":1726023866645},{"_id":"public/2023/10/26/data/min-pq/index.html","hash":"c24d18a0065511eea4e6beaba9c57e34c964f980","modified":1726023866645},{"_id":"public/2023/10/25/electron/electron-question/index.html","hash":"05dbcdeb7b2e26b74e270fbf46ffd638c04966f1","modified":1726023866645},{"_id":"public/2023/10/17/electron/electron-start/index.html","hash":"dbd2e53d74a9ebf6b85123b24428f9cd9d954673","modified":1726023866645},{"_id":"public/2023/10/09/svg/svg-coordinate-systems/index.html","hash":"9fad2f92bfc0291694f7c644abeef72838899f60","modified":1726023866645},{"_id":"public/2023/09/26/micro-web/micro-deploy/index.html","hash":"9b8e9ba2aa00ed3be99f0d5d5122d57d661aefca","modified":1726023866645},{"_id":"public/2023/09/16/python-lsp/python-lsp/index.html","hash":"fed048241cdda72cea4d4436a7c89d6f044096ca","modified":1726023866645},{"_id":"public/2023/09/10/svg-animate/svg-animate/index.html","hash":"cc3e906c9aa6e48309e5ac4b57b3d924dcac69f5","modified":1726023866645},{"_id":"public/2023/09/10/svg/svg-animate/index.html","hash":"8693b7ad83af53c3a0e7b5e11dd46c802d69390b","modified":1726023866645},{"_id":"public/2023/09/08/inkscape/index.html","hash":"93cd11e2e7c252b5f3bd693196015971cb6f3a13","modified":1726023866645},{"_id":"public/2023/09/07/micro-web/micro-app_01/index.html","hash":"e81b7f66c10b080bffd5d1f78c193692164219f5","modified":1726023866645},{"_id":"public/2023/09/06/micro-web/micro-app/index.html","hash":"8126c5a69e1d5e9cafe661614f8d91d7150d57bf","modified":1726023866645},{"_id":"public/2020/10/26/data/queue/index.html","hash":"bfec01ea4ade1523f7f103479c7d8d1b2305d02e","modified":1726023866645},{"_id":"public/2020/10/25/data/stack/index.html","hash":"650a34bd1420a18268af9a695f42e83f4f217999","modified":1726023866645},{"_id":"public/index.html","hash":"99fb001ad3c0ae2ac86c86284c1fc0a5cc3586c8","modified":1726023866645},{"_id":"public/page/3/index.html","hash":"1d5b878a2dccefcbaab3fc4c8778b585a08ac131","modified":1726023866645},{"_id":"public/page/2/index.html","hash":"92e1b8999ecda846cc97ff066546109a33b0df6b","modified":1726023866645},{"_id":"public/categories/index.html","hash":"371712176ea560c4d8e6d013b01717cafad948ad","modified":1726023866645},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1726023866645},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1726023866645},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1726023866645},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1726023866645},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1726023866645},{"_id":"public/img/config/node-check.png","hash":"b528e28ef590ad4580302cd6b06623b6ef567d2f","modified":1726023866645},{"_id":"public/img/config/node-path.png","hash":"3a91201a69a3580e870ffabf73666d48869f637c","modified":1726023866645},{"_id":"public/img/electron/electron-devtool.png","hash":"621b706cbdeb9a922236186b45702c8ca6c8ad03","modified":1726023866645},{"_id":"public/img/micro-app/micro-横向业务.png","hash":"a1936a2452fe88dd75da88721e4d2c95a4cd96e2","modified":1726023866645},{"_id":"public/img/svg/Y轴倾斜.png","hash":"f42f7507ae1ea9663c0a20064ca4dea489800187","modified":1726023866645},{"_id":"public/img/micro-app/cors-error.png","hash":"fbf1333697dc97eff77bc32ffdd4ef8bc72fd3ea","modified":1726023866645},{"_id":"public/img/micro-app/micro-纵向业务.png","hash":"c86df946c356450dace36d39a4c6cd15a9219bab","modified":1726023866645},{"_id":"public/img/svg/svg-1.gif","hash":"48fbf8755032832381ca43353ecc7ce4134a00f4","modified":1726023866645},{"_id":"public/img/svg/viewBox放大.png","hash":"c49a56f9e8f212c0d4b10827e47df979dd78e369","modified":1726023866645},{"_id":"public/img/svg/translate-150-200.png","hash":"8faf541a1a0fa993de87d3ba28abb88762bad1e9","modified":1726023866645},{"_id":"public/img/svg/x轴倾斜.png","hash":"fc18b4a6ac656d5eb35b267368a413513aebc2d0","modified":1726023866645},{"_id":"public/img/svg/初始坐标系.png","hash":"add8902402786f0064408068e3f082c34aab3147","modified":1726023866645},{"_id":"public/img/svg/坐标系独立.png","hash":"b4717c4dca282a1859c9b8f2f2d2f963c6a2c203","modified":1726023866645},{"_id":"public/img/svg/大小加倍.png","hash":"ac86c0d3bce7a3dea69e65daa964ee9faa0cce37","modified":1726023866645},{"_id":"public/img/svg/平移-旋转-平移.png","hash":"5aae623247cac73b640ab28d31478ed60e34dc3b","modified":1726023866645},{"_id":"public/img/svg/嵌套链式链式转换.png","hash":"c9afcb8d2011f6a6a84b284006be54b5c3d969fd","modified":1726023866645},{"_id":"public/img/svg/指定点旋转.png","hash":"dbb1b03e7f5988d310a3c3d1bcd07faea6a33d91","modified":1726023866645},{"_id":"public/img/svg/平移对比.png","hash":"ab91ccb1c3727b0701a6e5c487eab1ef059a37e2","modified":1726023866645},{"_id":"public/img/svg/放大.png","hash":"3920a30176e921791f4608c46ea26032a3965def","modified":1726023866645},{"_id":"public/img/svg/放大一倍.png","hash":"605a4e6103d4fea05207615a4a7c53f0787a93ac","modified":1726023866645},{"_id":"public/img/svg/无中心点旋转.png","hash":"33ae2dd215ab8ef3092deb05bca17398858c2432","modified":1726023866645},{"_id":"public/img/svg/svg初始坐标系.png","hash":"d185e76c3eb2b9b8f276b59ed6a14cc25dcbe531","modified":1726023866645},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1726023866645},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1726023866645},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1726023866645},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1726023866645},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1726023866645},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1726023866645},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1726023866645},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1726023866645},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1726023866645},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1726023866645},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1726023866645},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1726023866645},{"_id":"public/img/svg/svg-path-wather.gif","hash":"90d1445f05f8d560eef1281136a6df0c931e4f9c","modified":1726023866645},{"_id":"public/img/svg/viewbox对比.png","hash":"bdccab5d724b314674cdb92e54af80e177c3b157","modified":1726023866645},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1726023866645},{"_id":"public/img/inkscape/file-property.png","hash":"69d93c3e66073d7d4429dce8a1a7173e6449423e","modified":1726023866645},{"_id":"public/img/inkscape/file-unit.png","hash":"11ad9ed3e405cedcf58b7eb8c8476c0db6eb748a","modified":1726023866645},{"_id":"public/img/inkscape/file-export.png","hash":"0081562712294df35116aa58cc902020819eed13","modified":1726023866645},{"_id":"public/img/inkscape/xml-editor.png","hash":"517160bb251dcc979f9fd18ba2361f80477c5624","modified":1726023866645},{"_id":"public/resource/微软常用运行库合集_2023.03.03.exe","hash":"7b524c08354f6edbd3a4be95c256fba676228374","modified":1726023866645}],"Category":[{"name":"算法题","_id":"cm0xa1nbs0005jcskcy3uds65"},{"name":"微前端","_id":"cm0xa1nbz000vjcsk8ifbehyo"},{"name":"python代码编辑器","_id":"cm0xa1nc00014jcsk0mkmfszc"},{"name":"SVG","_id":"cm0xa1nc1001djcsk7ngbhsmi"},{"name":"Linux","_id":"cm0xa1nc60020jcsk075a9cav"}],"Data":[],"Page":[{"title":"标题","layout":"about","_content":"一些杂谈文字记录","source":"about/index.md","raw":"---\ntitle: 标题\nlayout: about\n---\n一些杂谈文字记录","date":"2023-09-06T15:09:20.947Z","updated":"2023-09-06T15:09:20.947Z","path":"about/index.html","comments":1,"_id":"cm0xa1nbm0000jcskbvix24af","content":"<p>一些杂谈文字记录</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一些杂谈文字记录</p>\n"}],"Post":[{"title":"inkscape","date":"2023-09-08T14:50:09.000Z","_content":"\n\n# [Inkscape](https://inkscape.org/zh-hans/doc/tutorials/basic/tutorial-basic.html) SVG 自由绘图工具\n\n## 设置文档属性\n![](/img/inkscape/file-property.png)\n\n## 单位设置\n![](/img/inkscape/file-property.png)\n\n1. 单位按需设置，可选px, mm 等\n2. 画布大小按需设置宽高\n3. 设置尺寸比例，此处会影响导出未svg 时的大小，建议默认设置为1\n\n## xml 快速编辑\n![](/img/inkscape/xml-editor.png)\n\n- 通过右侧配置蓝可以快速获取页面上节点属性信息&& 编辑\n\n## 导出文件\n![](/img/inkscape/file-export.png)","source":"_posts/inkscape.md","raw":"---\ntitle: inkscape\ndate: 2023-09-08 22:50:09\ntags: svg\n---\n\n\n# [Inkscape](https://inkscape.org/zh-hans/doc/tutorials/basic/tutorial-basic.html) SVG 自由绘图工具\n\n## 设置文档属性\n![](/img/inkscape/file-property.png)\n\n## 单位设置\n![](/img/inkscape/file-property.png)\n\n1. 单位按需设置，可选px, mm 等\n2. 画布大小按需设置宽高\n3. 设置尺寸比例，此处会影响导出未svg 时的大小，建议默认设置为1\n\n## xml 快速编辑\n![](/img/inkscape/xml-editor.png)\n\n- 通过右侧配置蓝可以快速获取页面上节点属性信息&& 编辑\n\n## 导出文件\n![](/img/inkscape/file-export.png)","slug":"inkscape","published":1,"updated":"2023-09-08T15:44:17.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbn0001jcskhryxcqa0","content":"<h1 id=\"Inkscape-SVG-自由绘图工具\"><a href=\"#Inkscape-SVG-自由绘图工具\" class=\"headerlink\" title=\"Inkscape SVG 自由绘图工具\"></a><a href=\"https://inkscape.org/zh-hans/doc/tutorials/basic/tutorial-basic.html\">Inkscape</a> SVG 自由绘图工具</h1><h2 id=\"设置文档属性\"><a href=\"#设置文档属性\" class=\"headerlink\" title=\"设置文档属性\"></a>设置文档属性</h2><p><img src=\"/img/inkscape/file-property.png\"></p>\n<h2 id=\"单位设置\"><a href=\"#单位设置\" class=\"headerlink\" title=\"单位设置\"></a>单位设置</h2><p><img src=\"/img/inkscape/file-property.png\"></p>\n<ol>\n<li>单位按需设置，可选px, mm 等</li>\n<li>画布大小按需设置宽高</li>\n<li>设置尺寸比例，此处会影响导出未svg 时的大小，建议默认设置为1</li>\n</ol>\n<h2 id=\"xml-快速编辑\"><a href=\"#xml-快速编辑\" class=\"headerlink\" title=\"xml 快速编辑\"></a>xml 快速编辑</h2><p><img src=\"/img/inkscape/xml-editor.png\"></p>\n<ul>\n<li>通过右侧配置蓝可以快速获取页面上节点属性信息&amp;&amp; 编辑</li>\n</ul>\n<h2 id=\"导出文件\"><a href=\"#导出文件\" class=\"headerlink\" title=\"导出文件\"></a>导出文件</h2><p><img src=\"/img/inkscape/file-export.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Inkscape-SVG-自由绘图工具\"><a href=\"#Inkscape-SVG-自由绘图工具\" class=\"headerlink\" title=\"Inkscape SVG 自由绘图工具\"></a><a href=\"https://inkscape.org/zh-hans/doc/tutorials/basic/tutorial-basic.html\">Inkscape</a> SVG 自由绘图工具</h1><h2 id=\"设置文档属性\"><a href=\"#设置文档属性\" class=\"headerlink\" title=\"设置文档属性\"></a>设置文档属性</h2><p><img src=\"/img/inkscape/file-property.png\"></p>\n<h2 id=\"单位设置\"><a href=\"#单位设置\" class=\"headerlink\" title=\"单位设置\"></a>单位设置</h2><p><img src=\"/img/inkscape/file-property.png\"></p>\n<ol>\n<li>单位按需设置，可选px, mm 等</li>\n<li>画布大小按需设置宽高</li>\n<li>设置尺寸比例，此处会影响导出未svg 时的大小，建议默认设置为1</li>\n</ol>\n<h2 id=\"xml-快速编辑\"><a href=\"#xml-快速编辑\" class=\"headerlink\" title=\"xml 快速编辑\"></a>xml 快速编辑</h2><p><img src=\"/img/inkscape/xml-editor.png\"></p>\n<ul>\n<li>通过右侧配置蓝可以快速获取页面上节点属性信息&amp;&amp; 编辑</li>\n</ul>\n<h2 id=\"导出文件\"><a href=\"#导出文件\" class=\"headerlink\" title=\"导出文件\"></a>导出文件</h2><p><img src=\"/img/inkscape/file-export.png\"></p>\n"},{"title":"翻转字符串","date":"2023-11-28T13:57:55.000Z","_content":"\n\n# [力扣344](https://leetcode.cn/problems/reverse-string/)\n编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。\n\n不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。\n\n \n\n示例 1：\n\n输入：s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]\n示例 2：\n\n输入：s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n\n解题思路\n- 不使用空间，因此需要原数组操作。\n- 字符串需要翻转，因此需要首位两条相互交换， 需要双指针处理\n```js\nconst reverseString = function(s) {\n // 首指针   \n let left = 0;\n // 尾指针\n let right = s.length  -1 \n while(left < right) {\n    // 交换值\n     [s[left], s[right]] = [s[right], s[left]]\n     left++;\n     right--;\n }\n return s\n};\n\n```","source":"_posts/algorithm/flip the string.md","raw":"---\ntitle: 翻转字符串\ndate: 2023-11-28 21:57:55\ntags: algorithm\ncategory: 算法题\n---\n\n\n# [力扣344](https://leetcode.cn/problems/reverse-string/)\n编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。\n\n不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。\n\n \n\n示例 1：\n\n输入：s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]\n示例 2：\n\n输入：s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n\n解题思路\n- 不使用空间，因此需要原数组操作。\n- 字符串需要翻转，因此需要首位两条相互交换， 需要双指针处理\n```js\nconst reverseString = function(s) {\n // 首指针   \n let left = 0;\n // 尾指针\n let right = s.length  -1 \n while(left < right) {\n    // 交换值\n     [s[left], s[right]] = [s[right], s[left]]\n     left++;\n     right--;\n }\n return s\n};\n\n```","slug":"algorithm/flip the string","published":1,"updated":"2023-11-28T14:16:37.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbp0002jcsk0zdv40cx","content":"<h1 id=\"力扣344\"><a href=\"#力扣344\" class=\"headerlink\" title=\"力扣344\"></a><a href=\"https://leetcode.cn/problems/reverse-string/\">力扣344</a></h1><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。</p>\n<p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p>\n<p>示例 1：</p>\n<p>输入：s &#x3D; [“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]<br>示例 2：</p>\n<p>输入：s &#x3D; [“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p>\n<p>解题思路</p>\n<ul>\n<li>不使用空间，因此需要原数组操作。</li>\n<li>字符串需要翻转，因此需要首位两条相互交换， 需要双指针处理<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> reverseString = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) &#123;<br> <span class=\"hljs-comment\">// 首指针   </span><br> <span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">0</span>;<br> <span class=\"hljs-comment\">// 尾指针</span><br> <span class=\"hljs-keyword\">let</span> right = s.<span class=\"hljs-property\">length</span>  -<span class=\"hljs-number\">1</span> <br> <span class=\"hljs-keyword\">while</span>(left &lt; right) &#123;<br>    <span class=\"hljs-comment\">// 交换值</span><br>     [s[left], s[right]] = [s[right], s[left]]<br>     left++;<br>     right--;<br> &#125;<br> <span class=\"hljs-keyword\">return</span> s<br>&#125;;<br><br></code></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"力扣344\"><a href=\"#力扣344\" class=\"headerlink\" title=\"力扣344\"></a><a href=\"https://leetcode.cn/problems/reverse-string/\">力扣344</a></h1><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。</p>\n<p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p>\n<p>示例 1：</p>\n<p>输入：s &#x3D; [“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]<br>示例 2：</p>\n<p>输入：s &#x3D; [“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p>\n<p>解题思路</p>\n<ul>\n<li>不使用空间，因此需要原数组操作。</li>\n<li>字符串需要翻转，因此需要首位两条相互交换， 需要双指针处理<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> reverseString = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) &#123;<br> <span class=\"hljs-comment\">// 首指针   </span><br> <span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">0</span>;<br> <span class=\"hljs-comment\">// 尾指针</span><br> <span class=\"hljs-keyword\">let</span> right = s.<span class=\"hljs-property\">length</span>  -<span class=\"hljs-number\">1</span> <br> <span class=\"hljs-keyword\">while</span>(left &lt; right) &#123;<br>    <span class=\"hljs-comment\">// 交换值</span><br>     [s[left], s[right]] = [s[right], s[left]]<br>     left++;<br>     right--;<br> &#125;<br> <span class=\"hljs-keyword\">return</span> s<br>&#125;;<br><br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"wasm编译处理","date":"2024-01-14T06:48:06.000Z","_content":"## mac 端编译 wasm\n1. 下载Emscripten代码到本地\n```bash\n# Get the emsdk repo    \ngit clone https://github.com/emscripten-core/emsdk.git\n\n# Enter that directory    \ncd emsdk\n```\n2. 安装最新的工具\n```bash\n\n# Download and install the latest SDK tools.    \n./emsdk install latest\n\n# Make the \"latest\" SDK \"active\" for the current user. (writes .emscripten file)    \n./emsdk activate latest\n\n# Activate PATH and other environment variables in the current terminal    \nsource ./emsdk_env.sh \n```\nb. 一个可以运行WebAssembly的浏览器\n目前各大主流浏览器都已经支持webassembly，包括：chrome、edge、safari、firefox、opera。除了，emmm，IE。只需要将浏览器升级到新版本，并且开启相应的配置即可。\n\nc. 一个简单的C语言程序\n这里使用C语言编写一个简单的helloworld程序：\n```bash\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, world!\");\n    return 0;\n}\n```\n2. 编译C代码到webassembly\n使用emscripten工具将C代码编译为WebAssembly。编译完成后，会得到三个新文件，分别以.html，.js和.wasm结尾。\n```bash\n# Compile c file to wasm file\nemcc hello.c -s WASM=1 -s FORCE_FILESYSTEM=1 -s EXIT_RUNTIME=1 -o hello.html\n```\n3. 运行\n启动一个文件服务器，使用浏览器打开localhost:8080/hello.html文件，看到控制台显示\"Hello, world!\"，表示构建成功。\n\n启动文件服务器\n```bash\n# Start file server    \nemrun --no_browser --port 8080 .\n```\n2. 浏览器打开http://localhost:8080/hello.html \n\n","source":"_posts/wasm-md.md","raw":"---\ntitle: wasm编译处理\ndate: 2024-01-14 14:48:06\ntags: wasm\n---\n## mac 端编译 wasm\n1. 下载Emscripten代码到本地\n```bash\n# Get the emsdk repo    \ngit clone https://github.com/emscripten-core/emsdk.git\n\n# Enter that directory    \ncd emsdk\n```\n2. 安装最新的工具\n```bash\n\n# Download and install the latest SDK tools.    \n./emsdk install latest\n\n# Make the \"latest\" SDK \"active\" for the current user. (writes .emscripten file)    \n./emsdk activate latest\n\n# Activate PATH and other environment variables in the current terminal    \nsource ./emsdk_env.sh \n```\nb. 一个可以运行WebAssembly的浏览器\n目前各大主流浏览器都已经支持webassembly，包括：chrome、edge、safari、firefox、opera。除了，emmm，IE。只需要将浏览器升级到新版本，并且开启相应的配置即可。\n\nc. 一个简单的C语言程序\n这里使用C语言编写一个简单的helloworld程序：\n```bash\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, world!\");\n    return 0;\n}\n```\n2. 编译C代码到webassembly\n使用emscripten工具将C代码编译为WebAssembly。编译完成后，会得到三个新文件，分别以.html，.js和.wasm结尾。\n```bash\n# Compile c file to wasm file\nemcc hello.c -s WASM=1 -s FORCE_FILESYSTEM=1 -s EXIT_RUNTIME=1 -o hello.html\n```\n3. 运行\n启动一个文件服务器，使用浏览器打开localhost:8080/hello.html文件，看到控制台显示\"Hello, world!\"，表示构建成功。\n\n启动文件服务器\n```bash\n# Start file server    \nemrun --no_browser --port 8080 .\n```\n2. 浏览器打开http://localhost:8080/hello.html \n\n","slug":"wasm-md","published":1,"updated":"2024-01-14T07:24:59.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbr0004jcsk0u91e2hf","content":"<h2 id=\"mac-端编译-wasm\"><a href=\"#mac-端编译-wasm\" class=\"headerlink\" title=\"mac 端编译 wasm\"></a>mac 端编译 wasm</h2><ol>\n<li>下载Emscripten代码到本地<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Get the emsdk repo    </span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/emscripten-core/emsdk.git<br><br><span class=\"hljs-comment\"># Enter that directory    </span><br><span class=\"hljs-built_in\">cd</span> emsdk<br></code></pre></td></tr></table></figure></li>\n<li>安装最新的工具<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><br><span class=\"hljs-comment\"># Download and install the latest SDK tools.    </span><br>./emsdk install latest<br><br><span class=\"hljs-comment\"># Make the &quot;latest&quot; SDK &quot;active&quot; for the current user. (writes .emscripten file)    </span><br>./emsdk activate latest<br><br><span class=\"hljs-comment\"># Activate PATH and other environment variables in the current terminal    </span><br><span class=\"hljs-built_in\">source</span> ./emsdk_env.sh <br></code></pre></td></tr></table></figure>\nb. 一个可以运行WebAssembly的浏览器<br>目前各大主流浏览器都已经支持webassembly，包括：chrome、edge、safari、firefox、opera。除了，emmm，IE。只需要将浏览器升级到新版本，并且开启相应的配置即可。</li>\n</ol>\n<p>c. 一个简单的C语言程序<br>这里使用C语言编写一个简单的helloworld程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#include &lt;stdio.h&gt;</span><br><br>int <span class=\"hljs-function\"><span class=\"hljs-title\">main</span></span>() &#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>);<br>    <span class=\"hljs-built_in\">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编译C代码到webassembly<br>使用emscripten工具将C代码编译为WebAssembly。编译完成后，会得到三个新文件，分别以.html，.js和.wasm结尾。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Compile c file to wasm file</span><br>emcc hello.c -s WASM=1 -s FORCE_FILESYSTEM=1 -s EXIT_RUNTIME=1 -o hello.html<br></code></pre></td></tr></table></figure></li>\n<li>运行<br>启动一个文件服务器，使用浏览器打开localhost:8080&#x2F;hello.html文件，看到控制台显示”Hello, world!”，表示构建成功。</li>\n</ol>\n<p>启动文件服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Start file server    </span><br>emrun --no_browser --port 8080 .<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>浏览器打开<a href=\"http://localhost:8080/hello.html\">http://localhost:8080/hello.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mac-端编译-wasm\"><a href=\"#mac-端编译-wasm\" class=\"headerlink\" title=\"mac 端编译 wasm\"></a>mac 端编译 wasm</h2><ol>\n<li>下载Emscripten代码到本地<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Get the emsdk repo    </span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/emscripten-core/emsdk.git<br><br><span class=\"hljs-comment\"># Enter that directory    </span><br><span class=\"hljs-built_in\">cd</span> emsdk<br></code></pre></td></tr></table></figure></li>\n<li>安装最新的工具<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><br><span class=\"hljs-comment\"># Download and install the latest SDK tools.    </span><br>./emsdk install latest<br><br><span class=\"hljs-comment\"># Make the &quot;latest&quot; SDK &quot;active&quot; for the current user. (writes .emscripten file)    </span><br>./emsdk activate latest<br><br><span class=\"hljs-comment\"># Activate PATH and other environment variables in the current terminal    </span><br><span class=\"hljs-built_in\">source</span> ./emsdk_env.sh <br></code></pre></td></tr></table></figure>\nb. 一个可以运行WebAssembly的浏览器<br>目前各大主流浏览器都已经支持webassembly，包括：chrome、edge、safari、firefox、opera。除了，emmm，IE。只需要将浏览器升级到新版本，并且开启相应的配置即可。</li>\n</ol>\n<p>c. 一个简单的C语言程序<br>这里使用C语言编写一个简单的helloworld程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#include &lt;stdio.h&gt;</span><br><br>int <span class=\"hljs-function\"><span class=\"hljs-title\">main</span></span>() &#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>);<br>    <span class=\"hljs-built_in\">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编译C代码到webassembly<br>使用emscripten工具将C代码编译为WebAssembly。编译完成后，会得到三个新文件，分别以.html，.js和.wasm结尾。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Compile c file to wasm file</span><br>emcc hello.c -s WASM=1 -s FORCE_FILESYSTEM=1 -s EXIT_RUNTIME=1 -o hello.html<br></code></pre></td></tr></table></figure></li>\n<li>运行<br>启动一个文件服务器，使用浏览器打开localhost:8080&#x2F;hello.html文件，看到控制台显示”Hello, world!”，表示构建成功。</li>\n</ol>\n<p>启动文件服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Start file server    </span><br>emrun --no_browser --port 8080 .<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>浏览器打开<a href=\"http://localhost:8080/hello.html\">http://localhost:8080/hello.html</a></li>\n</ol>\n"},{"title":"搜索插入位置","date":"2023-12-05T13:57:55.000Z","_content":"\n# [力扣](https://leetcode.cn/problems/search-insert-position/description/)\n请必须使用时间复杂度为 O(log n) 的算法。\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n请必须使用时间复杂度为 O(log n) 的算法。\n\n```js\n\nconst searchInsert = function(nums, target) {\n    //  区间左开右闭 [left, right]\n    let left = 0;\n    let right = nums.length - 1\n    while(left <= right) {\n        let mid = Math.floor((left + right) / 2)\n        if(nums[mid] === target) {\n            return mid\n        } else if(nums[mid] < target) {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return right + 1\n};\n\n```","source":"_posts/algorithm/code-35.md","raw":"---\ntitle: 搜索插入位置\ndate: 2023-12-05 21:57:55\ntags: algorithm\ncategory: 算法题\n---\n\n# [力扣](https://leetcode.cn/problems/search-insert-position/description/)\n请必须使用时间复杂度为 O(log n) 的算法。\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n请必须使用时间复杂度为 O(log n) 的算法。\n\n```js\n\nconst searchInsert = function(nums, target) {\n    //  区间左开右闭 [left, right]\n    let left = 0;\n    let right = nums.length - 1\n    while(left <= right) {\n        let mid = Math.floor((left + right) / 2)\n        if(nums[mid] === target) {\n            return mid\n        } else if(nums[mid] < target) {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return right + 1\n};\n\n```","slug":"algorithm/code-35","published":1,"updated":"2023-12-05T14:29:07.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbs0006jcsk397ha3gl","content":"<h1 id=\"力扣\"><a href=\"#力扣\" class=\"headerlink\" title=\"力扣\"></a><a href=\"https://leetcode.cn/problems/search-insert-position/description/\">力扣</a></h1><p>请必须使用时间复杂度为 O(log n) 的算法。<br>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>请必须使用时间复杂度为 O(log n) 的算法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">const</span> searchInsert = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, target</span>) &#123;<br>    <span class=\"hljs-comment\">//  区间左开右闭 [left, right]</span><br>    <span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">let</span> right = nums.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">while</span>(left &lt;= right) &#123;<br>        <span class=\"hljs-keyword\">let</span> mid = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((left + right) / <span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-keyword\">if</span>(nums[mid] === target) &#123;<br>            <span class=\"hljs-keyword\">return</span> mid<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(nums[mid] &lt; target) &#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            right = mid - <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> right + <span class=\"hljs-number\">1</span><br>&#125;;<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"力扣\"><a href=\"#力扣\" class=\"headerlink\" title=\"力扣\"></a><a href=\"https://leetcode.cn/problems/search-insert-position/description/\">力扣</a></h1><p>请必须使用时间复杂度为 O(log n) 的算法。<br>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>请必须使用时间复杂度为 O(log n) 的算法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">const</span> searchInsert = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, target</span>) &#123;<br>    <span class=\"hljs-comment\">//  区间左开右闭 [left, right]</span><br>    <span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">let</span> right = nums.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">while</span>(left &lt;= right) &#123;<br>        <span class=\"hljs-keyword\">let</span> mid = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((left + right) / <span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-keyword\">if</span>(nums[mid] === target) &#123;<br>            <span class=\"hljs-keyword\">return</span> mid<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(nums[mid] &lt; target) &#123;<br>            left = mid + <span class=\"hljs-number\">1</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            right = mid - <span class=\"hljs-number\">1</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> right + <span class=\"hljs-number\">1</span><br>&#125;;<br><br></code></pre></td></tr></table></figure>"},{"title":"LRU 缓存算法","date":"2024-04-15T13:57:55.000Z","_content":"\n# JS模拟LRU算法，get && put 通过O(1)\n```ts\nclass LRUCache {\n    constructor(capacity: number) {\n        this.cacapacity = capacity\n        this.map = new Map()\n        this.n = 0\n        this.head = new DLinkedNode()\n        this.tail = new DLinkedNode()\n\n    }\n\n    get(key: number): number {\n        const node = this.map.get(key)\n        return node ? node.val : -1\n    }\n\n    put(key: number, value: number): void {\n        const node = this.map.get(key)\n        if(node) {\n            node.pre.next = node.next\n            this.head.next.pre = node\n            this.head.next = node\n        } else {\n            const node = new DLinkedNode(value)\n            this.head.next.pre = node\n            this.head.next = node\n            this.map.set(key, node)\n            this.n + =1\n            if(this.n > this.cacapacity) {\n                this.tail.pre.pre.next = this.tail\n                this.map.delete(key)\n            }\n        }\n    }\n}\n\nclass DLinkedNode {\n    constructor(val, pre?, next?) {\n        this.val = val\n        this.pre = pre\n        this.next = next\n    }\n}\n\n```","source":"_posts/algorithm/lru.md","raw":"---\ntitle: LRU 缓存算法\ndate: 2024-04-15 21:57:55\ntags: algorithm\ncategory: 算法题\n---\n\n# JS模拟LRU算法，get && put 通过O(1)\n```ts\nclass LRUCache {\n    constructor(capacity: number) {\n        this.cacapacity = capacity\n        this.map = new Map()\n        this.n = 0\n        this.head = new DLinkedNode()\n        this.tail = new DLinkedNode()\n\n    }\n\n    get(key: number): number {\n        const node = this.map.get(key)\n        return node ? node.val : -1\n    }\n\n    put(key: number, value: number): void {\n        const node = this.map.get(key)\n        if(node) {\n            node.pre.next = node.next\n            this.head.next.pre = node\n            this.head.next = node\n        } else {\n            const node = new DLinkedNode(value)\n            this.head.next.pre = node\n            this.head.next = node\n            this.map.set(key, node)\n            this.n + =1\n            if(this.n > this.cacapacity) {\n                this.tail.pre.pre.next = this.tail\n                this.map.delete(key)\n            }\n        }\n    }\n}\n\nclass DLinkedNode {\n    constructor(val, pre?, next?) {\n        this.val = val\n        this.pre = pre\n        this.next = next\n    }\n}\n\n```","slug":"algorithm/lru","published":1,"updated":"2024-04-15T15:29:42.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbs0007jcskfpjc8x5x","content":"<h1 id=\"JS模拟LRU算法，get-put-通过O-1\"><a href=\"#JS模拟LRU算法，get-put-通过O-1\" class=\"headerlink\" title=\"JS模拟LRU算法，get &amp;&amp; put 通过O(1)\"></a>JS模拟LRU算法，get &amp;&amp; put 通过O(1)</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">capacity: <span class=\"hljs-built_in\">number</span></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacapacity</span> = capacity<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">n</span> = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DLinkedNode</span>()<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DLinkedNode</span>()<br><br>    &#125;<br><br>    <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span> &#123;<br>        <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-title function_\">get</span>(key)<br>        <span class=\"hljs-keyword\">return</span> node ? node.<span class=\"hljs-property\">val</span> : -<span class=\"hljs-number\">1</span><br>    &#125;<br><br>    <span class=\"hljs-title function_\">put</span>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> &#123;<br>        <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-title function_\">get</span>(key)<br>        <span class=\"hljs-keyword\">if</span>(node) &#123;<br>            node.<span class=\"hljs-property\">pre</span>.<span class=\"hljs-property\">next</span> = node.<span class=\"hljs-property\">next</span><br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span>.<span class=\"hljs-property\">pre</span> = node<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span> = node<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DLinkedNode</span>(value)<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span>.<span class=\"hljs-property\">pre</span> = node<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span> = node<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-title function_\">set</span>(key, node)<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">n</span> + =<span class=\"hljs-number\">1</span><br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">n</span> &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacapacity</span>) &#123;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span>.<span class=\"hljs-property\">pre</span>.<span class=\"hljs-property\">pre</span>.<span class=\"hljs-property\">next</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span><br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-title function_\">delete</span>(key)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DLinkedNode</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">val, pre?, next?</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">val</span> = val<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pre</span> = pre<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">next</span> = next<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS模拟LRU算法，get-put-通过O-1\"><a href=\"#JS模拟LRU算法，get-put-通过O-1\" class=\"headerlink\" title=\"JS模拟LRU算法，get &amp;&amp; put 通过O(1)\"></a>JS模拟LRU算法，get &amp;&amp; put 通过O(1)</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">capacity: <span class=\"hljs-built_in\">number</span></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacapacity</span> = capacity<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">n</span> = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DLinkedNode</span>()<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DLinkedNode</span>()<br><br>    &#125;<br><br>    <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span> &#123;<br>        <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-title function_\">get</span>(key)<br>        <span class=\"hljs-keyword\">return</span> node ? node.<span class=\"hljs-property\">val</span> : -<span class=\"hljs-number\">1</span><br>    &#125;<br><br>    <span class=\"hljs-title function_\">put</span>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> &#123;<br>        <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-title function_\">get</span>(key)<br>        <span class=\"hljs-keyword\">if</span>(node) &#123;<br>            node.<span class=\"hljs-property\">pre</span>.<span class=\"hljs-property\">next</span> = node.<span class=\"hljs-property\">next</span><br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span>.<span class=\"hljs-property\">pre</span> = node<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span> = node<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DLinkedNode</span>(value)<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span>.<span class=\"hljs-property\">pre</span> = node<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span> = node<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-title function_\">set</span>(key, node)<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">n</span> + =<span class=\"hljs-number\">1</span><br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">n</span> &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cacapacity</span>) &#123;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span>.<span class=\"hljs-property\">pre</span>.<span class=\"hljs-property\">pre</span>.<span class=\"hljs-property\">next</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span><br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-title function_\">delete</span>(key)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DLinkedNode</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">val, pre?, next?</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">val</span> = val<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pre</span> = pre<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">next</span> = next<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"win7配置 V16版本node","date":"2024-02-19T02:11:31.000Z","_content":"\n# win7环境上下载node源码\n\n\n# 解压NODE版本 在环境变量中配置 node 路径\n![](/img/config/node-path.png)\n\n# 配置NODE_SKIP_PLATFORM_CHECK 环境变量为1\n![](/img/config/node-check.png)\n\n","source":"_posts/config/config.md","raw":"---\ntitle: win7配置 V16版本node\ndate: 2024-02-19 10:11:31\ntags:\n---\n\n# win7环境上下载node源码\n\n\n# 解压NODE版本 在环境变量中配置 node 路径\n![](/img/config/node-path.png)\n\n# 配置NODE_SKIP_PLATFORM_CHECK 环境变量为1\n![](/img/config/node-check.png)\n\n","slug":"config/config","published":1,"updated":"2024-03-31T01:12:36.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbt000ajcskcc1ocnss","content":"<h1 id=\"win7环境上下载node源码\"><a href=\"#win7环境上下载node源码\" class=\"headerlink\" title=\"win7环境上下载node源码\"></a>win7环境上下载node源码</h1><h1 id=\"解压NODE版本-在环境变量中配置-node-路径\"><a href=\"#解压NODE版本-在环境变量中配置-node-路径\" class=\"headerlink\" title=\"解压NODE版本 在环境变量中配置 node 路径\"></a>解压NODE版本 在环境变量中配置 node 路径</h1><p><img src=\"/img/config/node-path.png\"></p>\n<h1 id=\"配置NODE-SKIP-PLATFORM-CHECK-环境变量为1\"><a href=\"#配置NODE-SKIP-PLATFORM-CHECK-环境变量为1\" class=\"headerlink\" title=\"配置NODE_SKIP_PLATFORM_CHECK 环境变量为1\"></a>配置NODE_SKIP_PLATFORM_CHECK 环境变量为1</h1><p><img src=\"/img/config/node-check.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"win7环境上下载node源码\"><a href=\"#win7环境上下载node源码\" class=\"headerlink\" title=\"win7环境上下载node源码\"></a>win7环境上下载node源码</h1><h1 id=\"解压NODE版本-在环境变量中配置-node-路径\"><a href=\"#解压NODE版本-在环境变量中配置-node-路径\" class=\"headerlink\" title=\"解压NODE版本 在环境变量中配置 node 路径\"></a>解压NODE版本 在环境变量中配置 node 路径</h1><p><img src=\"/img/config/node-path.png\"></p>\n<h1 id=\"配置NODE-SKIP-PLATFORM-CHECK-环境变量为1\"><a href=\"#配置NODE-SKIP-PLATFORM-CHECK-环境变量为1\" class=\"headerlink\" title=\"配置NODE_SKIP_PLATFORM_CHECK 环境变量为1\"></a>配置NODE_SKIP_PLATFORM_CHECK 环境变量为1</h1><p><img src=\"/img/config/node-check.png\"></p>\n"},{"title":"electron 常见问题&&解决方案","date":"2023-10-25T07:34:16.000Z","_content":"\n# 扩展electron vue-devtools\n[dev-tool 官方指导文档](https://www.electronjs.org/zh/docs/latest/tutorial/devtools-extension)\n## 开启devTool\n```ts\n// create windown 调用\ncreateWindow() {\n    ....\n    mainWindow.loadURL(VITE_DEV_SERVER_URL);\n    mainWindow.webContents.openDevTools();\n}\n\n```\n## 加载vue-devtool\n1. 在 Google Chrome 中安装扩展(也可以下载源码离线编译)\n2.  打开chrome://extensions 获取扩展hash值，\n3.  找到 Chrome 扩展程序的存放目录：\n    在Ｗindows 下为 %LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Extensions;\n    在 Linux下为：\n    ~/.config/google-chrome/Default/Extensions/\n    ~/.config/google-chrome-beta/Default/Extensions/\n    ~/.config/google-chrome-canary/Default/Extensions/\n    ~/.config/chromium/Default/Extensions/\n    在 macOS下为~/Library/Application Support/Google/Chrome/Default/Extensions。\n4. 将扩展的位置传递给 ses.loadExtension API\n```ts\n// username 电脑用户名\n// extendsionId \nconst vueDevToolsPath = `C:\\\\Users\\\\${username}\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Extensions\\\\${extendsionId}\\\\${extendsionVersion}`\napp.whenReady().then(async () => {\n    if (VITE_DEV_SERVER_URL) {\n      // 加载vue3 代码调试工具\n      await session.defaultSession.loadExtension(vueDevToolsPath);\n    }\n    // 创建窗口\n    createWindow();\n  });\n```\n![](/img/electron/electron-devtool.png)\n\n# Electron 启动后端服务\n## 通过execFile 启动可执行的exe文件\n例如我们现在有一个app.exe 放入项目的根目录 resources文件下\n```ts\nimport {execFile} from '‘child_process’'\nconst backend = path.join(process.cwd(), '/resources/app.exe')\ncosnt childProcess = execfile(\n backend,\n {\n  windowsHide: true,\n },\n (err, stdout, stderr) => {\n  if (err) {\n  console.log(err);\n  }\n  if (stdout) {\n  console.log(stdout);\n  }\n  if (stderr) {\n  console.log(stderr);\n  }\n }\n)\n```\n## electron 退出\nelectron 应用退出后可执行命令退出子程序\n程序执行再 __app.quit()__ 之前执行\n```ts\nimport { exec }  from 'child_process';\nexec('taskkill /f /t /im app.exe', (err, stdout, stderr) => {\n if (err) {\n  console.log(err)\n return;\n }\n});\n```\n# 应用单开\n可通过 requestSingleInstanceLock() 方案添加应用单开处理\nrequestSingleInstanceLock API 可以参考[官网解释](https://www.electronjs.org/zh/docs/latest/api/app#requestSingleInstanceLock)\n- 通过requestSingleInstanceLock 获取单例\n- 根据 单例锁状态 判断是否展示应用还是关闭应用\n```ts\nconst appInstanceLock = app.requestSingleInstanceLock();\nif (!appInstanceLock) {\n  app.quit();\n} else {\n  // 开启APP\n  loadWinApp();\n}\n\napp.whenReady().then(()=> {\n  ....\n  // 只允许打开一个窗口\n\n  app.on('second-instance', () => {\n    win!.show();\n  });\n})\n```\n\n# win7 桌面端支持\nelectron23.0 之后不再支持win7&&win8 等，详情见[官方文档](https://github.com/electron/electron/tree/main)\n如果程序需要支持可以将electron 降级版本\n - electron 22.0\n - electron-builder 22.10.5\n\n # win7 打包后程序安装提示启动错误\n 需要安装依微软常用的依赖库\n [微软常用运行库合集](/resource/微软常用运行库合集_2023.03.03.exe)\n\n # 客户端 getAppPath 含有 app.asar 问题处理\n getAppPath()可以获取到程序运行跟目录，打包后会有app.asar\n 当前可以直接通过replace 函数替换 app.asar\n 例如：\n ```ts\n const appRootPath = app.getAppPath().repace('app.asar', '')\n\n ```\n# vite-vue3 页面中图片显示错误问题处理\n图片地址为类似\n```ts\nconst img = '/img/test.png'\n```\n本地开发时预览正常electron 打包线上后显示地址找不到\n处理方案将图片地址转为绝对地址路径\n```ts\nconst img = new URL('/image/sludge.png', import.meta.url).href\n```","source":"_posts/electron/electron-question.md","raw":"---\ntitle: electron 常见问题&&解决方案\ndate: 2023-10-25 15:34:16\ntags: electron\n---\n\n# 扩展electron vue-devtools\n[dev-tool 官方指导文档](https://www.electronjs.org/zh/docs/latest/tutorial/devtools-extension)\n## 开启devTool\n```ts\n// create windown 调用\ncreateWindow() {\n    ....\n    mainWindow.loadURL(VITE_DEV_SERVER_URL);\n    mainWindow.webContents.openDevTools();\n}\n\n```\n## 加载vue-devtool\n1. 在 Google Chrome 中安装扩展(也可以下载源码离线编译)\n2.  打开chrome://extensions 获取扩展hash值，\n3.  找到 Chrome 扩展程序的存放目录：\n    在Ｗindows 下为 %LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Extensions;\n    在 Linux下为：\n    ~/.config/google-chrome/Default/Extensions/\n    ~/.config/google-chrome-beta/Default/Extensions/\n    ~/.config/google-chrome-canary/Default/Extensions/\n    ~/.config/chromium/Default/Extensions/\n    在 macOS下为~/Library/Application Support/Google/Chrome/Default/Extensions。\n4. 将扩展的位置传递给 ses.loadExtension API\n```ts\n// username 电脑用户名\n// extendsionId \nconst vueDevToolsPath = `C:\\\\Users\\\\${username}\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Extensions\\\\${extendsionId}\\\\${extendsionVersion}`\napp.whenReady().then(async () => {\n    if (VITE_DEV_SERVER_URL) {\n      // 加载vue3 代码调试工具\n      await session.defaultSession.loadExtension(vueDevToolsPath);\n    }\n    // 创建窗口\n    createWindow();\n  });\n```\n![](/img/electron/electron-devtool.png)\n\n# Electron 启动后端服务\n## 通过execFile 启动可执行的exe文件\n例如我们现在有一个app.exe 放入项目的根目录 resources文件下\n```ts\nimport {execFile} from '‘child_process’'\nconst backend = path.join(process.cwd(), '/resources/app.exe')\ncosnt childProcess = execfile(\n backend,\n {\n  windowsHide: true,\n },\n (err, stdout, stderr) => {\n  if (err) {\n  console.log(err);\n  }\n  if (stdout) {\n  console.log(stdout);\n  }\n  if (stderr) {\n  console.log(stderr);\n  }\n }\n)\n```\n## electron 退出\nelectron 应用退出后可执行命令退出子程序\n程序执行再 __app.quit()__ 之前执行\n```ts\nimport { exec }  from 'child_process';\nexec('taskkill /f /t /im app.exe', (err, stdout, stderr) => {\n if (err) {\n  console.log(err)\n return;\n }\n});\n```\n# 应用单开\n可通过 requestSingleInstanceLock() 方案添加应用单开处理\nrequestSingleInstanceLock API 可以参考[官网解释](https://www.electronjs.org/zh/docs/latest/api/app#requestSingleInstanceLock)\n- 通过requestSingleInstanceLock 获取单例\n- 根据 单例锁状态 判断是否展示应用还是关闭应用\n```ts\nconst appInstanceLock = app.requestSingleInstanceLock();\nif (!appInstanceLock) {\n  app.quit();\n} else {\n  // 开启APP\n  loadWinApp();\n}\n\napp.whenReady().then(()=> {\n  ....\n  // 只允许打开一个窗口\n\n  app.on('second-instance', () => {\n    win!.show();\n  });\n})\n```\n\n# win7 桌面端支持\nelectron23.0 之后不再支持win7&&win8 等，详情见[官方文档](https://github.com/electron/electron/tree/main)\n如果程序需要支持可以将electron 降级版本\n - electron 22.0\n - electron-builder 22.10.5\n\n # win7 打包后程序安装提示启动错误\n 需要安装依微软常用的依赖库\n [微软常用运行库合集](/resource/微软常用运行库合集_2023.03.03.exe)\n\n # 客户端 getAppPath 含有 app.asar 问题处理\n getAppPath()可以获取到程序运行跟目录，打包后会有app.asar\n 当前可以直接通过replace 函数替换 app.asar\n 例如：\n ```ts\n const appRootPath = app.getAppPath().repace('app.asar', '')\n\n ```\n# vite-vue3 页面中图片显示错误问题处理\n图片地址为类似\n```ts\nconst img = '/img/test.png'\n```\n本地开发时预览正常electron 打包线上后显示地址找不到\n处理方案将图片地址转为绝对地址路径\n```ts\nconst img = new URL('/image/sludge.png', import.meta.url).href\n```","slug":"electron/electron-question","published":1,"updated":"2023-12-19T10:21:18.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbu000cjcsk0dmrepys","content":"<h1 id=\"扩展electron-vue-devtools\"><a href=\"#扩展electron-vue-devtools\" class=\"headerlink\" title=\"扩展electron vue-devtools\"></a>扩展electron vue-devtools</h1><p><a href=\"https://www.electronjs.org/zh/docs/latest/tutorial/devtools-extension\">dev-tool 官方指导文档</a></p>\n<h2 id=\"开启devTool\"><a href=\"#开启devTool\" class=\"headerlink\" title=\"开启devTool\"></a>开启devTool</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// create windown 调用</span><br><span class=\"hljs-title function_\">createWindow</span>(<span class=\"hljs-params\"></span>) &#123;<br>    ....<br>    mainWindow.<span class=\"hljs-title function_\">loadURL</span>(<span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span>);<br>    mainWindow.<span class=\"hljs-property\">webContents</span>.<span class=\"hljs-title function_\">openDevTools</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"加载vue-devtool\"><a href=\"#加载vue-devtool\" class=\"headerlink\" title=\"加载vue-devtool\"></a>加载vue-devtool</h2><ol>\n<li>在 Google Chrome 中安装扩展(也可以下载源码离线编译)</li>\n<li>打开chrome:&#x2F;&#x2F;extensions 获取扩展hash值，</li>\n<li>找到 Chrome 扩展程序的存放目录：<br>在Ｗindows 下为 %LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Extensions;<br>在 Linux下为：<br><del>&#x2F;.config&#x2F;google-chrome&#x2F;Default&#x2F;Extensions&#x2F;<br>~&#x2F;.config&#x2F;google-chrome-beta&#x2F;Default&#x2F;Extensions&#x2F;<br>~&#x2F;.config&#x2F;google-chrome-canary&#x2F;Default&#x2F;Extensions&#x2F;<br>~&#x2F;.config&#x2F;chromium&#x2F;Default&#x2F;Extensions&#x2F;<br>在 macOS下为</del>&#x2F;Library&#x2F;Application Support&#x2F;Google&#x2F;Chrome&#x2F;Default&#x2F;Extensions。</li>\n<li>将扩展的位置传递给 ses.loadExtension API<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// username 电脑用户名</span><br><span class=\"hljs-comment\">// extendsionId </span><br><span class=\"hljs-keyword\">const</span> vueDevToolsPath = <span class=\"hljs-string\">`C:\\\\Users\\\\<span class=\"hljs-subst\">$&#123;username&#125;</span>\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Extensions\\\\<span class=\"hljs-subst\">$&#123;extendsionId&#125;</span>\\\\<span class=\"hljs-subst\">$&#123;extendsionVersion&#125;</span>`</span><br>app.<span class=\"hljs-title function_\">whenReady</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span>) &#123;<br>      <span class=\"hljs-comment\">// 加载vue3 代码调试工具</span><br>      <span class=\"hljs-keyword\">await</span> session.<span class=\"hljs-property\">defaultSession</span>.<span class=\"hljs-title function_\">loadExtension</span>(vueDevToolsPath);<br>    &#125;<br>    <span class=\"hljs-comment\">// 创建窗口</span><br>    <span class=\"hljs-title function_\">createWindow</span>();<br>  &#125;);<br></code></pre></td></tr></table></figure>\n<img src=\"/img/electron/electron-devtool.png\"></li>\n</ol>\n<h1 id=\"Electron-启动后端服务\"><a href=\"#Electron-启动后端服务\" class=\"headerlink\" title=\"Electron 启动后端服务\"></a>Electron 启动后端服务</h1><h2 id=\"通过execFile-启动可执行的exe文件\"><a href=\"#通过execFile-启动可执行的exe文件\" class=\"headerlink\" title=\"通过execFile 启动可执行的exe文件\"></a>通过execFile 启动可执行的exe文件</h2><p>例如我们现在有一个app.exe 放入项目的根目录 resources文件下</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123;execFile&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;‘child_process’&#x27;</span><br><span class=\"hljs-keyword\">const</span> backend = path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">&#x27;/resources/app.exe&#x27;</span>)<br>cosnt childProcess = <span class=\"hljs-title function_\">execfile</span>(<br> backend,<br> &#123;<br>  <span class=\"hljs-attr\">windowsHide</span>: <span class=\"hljs-literal\">true</span>,<br> &#125;,<br> <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stdout, stderr</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (err) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (stdout) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(stdout);<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (stderr) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(stderr);<br>  &#125;<br> &#125;<br>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"electron-退出\"><a href=\"#electron-退出\" class=\"headerlink\" title=\"electron 退出\"></a>electron 退出</h2><p>electron 应用退出后可执行命令退出子程序<br>程序执行再 <strong>app.quit()</strong> 之前执行</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; exec &#125;  <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;child_process&#x27;</span>;<br><span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">&#x27;taskkill /f /t /im app.exe&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stdout, stderr</span>) =&gt;</span> &#123;<br> <span class=\"hljs-keyword\">if</span> (err) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err)<br> <span class=\"hljs-keyword\">return</span>;<br> &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h1 id=\"应用单开\"><a href=\"#应用单开\" class=\"headerlink\" title=\"应用单开\"></a>应用单开</h1><p>可通过 requestSingleInstanceLock() 方案添加应用单开处理<br>requestSingleInstanceLock API 可以参考<a href=\"https://www.electronjs.org/zh/docs/latest/api/app#requestSingleInstanceLock\">官网解释</a></p>\n<ul>\n<li>通过requestSingleInstanceLock 获取单例</li>\n<li>根据 单例锁状态 判断是否展示应用还是关闭应用<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> appInstanceLock = app.<span class=\"hljs-title function_\">requestSingleInstanceLock</span>();<br><span class=\"hljs-keyword\">if</span> (!appInstanceLock) &#123;<br>  app.<span class=\"hljs-title function_\">quit</span>();<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  <span class=\"hljs-comment\">// 开启APP</span><br>  <span class=\"hljs-title function_\">loadWinApp</span>();<br>&#125;<br><br>app.<span class=\"hljs-title function_\">whenReady</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">()=&gt;</span> &#123;<br>  ....<br>  <span class=\"hljs-comment\">// 只允许打开一个窗口</span><br><br>  app.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;second-instance&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    win!.<span class=\"hljs-title function_\">show</span>();<br>  &#125;);<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"win7-桌面端支持\"><a href=\"#win7-桌面端支持\" class=\"headerlink\" title=\"win7 桌面端支持\"></a>win7 桌面端支持</h1><p>electron23.0 之后不再支持win7&amp;&amp;win8 等，详情见<a href=\"https://github.com/electron/electron/tree/main\">官方文档</a><br>如果程序需要支持可以将electron 降级版本</p>\n<ul>\n<li>electron 22.0</li>\n<li>electron-builder 22.10.5</li>\n</ul>\n<h1 id=\"win7-打包后程序安装提示启动错误\"><a href=\"#win7-打包后程序安装提示启动错误\" class=\"headerlink\" title=\"win7 打包后程序安装提示启动错误\"></a>win7 打包后程序安装提示启动错误</h1><p> 需要安装依微软常用的依赖库<br> <a href=\"/resource/%E5%BE%AE%E8%BD%AF%E5%B8%B8%E7%94%A8%E8%BF%90%E8%A1%8C%E5%BA%93%E5%90%88%E9%9B%86_2023.03.03.exe\">微软常用运行库合集</a></p>\n<h1 id=\"客户端-getAppPath-含有-app-asar-问题处理\"><a href=\"#客户端-getAppPath-含有-app-asar-问题处理\" class=\"headerlink\" title=\"客户端 getAppPath 含有 app.asar 问题处理\"></a>客户端 getAppPath 含有 app.asar 问题处理</h1><p> getAppPath()可以获取到程序运行跟目录，打包后会有app.asar<br> 当前可以直接通过replace 函数替换 app.asar<br> 例如：<br> <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> appRootPath = app.<span class=\"hljs-title function_\">getAppPath</span>().<span class=\"hljs-title function_\">repace</span>(<span class=\"hljs-string\">&#x27;app.asar&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br><br></code></pre></td></tr></table></figure></p>\n<h1 id=\"vite-vue3-页面中图片显示错误问题处理\"><a href=\"#vite-vue3-页面中图片显示错误问题处理\" class=\"headerlink\" title=\"vite-vue3 页面中图片显示错误问题处理\"></a>vite-vue3 页面中图片显示错误问题处理</h1><p>图片地址为类似</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> img = <span class=\"hljs-string\">&#x27;/img/test.png&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>本地开发时预览正常electron 打包线上后显示地址找不到<br>处理方案将图片地址转为绝对地址路径</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> img = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">&#x27;/image/sludge.png&#x27;</span>, <span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">url</span>).<span class=\"hljs-property\">href</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"扩展electron-vue-devtools\"><a href=\"#扩展electron-vue-devtools\" class=\"headerlink\" title=\"扩展electron vue-devtools\"></a>扩展electron vue-devtools</h1><p><a href=\"https://www.electronjs.org/zh/docs/latest/tutorial/devtools-extension\">dev-tool 官方指导文档</a></p>\n<h2 id=\"开启devTool\"><a href=\"#开启devTool\" class=\"headerlink\" title=\"开启devTool\"></a>开启devTool</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// create windown 调用</span><br><span class=\"hljs-title function_\">createWindow</span>(<span class=\"hljs-params\"></span>) &#123;<br>    ....<br>    mainWindow.<span class=\"hljs-title function_\">loadURL</span>(<span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span>);<br>    mainWindow.<span class=\"hljs-property\">webContents</span>.<span class=\"hljs-title function_\">openDevTools</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"加载vue-devtool\"><a href=\"#加载vue-devtool\" class=\"headerlink\" title=\"加载vue-devtool\"></a>加载vue-devtool</h2><ol>\n<li>在 Google Chrome 中安装扩展(也可以下载源码离线编译)</li>\n<li>打开chrome:&#x2F;&#x2F;extensions 获取扩展hash值，</li>\n<li>找到 Chrome 扩展程序的存放目录：<br>在Ｗindows 下为 %LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Extensions;<br>在 Linux下为：<br><del>&#x2F;.config&#x2F;google-chrome&#x2F;Default&#x2F;Extensions&#x2F;<br>~&#x2F;.config&#x2F;google-chrome-beta&#x2F;Default&#x2F;Extensions&#x2F;<br>~&#x2F;.config&#x2F;google-chrome-canary&#x2F;Default&#x2F;Extensions&#x2F;<br>~&#x2F;.config&#x2F;chromium&#x2F;Default&#x2F;Extensions&#x2F;<br>在 macOS下为</del>&#x2F;Library&#x2F;Application Support&#x2F;Google&#x2F;Chrome&#x2F;Default&#x2F;Extensions。</li>\n<li>将扩展的位置传递给 ses.loadExtension API<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// username 电脑用户名</span><br><span class=\"hljs-comment\">// extendsionId </span><br><span class=\"hljs-keyword\">const</span> vueDevToolsPath = <span class=\"hljs-string\">`C:\\\\Users\\\\<span class=\"hljs-subst\">$&#123;username&#125;</span>\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Extensions\\\\<span class=\"hljs-subst\">$&#123;extendsionId&#125;</span>\\\\<span class=\"hljs-subst\">$&#123;extendsionVersion&#125;</span>`</span><br>app.<span class=\"hljs-title function_\">whenReady</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span>) &#123;<br>      <span class=\"hljs-comment\">// 加载vue3 代码调试工具</span><br>      <span class=\"hljs-keyword\">await</span> session.<span class=\"hljs-property\">defaultSession</span>.<span class=\"hljs-title function_\">loadExtension</span>(vueDevToolsPath);<br>    &#125;<br>    <span class=\"hljs-comment\">// 创建窗口</span><br>    <span class=\"hljs-title function_\">createWindow</span>();<br>  &#125;);<br></code></pre></td></tr></table></figure>\n<img src=\"/img/electron/electron-devtool.png\"></li>\n</ol>\n<h1 id=\"Electron-启动后端服务\"><a href=\"#Electron-启动后端服务\" class=\"headerlink\" title=\"Electron 启动后端服务\"></a>Electron 启动后端服务</h1><h2 id=\"通过execFile-启动可执行的exe文件\"><a href=\"#通过execFile-启动可执行的exe文件\" class=\"headerlink\" title=\"通过execFile 启动可执行的exe文件\"></a>通过execFile 启动可执行的exe文件</h2><p>例如我们现在有一个app.exe 放入项目的根目录 resources文件下</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123;execFile&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;‘child_process’&#x27;</span><br><span class=\"hljs-keyword\">const</span> backend = path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">&#x27;/resources/app.exe&#x27;</span>)<br>cosnt childProcess = <span class=\"hljs-title function_\">execfile</span>(<br> backend,<br> &#123;<br>  <span class=\"hljs-attr\">windowsHide</span>: <span class=\"hljs-literal\">true</span>,<br> &#125;,<br> <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stdout, stderr</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (err) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (stdout) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(stdout);<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (stderr) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(stderr);<br>  &#125;<br> &#125;<br>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"electron-退出\"><a href=\"#electron-退出\" class=\"headerlink\" title=\"electron 退出\"></a>electron 退出</h2><p>electron 应用退出后可执行命令退出子程序<br>程序执行再 <strong>app.quit()</strong> 之前执行</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; exec &#125;  <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;child_process&#x27;</span>;<br><span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">&#x27;taskkill /f /t /im app.exe&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stdout, stderr</span>) =&gt;</span> &#123;<br> <span class=\"hljs-keyword\">if</span> (err) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err)<br> <span class=\"hljs-keyword\">return</span>;<br> &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h1 id=\"应用单开\"><a href=\"#应用单开\" class=\"headerlink\" title=\"应用单开\"></a>应用单开</h1><p>可通过 requestSingleInstanceLock() 方案添加应用单开处理<br>requestSingleInstanceLock API 可以参考<a href=\"https://www.electronjs.org/zh/docs/latest/api/app#requestSingleInstanceLock\">官网解释</a></p>\n<ul>\n<li>通过requestSingleInstanceLock 获取单例</li>\n<li>根据 单例锁状态 判断是否展示应用还是关闭应用<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> appInstanceLock = app.<span class=\"hljs-title function_\">requestSingleInstanceLock</span>();<br><span class=\"hljs-keyword\">if</span> (!appInstanceLock) &#123;<br>  app.<span class=\"hljs-title function_\">quit</span>();<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  <span class=\"hljs-comment\">// 开启APP</span><br>  <span class=\"hljs-title function_\">loadWinApp</span>();<br>&#125;<br><br>app.<span class=\"hljs-title function_\">whenReady</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">()=&gt;</span> &#123;<br>  ....<br>  <span class=\"hljs-comment\">// 只允许打开一个窗口</span><br><br>  app.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;second-instance&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    win!.<span class=\"hljs-title function_\">show</span>();<br>  &#125;);<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"win7-桌面端支持\"><a href=\"#win7-桌面端支持\" class=\"headerlink\" title=\"win7 桌面端支持\"></a>win7 桌面端支持</h1><p>electron23.0 之后不再支持win7&amp;&amp;win8 等，详情见<a href=\"https://github.com/electron/electron/tree/main\">官方文档</a><br>如果程序需要支持可以将electron 降级版本</p>\n<ul>\n<li>electron 22.0</li>\n<li>electron-builder 22.10.5</li>\n</ul>\n<h1 id=\"win7-打包后程序安装提示启动错误\"><a href=\"#win7-打包后程序安装提示启动错误\" class=\"headerlink\" title=\"win7 打包后程序安装提示启动错误\"></a>win7 打包后程序安装提示启动错误</h1><p> 需要安装依微软常用的依赖库<br> <a href=\"/resource/%E5%BE%AE%E8%BD%AF%E5%B8%B8%E7%94%A8%E8%BF%90%E8%A1%8C%E5%BA%93%E5%90%88%E9%9B%86_2023.03.03.exe\">微软常用运行库合集</a></p>\n<h1 id=\"客户端-getAppPath-含有-app-asar-问题处理\"><a href=\"#客户端-getAppPath-含有-app-asar-问题处理\" class=\"headerlink\" title=\"客户端 getAppPath 含有 app.asar 问题处理\"></a>客户端 getAppPath 含有 app.asar 问题处理</h1><p> getAppPath()可以获取到程序运行跟目录，打包后会有app.asar<br> 当前可以直接通过replace 函数替换 app.asar<br> 例如：<br> <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> appRootPath = app.<span class=\"hljs-title function_\">getAppPath</span>().<span class=\"hljs-title function_\">repace</span>(<span class=\"hljs-string\">&#x27;app.asar&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br><br></code></pre></td></tr></table></figure></p>\n<h1 id=\"vite-vue3-页面中图片显示错误问题处理\"><a href=\"#vite-vue3-页面中图片显示错误问题处理\" class=\"headerlink\" title=\"vite-vue3 页面中图片显示错误问题处理\"></a>vite-vue3 页面中图片显示错误问题处理</h1><p>图片地址为类似</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> img = <span class=\"hljs-string\">&#x27;/img/test.png&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>本地开发时预览正常electron 打包线上后显示地址找不到<br>处理方案将图片地址转为绝对地址路径</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> img = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">&#x27;/image/sludge.png&#x27;</span>, <span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">url</span>).<span class=\"hljs-property\">href</span><br></code></pre></td></tr></table></figure>"},{"title":"搭建 electron开发环境","date":"2023-10-17T06:02:22.000Z","_content":"\n#基础项目搭建\n\n## 通过vite脚手架vue3前端项目\n```bash\nnpm create vite@latest electron-vue -- --template vue-ts\n```\n## 添加 electron  \n安装electron && electron-builder\n```bash\nnpm i -D electron\nnpm i -D electron-builder\n```\n##安装开源插件 [vite-plugin-electron](https://github.com/electron-vite/vite-plugin-electron)\n```bash\nnpm i -D vite-plugin-electron\n```\n## vite-config.ts 引入vite-plugin-electron 插件\n```ts\nimport electron from 'vite-plugin-electron/simple';\nimport path from 'node:path'\nexport default defineConfig({\n  plugins: [\n    vue(),\n    electron({\n      main: {\n        // Shortcut of `build.lib.entry`.\n        entry: 'electron/main.ts'\n      },\n      preload: {\n        // Shortcut of `build.rollupOptions.input`.\n        // Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.\n        input: path.join(__dirname, 'electron/preload.ts')\n      },\n      // Ployfill the Electron and Node.js built-in modules for Renderer process.\n      // See 👉 https://github.com/electron-vite/vite-plugin-electron-renderer\n      renderer: {}\n    })\n  ],\n  server: {\n    port: 9222\n  },\n  resolve: {\n    alias: [\n      {\n        find: '@',\n        replacement: pathResolve('src')\n      }\n    ]\n  }\n});\n```\n\n## 添加electron 入口文件\n```bash\ncd electron-vue \nmkdir electron\ntouch main.ts # 入口主文件\ntouch preload.ts # 预加载脚本\n```\nmain.ts\n```ts\nimport { app, BrowserWindow, session } from 'electron';\nimport path from 'node:path';\n\nlet mainWindow: BrowserWindow | null;\nconst VITE_DEV_SERVER_URL = process.env['VITE_DEV_SERVER_URL'];\nprocess.env.DIST = path.join(__dirname, '../dist');\nprocess.env.VITE_PUBLIC = app.isPackaged\n  ? process.env.DIST\n  : path.join(process.env.DIST, '../public');\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    // 修改窗口图标\n    icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\n    title: '测试',\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  });\n  if (VITE_DEV_SERVER_URL) {\n    mainWindow.loadURL(VITE_DEV_SERVER_URL);\n  } else {\n    mainWindow.loadFile(path.join(process.env.DIST, 'index.html'));\n  }\n}\n\nfunction loadWinApp() {\n  startBackendServer().then(() => {\n    console.log('[info]server is stared');\n  });\n\n  // Quit when all windows are closed, except on macOS. There, it's common\n  // for applications and their menu bar to stay active until the user quits\n  // explicitly with Cmd + Q.\n  app.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') {\n      app.quit();\n      mainWindow = null;\n    }\n  });\n\n  app.on('activate', () => {\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n\n  app.whenReady().then(async () => {\n    // 创建窗口\n    createWindow();\n  });\n}\nloadWinApp()\n\n```\n## 启动项目 项目\n```bash\nnpm run dev\n```\n\n\n\n","source":"_posts/electron/electron-start.md","raw":"---\ntitle: 搭建 electron开发环境\ndate: 2023-10-17 14:02:22\ntags: electron\n---\n\n#基础项目搭建\n\n## 通过vite脚手架vue3前端项目\n```bash\nnpm create vite@latest electron-vue -- --template vue-ts\n```\n## 添加 electron  \n安装electron && electron-builder\n```bash\nnpm i -D electron\nnpm i -D electron-builder\n```\n##安装开源插件 [vite-plugin-electron](https://github.com/electron-vite/vite-plugin-electron)\n```bash\nnpm i -D vite-plugin-electron\n```\n## vite-config.ts 引入vite-plugin-electron 插件\n```ts\nimport electron from 'vite-plugin-electron/simple';\nimport path from 'node:path'\nexport default defineConfig({\n  plugins: [\n    vue(),\n    electron({\n      main: {\n        // Shortcut of `build.lib.entry`.\n        entry: 'electron/main.ts'\n      },\n      preload: {\n        // Shortcut of `build.rollupOptions.input`.\n        // Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.\n        input: path.join(__dirname, 'electron/preload.ts')\n      },\n      // Ployfill the Electron and Node.js built-in modules for Renderer process.\n      // See 👉 https://github.com/electron-vite/vite-plugin-electron-renderer\n      renderer: {}\n    })\n  ],\n  server: {\n    port: 9222\n  },\n  resolve: {\n    alias: [\n      {\n        find: '@',\n        replacement: pathResolve('src')\n      }\n    ]\n  }\n});\n```\n\n## 添加electron 入口文件\n```bash\ncd electron-vue \nmkdir electron\ntouch main.ts # 入口主文件\ntouch preload.ts # 预加载脚本\n```\nmain.ts\n```ts\nimport { app, BrowserWindow, session } from 'electron';\nimport path from 'node:path';\n\nlet mainWindow: BrowserWindow | null;\nconst VITE_DEV_SERVER_URL = process.env['VITE_DEV_SERVER_URL'];\nprocess.env.DIST = path.join(__dirname, '../dist');\nprocess.env.VITE_PUBLIC = app.isPackaged\n  ? process.env.DIST\n  : path.join(process.env.DIST, '../public');\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    // 修改窗口图标\n    icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\n    title: '测试',\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  });\n  if (VITE_DEV_SERVER_URL) {\n    mainWindow.loadURL(VITE_DEV_SERVER_URL);\n  } else {\n    mainWindow.loadFile(path.join(process.env.DIST, 'index.html'));\n  }\n}\n\nfunction loadWinApp() {\n  startBackendServer().then(() => {\n    console.log('[info]server is stared');\n  });\n\n  // Quit when all windows are closed, except on macOS. There, it's common\n  // for applications and their menu bar to stay active until the user quits\n  // explicitly with Cmd + Q.\n  app.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') {\n      app.quit();\n      mainWindow = null;\n    }\n  });\n\n  app.on('activate', () => {\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n\n  app.whenReady().then(async () => {\n    // 创建窗口\n    createWindow();\n  });\n}\nloadWinApp()\n\n```\n## 启动项目 项目\n```bash\nnpm run dev\n```\n\n\n\n","slug":"electron/electron-start","published":1,"updated":"2023-11-28T14:24:47.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbv000ejcsk0xsm64rm","content":"<p>#基础项目搭建</p>\n<h2 id=\"通过vite脚手架vue3前端项目\"><a href=\"#通过vite脚手架vue3前端项目\" class=\"headerlink\" title=\"通过vite脚手架vue3前端项目\"></a>通过vite脚手架vue3前端项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm create vite@latest electron-vue -- --template vue-ts<br></code></pre></td></tr></table></figure>\n<h2 id=\"添加-electron\"><a href=\"#添加-electron\" class=\"headerlink\" title=\"添加 electron\"></a>添加 electron</h2><p>安装electron &amp;&amp; electron-builder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i -D electron<br>npm i -D electron-builder<br></code></pre></td></tr></table></figure>\n<p>##安装开源插件 <a href=\"https://github.com/electron-vite/vite-plugin-electron\">vite-plugin-electron</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i -D vite-plugin-electron<br></code></pre></td></tr></table></figure>\n<h2 id=\"vite-config-ts-引入vite-plugin-electron-插件\"><a href=\"#vite-config-ts-引入vite-plugin-electron-插件\" class=\"headerlink\" title=\"vite-config.ts 引入vite-plugin-electron 插件\"></a>vite-config.ts 引入vite-plugin-electron 插件</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> electron <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite-plugin-electron/simple&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node:path&#x27;</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-title function_\">vue</span>(),<br>    <span class=\"hljs-title function_\">electron</span>(&#123;<br>      <span class=\"hljs-attr\">main</span>: &#123;<br>        <span class=\"hljs-comment\">// Shortcut of `build.lib.entry`.</span><br>        <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;electron/main.ts&#x27;</span><br>      &#125;,<br>      <span class=\"hljs-attr\">preload</span>: &#123;<br>        <span class=\"hljs-comment\">// Shortcut of `build.rollupOptions.input`.</span><br>        <span class=\"hljs-comment\">// Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.</span><br>        <span class=\"hljs-attr\">input</span>: path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;electron/preload.ts&#x27;</span>)<br>      &#125;,<br>      <span class=\"hljs-comment\">// Ployfill the Electron and Node.js built-in modules for Renderer process.</span><br>      <span class=\"hljs-comment\">// See 👉 https://github.com/electron-vite/vite-plugin-electron-renderer</span><br>      <span class=\"hljs-attr\">renderer</span>: &#123;&#125;<br>    &#125;)<br>  ],<br>  <span class=\"hljs-attr\">server</span>: &#123;<br>    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">9222</span><br>  &#125;,<br>  <span class=\"hljs-attr\">resolve</span>: &#123;<br>    <span class=\"hljs-attr\">alias</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">find</span>: <span class=\"hljs-string\">&#x27;@&#x27;</span>,<br>        <span class=\"hljs-attr\">replacement</span>: <span class=\"hljs-title function_\">pathResolve</span>(<span class=\"hljs-string\">&#x27;src&#x27;</span>)<br>      &#125;<br>    ]<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加electron-入口文件\"><a href=\"#添加electron-入口文件\" class=\"headerlink\" title=\"添加electron 入口文件\"></a>添加electron 入口文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> electron-vue <br><span class=\"hljs-built_in\">mkdir</span> electron<br><span class=\"hljs-built_in\">touch</span> main.ts <span class=\"hljs-comment\"># 入口主文件</span><br><span class=\"hljs-built_in\">touch</span> preload.ts <span class=\"hljs-comment\"># 预加载脚本</span><br></code></pre></td></tr></table></figure>\n<p>main.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; app, <span class=\"hljs-title class_\">BrowserWindow</span>, session &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;electron&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node:path&#x27;</span>;<br><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">mainWindow</span>: <span class=\"hljs-title class_\">BrowserWindow</span> | <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span> = process.<span class=\"hljs-property\">env</span>[<span class=\"hljs-string\">&#x27;VITE_DEV_SERVER_URL&#x27;</span>];<br>process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DIST</span> = path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;../dist&#x27;</span>);<br>process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">VITE_PUBLIC</span> = app.<span class=\"hljs-property\">isPackaged</span><br>  ? process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DIST</span><br>  : path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DIST</span>, <span class=\"hljs-string\">&#x27;../public&#x27;</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createWindow</span>(<span class=\"hljs-params\"></span>) &#123;<br>  mainWindow = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BrowserWindow</span>(&#123;<br>    <span class=\"hljs-comment\">// 修改窗口图标</span><br>    <span class=\"hljs-attr\">icon</span>: path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">VITE_PUBLIC</span>, <span class=\"hljs-string\">&#x27;favicon.ico&#x27;</span>),<br>    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;测试&#x27;</span>,<br>    <span class=\"hljs-attr\">webPreferences</span>: &#123;<br>      <span class=\"hljs-attr\">preload</span>: path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;preload.js&#x27;</span>)<br>    &#125;<br>  &#125;);<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span>) &#123;<br>    mainWindow.<span class=\"hljs-title function_\">loadURL</span>(<span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span>);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    mainWindow.<span class=\"hljs-title function_\">loadFile</span>(path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DIST</span>, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>));<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadWinApp</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">startBackendServer</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;[info]server is stared&#x27;</span>);<br>  &#125;);<br><br>  <span class=\"hljs-comment\">// Quit when all windows are closed, except on macOS. There, it&#x27;s common</span><br>  <span class=\"hljs-comment\">// for applications and their menu bar to stay active until the user quits</span><br>  <span class=\"hljs-comment\">// explicitly with Cmd + Q.</span><br>  app.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;window-all-closed&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">platform</span> !== <span class=\"hljs-string\">&#x27;darwin&#x27;</span>) &#123;<br>      app.<span class=\"hljs-title function_\">quit</span>();<br>      mainWindow = <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>  &#125;);<br><br>  app.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;activate&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// On OS X it&#x27;s common to re-create a window in the app when the</span><br>    <span class=\"hljs-comment\">// dock icon is clicked and there are no other windows open.</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">BrowserWindow</span>.<span class=\"hljs-title function_\">getAllWindows</span>().<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-title function_\">createWindow</span>();<br>    &#125;<br>  &#125;);<br><br>  app.<span class=\"hljs-title function_\">whenReady</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>    <span class=\"hljs-comment\">// 创建窗口</span><br>    <span class=\"hljs-title function_\">createWindow</span>();<br>  &#125;);<br>&#125;<br><span class=\"hljs-title function_\">loadWinApp</span>()<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"启动项目-项目\"><a href=\"#启动项目-项目\" class=\"headerlink\" title=\"启动项目 项目\"></a>启动项目 项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm run dev<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>#基础项目搭建</p>\n<h2 id=\"通过vite脚手架vue3前端项目\"><a href=\"#通过vite脚手架vue3前端项目\" class=\"headerlink\" title=\"通过vite脚手架vue3前端项目\"></a>通过vite脚手架vue3前端项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm create vite@latest electron-vue -- --template vue-ts<br></code></pre></td></tr></table></figure>\n<h2 id=\"添加-electron\"><a href=\"#添加-electron\" class=\"headerlink\" title=\"添加 electron\"></a>添加 electron</h2><p>安装electron &amp;&amp; electron-builder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i -D electron<br>npm i -D electron-builder<br></code></pre></td></tr></table></figure>\n<p>##安装开源插件 <a href=\"https://github.com/electron-vite/vite-plugin-electron\">vite-plugin-electron</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i -D vite-plugin-electron<br></code></pre></td></tr></table></figure>\n<h2 id=\"vite-config-ts-引入vite-plugin-electron-插件\"><a href=\"#vite-config-ts-引入vite-plugin-electron-插件\" class=\"headerlink\" title=\"vite-config.ts 引入vite-plugin-electron 插件\"></a>vite-config.ts 引入vite-plugin-electron 插件</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> electron <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite-plugin-electron/simple&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node:path&#x27;</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-title function_\">vue</span>(),<br>    <span class=\"hljs-title function_\">electron</span>(&#123;<br>      <span class=\"hljs-attr\">main</span>: &#123;<br>        <span class=\"hljs-comment\">// Shortcut of `build.lib.entry`.</span><br>        <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;electron/main.ts&#x27;</span><br>      &#125;,<br>      <span class=\"hljs-attr\">preload</span>: &#123;<br>        <span class=\"hljs-comment\">// Shortcut of `build.rollupOptions.input`.</span><br>        <span class=\"hljs-comment\">// Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.</span><br>        <span class=\"hljs-attr\">input</span>: path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;electron/preload.ts&#x27;</span>)<br>      &#125;,<br>      <span class=\"hljs-comment\">// Ployfill the Electron and Node.js built-in modules for Renderer process.</span><br>      <span class=\"hljs-comment\">// See 👉 https://github.com/electron-vite/vite-plugin-electron-renderer</span><br>      <span class=\"hljs-attr\">renderer</span>: &#123;&#125;<br>    &#125;)<br>  ],<br>  <span class=\"hljs-attr\">server</span>: &#123;<br>    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">9222</span><br>  &#125;,<br>  <span class=\"hljs-attr\">resolve</span>: &#123;<br>    <span class=\"hljs-attr\">alias</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">find</span>: <span class=\"hljs-string\">&#x27;@&#x27;</span>,<br>        <span class=\"hljs-attr\">replacement</span>: <span class=\"hljs-title function_\">pathResolve</span>(<span class=\"hljs-string\">&#x27;src&#x27;</span>)<br>      &#125;<br>    ]<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加electron-入口文件\"><a href=\"#添加electron-入口文件\" class=\"headerlink\" title=\"添加electron 入口文件\"></a>添加electron 入口文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> electron-vue <br><span class=\"hljs-built_in\">mkdir</span> electron<br><span class=\"hljs-built_in\">touch</span> main.ts <span class=\"hljs-comment\"># 入口主文件</span><br><span class=\"hljs-built_in\">touch</span> preload.ts <span class=\"hljs-comment\"># 预加载脚本</span><br></code></pre></td></tr></table></figure>\n<p>main.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; app, <span class=\"hljs-title class_\">BrowserWindow</span>, session &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;electron&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node:path&#x27;</span>;<br><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">mainWindow</span>: <span class=\"hljs-title class_\">BrowserWindow</span> | <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span> = process.<span class=\"hljs-property\">env</span>[<span class=\"hljs-string\">&#x27;VITE_DEV_SERVER_URL&#x27;</span>];<br>process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DIST</span> = path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;../dist&#x27;</span>);<br>process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">VITE_PUBLIC</span> = app.<span class=\"hljs-property\">isPackaged</span><br>  ? process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DIST</span><br>  : path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DIST</span>, <span class=\"hljs-string\">&#x27;../public&#x27;</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createWindow</span>(<span class=\"hljs-params\"></span>) &#123;<br>  mainWindow = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BrowserWindow</span>(&#123;<br>    <span class=\"hljs-comment\">// 修改窗口图标</span><br>    <span class=\"hljs-attr\">icon</span>: path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">VITE_PUBLIC</span>, <span class=\"hljs-string\">&#x27;favicon.ico&#x27;</span>),<br>    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;测试&#x27;</span>,<br>    <span class=\"hljs-attr\">webPreferences</span>: &#123;<br>      <span class=\"hljs-attr\">preload</span>: path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;preload.js&#x27;</span>)<br>    &#125;<br>  &#125;);<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span>) &#123;<br>    mainWindow.<span class=\"hljs-title function_\">loadURL</span>(<span class=\"hljs-variable constant_\">VITE_DEV_SERVER_URL</span>);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    mainWindow.<span class=\"hljs-title function_\">loadFile</span>(path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DIST</span>, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>));<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadWinApp</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">startBackendServer</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;[info]server is stared&#x27;</span>);<br>  &#125;);<br><br>  <span class=\"hljs-comment\">// Quit when all windows are closed, except on macOS. There, it&#x27;s common</span><br>  <span class=\"hljs-comment\">// for applications and their menu bar to stay active until the user quits</span><br>  <span class=\"hljs-comment\">// explicitly with Cmd + Q.</span><br>  app.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;window-all-closed&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">platform</span> !== <span class=\"hljs-string\">&#x27;darwin&#x27;</span>) &#123;<br>      app.<span class=\"hljs-title function_\">quit</span>();<br>      mainWindow = <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>  &#125;);<br><br>  app.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;activate&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// On OS X it&#x27;s common to re-create a window in the app when the</span><br>    <span class=\"hljs-comment\">// dock icon is clicked and there are no other windows open.</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">BrowserWindow</span>.<span class=\"hljs-title function_\">getAllWindows</span>().<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-title function_\">createWindow</span>();<br>    &#125;<br>  &#125;);<br><br>  app.<span class=\"hljs-title function_\">whenReady</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>    <span class=\"hljs-comment\">// 创建窗口</span><br>    <span class=\"hljs-title function_\">createWindow</span>();<br>  &#125;);<br>&#125;<br><span class=\"hljs-title function_\">loadWinApp</span>()<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"启动项目-项目\"><a href=\"#启动项目-项目\" class=\"headerlink\" title=\"启动项目 项目\"></a>启动项目 项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm run dev<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"前端x6分批万级节点","date":"2024-06-10T08:59:29.000Z","_content":"# 需求\n前端画布上需要渲染`10万节点`，技术方案选择 vue3 + [x6](https://x6.antv.antgroup.com/tutorial/getting-started)\n\n当前生成节点测试对象为如下\n```ts\n    const generateRandomPosition = () => {\n        const x = Math.floor(Math.random() * 8000);\n        const y = Math.floor(Math.random() * 8000);\n        return { x, y, width: 100, height: 40 };\n    };\n    function genData() {\n        graphData.value = []\n        for (let i = 0; i < num.value; i++) {\n            const position = generateRandomPosition();\n            graphData.value.push(position)\n        }\n    }\n\n\n```\n\n## 最简单个循环添加\n```ts\nfor(const node of nodes) {\n    graph.value.addNode(node)\n}\n```\n10万节点单个加载时，会导致住主线程卡死\n经测试耗时大概：1003301.880859375 ms\n\n## 调用x6批量添加 nodes\n```ts\nconst nodes = [....]\ngraph.value.addNode(nodes)\n\n```\n\n经测试耗时大概：页面会卡死，等待响应\n\n## 分批 [requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame) 渲染处理\n\n```ts\n    function start(graph: Graph, nodes: any[]) {\n        let chunkSize = 100\n        let chunkCount = Math.ceil(num.value / chunkSize)\n        let chunkIndex = 0\n        const name = `render ${num.value}:`\n        console.time(name)\n        function render() {\n            if (chunkIndex <= chunkCount) {\n                const chunks = nodes.slice(chunkIndex * chunkSize, (chunkIndex + 1) * chunkSize)\n                graph.addNodes(chunks)\n                renderCount.value = graph.getNodes().length\n                chunkIndex++\n                requestAnimationFrame(render)\n            } else {\n                console.timeEnd(name)\n            }\n\n\n        }\n        render()\n\n    }\n```\nrequestAnimationFrame 可以通过[caniuse.com](https://caniuse.com/?search=import.meta) 判断浏览器是否支持\n## requestAnimationFrame 不支持时可以才用降级方案\nrequestAnimationFrame 大概会在 16Hz 渲染处理，可以使用setTimeout 作为降级方案处理\n```ts\nconst requestAnimationFrame = (cb => setTimeout(cb, 1000/60))\n```\n","source":"_posts/frontend-big-data/batch-render.md","raw":"---\ntitle: 前端x6分批万级节点\ndate: 2024-06-10 16:59:29\ntags:\n---\n# 需求\n前端画布上需要渲染`10万节点`，技术方案选择 vue3 + [x6](https://x6.antv.antgroup.com/tutorial/getting-started)\n\n当前生成节点测试对象为如下\n```ts\n    const generateRandomPosition = () => {\n        const x = Math.floor(Math.random() * 8000);\n        const y = Math.floor(Math.random() * 8000);\n        return { x, y, width: 100, height: 40 };\n    };\n    function genData() {\n        graphData.value = []\n        for (let i = 0; i < num.value; i++) {\n            const position = generateRandomPosition();\n            graphData.value.push(position)\n        }\n    }\n\n\n```\n\n## 最简单个循环添加\n```ts\nfor(const node of nodes) {\n    graph.value.addNode(node)\n}\n```\n10万节点单个加载时，会导致住主线程卡死\n经测试耗时大概：1003301.880859375 ms\n\n## 调用x6批量添加 nodes\n```ts\nconst nodes = [....]\ngraph.value.addNode(nodes)\n\n```\n\n经测试耗时大概：页面会卡死，等待响应\n\n## 分批 [requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame) 渲染处理\n\n```ts\n    function start(graph: Graph, nodes: any[]) {\n        let chunkSize = 100\n        let chunkCount = Math.ceil(num.value / chunkSize)\n        let chunkIndex = 0\n        const name = `render ${num.value}:`\n        console.time(name)\n        function render() {\n            if (chunkIndex <= chunkCount) {\n                const chunks = nodes.slice(chunkIndex * chunkSize, (chunkIndex + 1) * chunkSize)\n                graph.addNodes(chunks)\n                renderCount.value = graph.getNodes().length\n                chunkIndex++\n                requestAnimationFrame(render)\n            } else {\n                console.timeEnd(name)\n            }\n\n\n        }\n        render()\n\n    }\n```\nrequestAnimationFrame 可以通过[caniuse.com](https://caniuse.com/?search=import.meta) 判断浏览器是否支持\n## requestAnimationFrame 不支持时可以才用降级方案\nrequestAnimationFrame 大概会在 16Hz 渲染处理，可以使用setTimeout 作为降级方案处理\n```ts\nconst requestAnimationFrame = (cb => setTimeout(cb, 1000/60))\n```\n","slug":"frontend-big-data/batch-render","published":1,"updated":"2024-06-18T05:29:56.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbw000hjcskhjms2nu6","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>前端画布上需要渲染<code>10万节点</code>，技术方案选择 vue3 + <a href=\"https://x6.antv.antgroup.com/tutorial/getting-started\">x6</a></p>\n<p>当前生成节点测试对象为如下</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">generateRandomPosition</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-number\">8000</span>);<br>    <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-number\">8000</span>);<br>    <span class=\"hljs-keyword\">return</span> &#123; x, y, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">40</span> &#125;;<br>&#125;;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">genData</span>(<span class=\"hljs-params\"></span>) &#123;<br>    graphData.<span class=\"hljs-property\">value</span> = []<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; num.<span class=\"hljs-property\">value</span>; i++) &#123;<br>        <span class=\"hljs-keyword\">const</span> position = <span class=\"hljs-title function_\">generateRandomPosition</span>();<br>        graphData.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">push</span>(position)<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"最简单个循环添加\"><a href=\"#最简单个循环添加\" class=\"headerlink\" title=\"最简单个循环添加\"></a>最简单个循环添加</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> node <span class=\"hljs-keyword\">of</span> nodes) &#123;<br>    graph.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">addNode</span>(node)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>10万节点单个加载时，会导致住主线程卡死<br>经测试耗时大概：1003301.880859375 ms</p>\n<h2 id=\"调用x6批量添加-nodes\"><a href=\"#调用x6批量添加-nodes\" class=\"headerlink\" title=\"调用x6批量添加 nodes\"></a>调用x6批量添加 nodes</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> nodes = [....]<br>graph.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">addNode</span>(nodes)<br><br></code></pre></td></tr></table></figure>\n\n<p>经测试耗时大概：页面会卡死，等待响应</p>\n<h2 id=\"分批-requestAnimationFrame-渲染处理\"><a href=\"#分批-requestAnimationFrame-渲染处理\" class=\"headerlink\" title=\"分批 requestAnimationFrame 渲染处理\"></a>分批 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a> 渲染处理</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">start</span>(<span class=\"hljs-params\">graph: Graph, nodes: <span class=\"hljs-built_in\">any</span>[]</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> chunkSize = <span class=\"hljs-number\">100</span><br>    <span class=\"hljs-keyword\">let</span> chunkCount = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">ceil</span>(num.<span class=\"hljs-property\">value</span> / chunkSize)<br>    <span class=\"hljs-keyword\">let</span> chunkIndex = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">`render <span class=\"hljs-subst\">$&#123;num.value&#125;</span>:`</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">time</span>(name)<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (chunkIndex &lt;= chunkCount) &#123;<br>            <span class=\"hljs-keyword\">const</span> chunks = nodes.<span class=\"hljs-title function_\">slice</span>(chunkIndex * chunkSize, (chunkIndex + <span class=\"hljs-number\">1</span>) * chunkSize)<br>            graph.<span class=\"hljs-title function_\">addNodes</span>(chunks)<br>            renderCount.<span class=\"hljs-property\">value</span> = graph.<span class=\"hljs-title function_\">getNodes</span>().<span class=\"hljs-property\">length</span><br>            chunkIndex++<br>            <span class=\"hljs-title function_\">requestAnimationFrame</span>(render)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">timeEnd</span>(name)<br>        &#125;<br><br><br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>()<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>requestAnimationFrame 可以通过<a href=\"https://caniuse.com/?search=import.meta\">caniuse.com</a> 判断浏览器是否支持</p>\n<h2 id=\"requestAnimationFrame-不支持时可以才用降级方案\"><a href=\"#requestAnimationFrame-不支持时可以才用降级方案\" class=\"headerlink\" title=\"requestAnimationFrame 不支持时可以才用降级方案\"></a>requestAnimationFrame 不支持时可以才用降级方案</h2><p>requestAnimationFrame 大概会在 16Hz 渲染处理，可以使用setTimeout 作为降级方案处理</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> requestAnimationFrame = (<span class=\"hljs-function\"><span class=\"hljs-params\">cb</span> =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(cb, <span class=\"hljs-number\">1000</span>/<span class=\"hljs-number\">60</span>))<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>前端画布上需要渲染<code>10万节点</code>，技术方案选择 vue3 + <a href=\"https://x6.antv.antgroup.com/tutorial/getting-started\">x6</a></p>\n<p>当前生成节点测试对象为如下</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">generateRandomPosition</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-number\">8000</span>);<br>    <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-number\">8000</span>);<br>    <span class=\"hljs-keyword\">return</span> &#123; x, y, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">40</span> &#125;;<br>&#125;;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">genData</span>(<span class=\"hljs-params\"></span>) &#123;<br>    graphData.<span class=\"hljs-property\">value</span> = []<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; num.<span class=\"hljs-property\">value</span>; i++) &#123;<br>        <span class=\"hljs-keyword\">const</span> position = <span class=\"hljs-title function_\">generateRandomPosition</span>();<br>        graphData.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">push</span>(position)<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"最简单个循环添加\"><a href=\"#最简单个循环添加\" class=\"headerlink\" title=\"最简单个循环添加\"></a>最简单个循环添加</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> node <span class=\"hljs-keyword\">of</span> nodes) &#123;<br>    graph.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">addNode</span>(node)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>10万节点单个加载时，会导致住主线程卡死<br>经测试耗时大概：1003301.880859375 ms</p>\n<h2 id=\"调用x6批量添加-nodes\"><a href=\"#调用x6批量添加-nodes\" class=\"headerlink\" title=\"调用x6批量添加 nodes\"></a>调用x6批量添加 nodes</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> nodes = [....]<br>graph.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">addNode</span>(nodes)<br><br></code></pre></td></tr></table></figure>\n\n<p>经测试耗时大概：页面会卡死，等待响应</p>\n<h2 id=\"分批-requestAnimationFrame-渲染处理\"><a href=\"#分批-requestAnimationFrame-渲染处理\" class=\"headerlink\" title=\"分批 requestAnimationFrame 渲染处理\"></a>分批 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a> 渲染处理</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">start</span>(<span class=\"hljs-params\">graph: Graph, nodes: <span class=\"hljs-built_in\">any</span>[]</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> chunkSize = <span class=\"hljs-number\">100</span><br>    <span class=\"hljs-keyword\">let</span> chunkCount = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">ceil</span>(num.<span class=\"hljs-property\">value</span> / chunkSize)<br>    <span class=\"hljs-keyword\">let</span> chunkIndex = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">`render <span class=\"hljs-subst\">$&#123;num.value&#125;</span>:`</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">time</span>(name)<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (chunkIndex &lt;= chunkCount) &#123;<br>            <span class=\"hljs-keyword\">const</span> chunks = nodes.<span class=\"hljs-title function_\">slice</span>(chunkIndex * chunkSize, (chunkIndex + <span class=\"hljs-number\">1</span>) * chunkSize)<br>            graph.<span class=\"hljs-title function_\">addNodes</span>(chunks)<br>            renderCount.<span class=\"hljs-property\">value</span> = graph.<span class=\"hljs-title function_\">getNodes</span>().<span class=\"hljs-property\">length</span><br>            chunkIndex++<br>            <span class=\"hljs-title function_\">requestAnimationFrame</span>(render)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">timeEnd</span>(name)<br>        &#125;<br><br><br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>()<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>requestAnimationFrame 可以通过<a href=\"https://caniuse.com/?search=import.meta\">caniuse.com</a> 判断浏览器是否支持</p>\n<h2 id=\"requestAnimationFrame-不支持时可以才用降级方案\"><a href=\"#requestAnimationFrame-不支持时可以才用降级方案\" class=\"headerlink\" title=\"requestAnimationFrame 不支持时可以才用降级方案\"></a>requestAnimationFrame 不支持时可以才用降级方案</h2><p>requestAnimationFrame 大概会在 16Hz 渲染处理，可以使用setTimeout 作为降级方案处理</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> requestAnimationFrame = (<span class=\"hljs-function\"><span class=\"hljs-params\">cb</span> =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(cb, <span class=\"hljs-number\">1000</span>/<span class=\"hljs-number\">60</span>))<br></code></pre></td></tr></table></figure>\n"},{"title":"JS 实现队列","date":"2023-10-26T10:34:16.000Z","_content":"\n# 最小优先队列应用场景\n最小优先队列常用于任务调度、事件处理等场景，其中任务或事件具有不同的优先级。通过最小优先队列，可以按照优先级顺序处理任务或事件，确保高优先级的任务或事件先被处理，从而提高系统的效率和响应能力。\n\n# 二叉堆的定义\n 二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级储存（不使用数组的第一个位置）\n# 最小优先队列API 设计\n```ts\nclass MinPQ {\n    \n    con\n}\n\n```","source":"_posts/data/min-pq.md","raw":"---\ntitle: JS 实现队列\ndate: 2023-10-26 18:34:16\ntags: 数据结构\n---\n\n# 最小优先队列应用场景\n最小优先队列常用于任务调度、事件处理等场景，其中任务或事件具有不同的优先级。通过最小优先队列，可以按照优先级顺序处理任务或事件，确保高优先级的任务或事件先被处理，从而提高系统的效率和响应能力。\n\n# 二叉堆的定义\n 二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级储存（不使用数组的第一个位置）\n# 最小优先队列API 设计\n```ts\nclass MinPQ {\n    \n    con\n}\n\n```","slug":"data/min-pq","published":1,"updated":"2024-07-01T00:57:12.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbx000kjcsk0vc0au6v","content":"<h1 id=\"最小优先队列应用场景\"><a href=\"#最小优先队列应用场景\" class=\"headerlink\" title=\"最小优先队列应用场景\"></a>最小优先队列应用场景</h1><p>最小优先队列常用于任务调度、事件处理等场景，其中任务或事件具有不同的优先级。通过最小优先队列，可以按照优先级顺序处理任务或事件，确保高优先级的任务或事件先被处理，从而提高系统的效率和响应能力。</p>\n<h1 id=\"二叉堆的定义\"><a href=\"#二叉堆的定义\" class=\"headerlink\" title=\"二叉堆的定义\"></a>二叉堆的定义</h1><p> 二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级储存（不使用数组的第一个位置）</p>\n<h1 id=\"最小优先队列API-设计\"><a href=\"#最小优先队列API-设计\" class=\"headerlink\" title=\"最小优先队列API 设计\"></a>最小优先队列API 设计</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinPQ</span> &#123;<br>    <br>    con<br>&#125;<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"最小优先队列应用场景\"><a href=\"#最小优先队列应用场景\" class=\"headerlink\" title=\"最小优先队列应用场景\"></a>最小优先队列应用场景</h1><p>最小优先队列常用于任务调度、事件处理等场景，其中任务或事件具有不同的优先级。通过最小优先队列，可以按照优先级顺序处理任务或事件，确保高优先级的任务或事件先被处理，从而提高系统的效率和响应能力。</p>\n<h1 id=\"二叉堆的定义\"><a href=\"#二叉堆的定义\" class=\"headerlink\" title=\"二叉堆的定义\"></a>二叉堆的定义</h1><p> 二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级储存（不使用数组的第一个位置）</p>\n<h1 id=\"最小优先队列API-设计\"><a href=\"#最小优先队列API-设计\" class=\"headerlink\" title=\"最小优先队列API 设计\"></a>最小优先队列API 设计</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinPQ</span> &#123;<br>    <br>    con<br>&#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"JS 实现队列","date":"2020-10-26T10:34:16.000Z","_content":"\n记录下学习算法中数据结构, 通过 JS 方式来实现一些数据结构\n\n# 队列\n## 队列作用场景\n\n队列是一种常用的数据结构，它具有 __先进先出（FIFO)__ 的特点。因此，队列在以下场景中非常有用：\n\n1. 任务调度：当有多个任务需要按照顺序执行时，可以使用队列来管理任务的执行顺序。\n\n2. 消息传递：在消息传递系统中，消息可以按照顺序放入队列中，然后按照先进先出的原则进行处理。\n\n3. 广度优先搜索：在图算法中，广度优先搜索常常使用队列来管理待访问的节点。\n\n4. 缓冲区管理：队列可以用于管理缓冲区，例如网络数据包的传输、打印任务的排队等。\n\n总之，队列在需要按照顺序处理数据的场景中非常有用。\n\n\n# 栈的API设计\n\n```ts\nexport class Queue<T> {\n    public collection:T[]\n\n    constructor() {\n        this.collection = []\n    }\n\n    public enqueue(item: T) {\n        this.collection.unshift(item)\n    }\n\n    public dequeue(): T | undefined {\n        return this.collection.pop()\n    }\n\n    public isEmpty() {\n        return this.collection.length === 0\n    }\n\n    public size() {\n        return this.collection.length\n    }\n}\n```\n# 队列示例\n```ts\n    function mkJob(name) {\n        return {\n            name\n        }\n    }\n\n    function main() {\n        const jobQueue = new Queue()\n        for(let i = 0; i< 4; i++) {\n            jobQueue.enqueue(mkJob(`job_${i}`))\n        }\n        while(!jobQueue.isEmpty()) {\n            const job = jobQueue.dequeue()\n            console.log(`handle job: ${job.name}`)\n        }\n\n    }\n```","source":"_posts/data/queue.md","raw":"---\ntitle: JS 实现队列\ndate: 2020-10-26 18:34:16\ntags: 数据结构\n---\n\n记录下学习算法中数据结构, 通过 JS 方式来实现一些数据结构\n\n# 队列\n## 队列作用场景\n\n队列是一种常用的数据结构，它具有 __先进先出（FIFO)__ 的特点。因此，队列在以下场景中非常有用：\n\n1. 任务调度：当有多个任务需要按照顺序执行时，可以使用队列来管理任务的执行顺序。\n\n2. 消息传递：在消息传递系统中，消息可以按照顺序放入队列中，然后按照先进先出的原则进行处理。\n\n3. 广度优先搜索：在图算法中，广度优先搜索常常使用队列来管理待访问的节点。\n\n4. 缓冲区管理：队列可以用于管理缓冲区，例如网络数据包的传输、打印任务的排队等。\n\n总之，队列在需要按照顺序处理数据的场景中非常有用。\n\n\n# 栈的API设计\n\n```ts\nexport class Queue<T> {\n    public collection:T[]\n\n    constructor() {\n        this.collection = []\n    }\n\n    public enqueue(item: T) {\n        this.collection.unshift(item)\n    }\n\n    public dequeue(): T | undefined {\n        return this.collection.pop()\n    }\n\n    public isEmpty() {\n        return this.collection.length === 0\n    }\n\n    public size() {\n        return this.collection.length\n    }\n}\n```\n# 队列示例\n```ts\n    function mkJob(name) {\n        return {\n            name\n        }\n    }\n\n    function main() {\n        const jobQueue = new Queue()\n        for(let i = 0; i< 4; i++) {\n            jobQueue.enqueue(mkJob(`job_${i}`))\n        }\n        while(!jobQueue.isEmpty()) {\n            const job = jobQueue.dequeue()\n            console.log(`handle job: ${job.name}`)\n        }\n\n    }\n```","slug":"data/queue","published":1,"updated":"2024-06-26T15:01:10.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbx000njcskhxd9etxc","content":"<p>记录下学习算法中数据结构, 通过 JS 方式来实现一些数据结构</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><h2 id=\"队列作用场景\"><a href=\"#队列作用场景\" class=\"headerlink\" title=\"队列作用场景\"></a>队列作用场景</h2><p>队列是一种常用的数据结构，它具有 <strong>先进先出（FIFO)</strong> 的特点。因此，队列在以下场景中非常有用：</p>\n<ol>\n<li><p>任务调度：当有多个任务需要按照顺序执行时，可以使用队列来管理任务的执行顺序。</p>\n</li>\n<li><p>消息传递：在消息传递系统中，消息可以按照顺序放入队列中，然后按照先进先出的原则进行处理。</p>\n</li>\n<li><p>广度优先搜索：在图算法中，广度优先搜索常常使用队列来管理待访问的节点。</p>\n</li>\n<li><p>缓冲区管理：队列可以用于管理缓冲区，例如网络数据包的传输、打印任务的排队等。</p>\n</li>\n</ol>\n<p>总之，队列在需要按照顺序处理数据的场景中非常有用。</p>\n<h1 id=\"栈的API设计\"><a href=\"#栈的API设计\" class=\"headerlink\" title=\"栈的API设计\"></a>栈的API设计</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Queue</span>&lt;T&gt; &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">collection</span>:T[]<br><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span> = []<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-params\">item: T</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-title function_\">unshift</span>(item)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">dequeue</span>(): T | <span class=\"hljs-literal\">undefined</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-title function_\">pop</span>()<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">isEmpty</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">size</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"队列示例\"><a href=\"#队列示例\" class=\"headerlink\" title=\"队列示例\"></a>队列示例</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mkJob</span>(<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        name<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> jobQueue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Queue</span>()<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i&lt; <span class=\"hljs-number\">4</span>; i++) &#123;<br>        jobQueue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-title function_\">mkJob</span>(<span class=\"hljs-string\">`job_<span class=\"hljs-subst\">$&#123;i&#125;</span>`</span>))<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span>(!jobQueue.<span class=\"hljs-title function_\">isEmpty</span>()) &#123;<br>        <span class=\"hljs-keyword\">const</span> job = jobQueue.<span class=\"hljs-title function_\">dequeue</span>()<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`handle job: <span class=\"hljs-subst\">$&#123;job.name&#125;</span>`</span>)<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>记录下学习算法中数据结构, 通过 JS 方式来实现一些数据结构</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><h2 id=\"队列作用场景\"><a href=\"#队列作用场景\" class=\"headerlink\" title=\"队列作用场景\"></a>队列作用场景</h2><p>队列是一种常用的数据结构，它具有 <strong>先进先出（FIFO)</strong> 的特点。因此，队列在以下场景中非常有用：</p>\n<ol>\n<li><p>任务调度：当有多个任务需要按照顺序执行时，可以使用队列来管理任务的执行顺序。</p>\n</li>\n<li><p>消息传递：在消息传递系统中，消息可以按照顺序放入队列中，然后按照先进先出的原则进行处理。</p>\n</li>\n<li><p>广度优先搜索：在图算法中，广度优先搜索常常使用队列来管理待访问的节点。</p>\n</li>\n<li><p>缓冲区管理：队列可以用于管理缓冲区，例如网络数据包的传输、打印任务的排队等。</p>\n</li>\n</ol>\n<p>总之，队列在需要按照顺序处理数据的场景中非常有用。</p>\n<h1 id=\"栈的API设计\"><a href=\"#栈的API设计\" class=\"headerlink\" title=\"栈的API设计\"></a>栈的API设计</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Queue</span>&lt;T&gt; &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">collection</span>:T[]<br><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span> = []<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-params\">item: T</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-title function_\">unshift</span>(item)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">dequeue</span>(): T | <span class=\"hljs-literal\">undefined</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-title function_\">pop</span>()<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">isEmpty</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">size</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"队列示例\"><a href=\"#队列示例\" class=\"headerlink\" title=\"队列示例\"></a>队列示例</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mkJob</span>(<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        name<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> jobQueue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Queue</span>()<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i&lt; <span class=\"hljs-number\">4</span>; i++) &#123;<br>        jobQueue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-title function_\">mkJob</span>(<span class=\"hljs-string\">`job_<span class=\"hljs-subst\">$&#123;i&#125;</span>`</span>))<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span>(!jobQueue.<span class=\"hljs-title function_\">isEmpty</span>()) &#123;<br>        <span class=\"hljs-keyword\">const</span> job = jobQueue.<span class=\"hljs-title function_\">dequeue</span>()<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`handle job: <span class=\"hljs-subst\">$&#123;job.name&#125;</span>`</span>)<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"JS 实现栈","date":"2020-10-25T07:34:16.000Z","_content":"\n记录下学习算法中数据结构, 通过 JS 方式来实现一些数据结构\n\n# 栈\n栈 后进先出结构，主要应用场景\n栈主要应用于以下场景：\n1. 表达式求值：栈可以用于实现表达式求值算法，如中缀表达式转后缀表达式并计算结果。\n2. 函数调用：栈可以用于保存函数调用的上下文信息，包括参数、返回地址等。\n3. 浏览器历史记录：浏览器的后退功能可以通过栈来实现，每次访问新页面时将页面地址入栈，后退时将栈顶元素出栈。\n4. 撤销操作：编辑器、图形软件等可以使用栈来实现撤销操作，每次操作将操作记录入栈，撤销时将栈顶操作出栈。\n5. 括号匹配：栈可以用于检查表达式中的括号是否匹配，遇到左括号入栈，遇到右括号出栈并检查是否匹配。\n\n# 栈的API设计\n\n```ts\nclass Stack<T extends unknown = any> {\n    private collection: T[]\n    constructor() {\n        this.collection = []\n    }\n\n    public push(item: T) {\n        this.collection.push(item)\n    }\n\n    public pop(): T | undefined {\n        return this.collection.pop()\n    }\n\n    /**\n     * @description: 是否为空\n     * @return {*}\n     */    \n    public isEmpty() {\n        return this.collection.length === 0\n    }\n\n    /**\n     * @description: 获取当前栈大小\n     * @return {*}\n     */    \n    public size() {\n        return this.collection.length\n    }\n\n    public clear() {\n        this.collection.length = 0\n    }\n}\n```","source":"_posts/data/stack.md","raw":"---\ntitle: JS 实现栈\ndate: 2020-10-25 15:34:16\ntags: 数据结构\n---\n\n记录下学习算法中数据结构, 通过 JS 方式来实现一些数据结构\n\n# 栈\n栈 后进先出结构，主要应用场景\n栈主要应用于以下场景：\n1. 表达式求值：栈可以用于实现表达式求值算法，如中缀表达式转后缀表达式并计算结果。\n2. 函数调用：栈可以用于保存函数调用的上下文信息，包括参数、返回地址等。\n3. 浏览器历史记录：浏览器的后退功能可以通过栈来实现，每次访问新页面时将页面地址入栈，后退时将栈顶元素出栈。\n4. 撤销操作：编辑器、图形软件等可以使用栈来实现撤销操作，每次操作将操作记录入栈，撤销时将栈顶操作出栈。\n5. 括号匹配：栈可以用于检查表达式中的括号是否匹配，遇到左括号入栈，遇到右括号出栈并检查是否匹配。\n\n# 栈的API设计\n\n```ts\nclass Stack<T extends unknown = any> {\n    private collection: T[]\n    constructor() {\n        this.collection = []\n    }\n\n    public push(item: T) {\n        this.collection.push(item)\n    }\n\n    public pop(): T | undefined {\n        return this.collection.pop()\n    }\n\n    /**\n     * @description: 是否为空\n     * @return {*}\n     */    \n    public isEmpty() {\n        return this.collection.length === 0\n    }\n\n    /**\n     * @description: 获取当前栈大小\n     * @return {*}\n     */    \n    public size() {\n        return this.collection.length\n    }\n\n    public clear() {\n        this.collection.length = 0\n    }\n}\n```","slug":"data/stack","published":1,"updated":"2024-06-19T15:02:05.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nby000pjcskgrc169v8","content":"<p>记录下学习算法中数据结构, 通过 JS 方式来实现一些数据结构</p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>栈 后进先出结构，主要应用场景<br>栈主要应用于以下场景：</p>\n<ol>\n<li>表达式求值：栈可以用于实现表达式求值算法，如中缀表达式转后缀表达式并计算结果。</li>\n<li>函数调用：栈可以用于保存函数调用的上下文信息，包括参数、返回地址等。</li>\n<li>浏览器历史记录：浏览器的后退功能可以通过栈来实现，每次访问新页面时将页面地址入栈，后退时将栈顶元素出栈。</li>\n<li>撤销操作：编辑器、图形软件等可以使用栈来实现撤销操作，每次操作将操作记录入栈，撤销时将栈顶操作出栈。</li>\n<li>括号匹配：栈可以用于检查表达式中的括号是否匹配，遇到左括号入栈，遇到右括号出栈并检查是否匹配。</li>\n</ol>\n<h1 id=\"栈的API设计\"><a href=\"#栈的API设计\" class=\"headerlink\" title=\"栈的API设计\"></a>栈的API设计</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Stack</span>&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">unknown</span> = <span class=\"hljs-built_in\">any</span>&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">collection</span>: T[]<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span> = []<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">item: T</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-title function_\">push</span>(item)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">pop</span>(): T | <span class=\"hljs-literal\">undefined</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-title function_\">pop</span>()<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@description</span>: 是否为空</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> &#123;<span class=\"hljs-type\">*</span>&#125;</span><br><span class=\"hljs-comment\">     */</span>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">isEmpty</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@description</span>: 获取当前栈大小</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> &#123;<span class=\"hljs-type\">*</span>&#125;</span><br><span class=\"hljs-comment\">     */</span>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">size</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">clear</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span> = <span class=\"hljs-number\">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>记录下学习算法中数据结构, 通过 JS 方式来实现一些数据结构</p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>栈 后进先出结构，主要应用场景<br>栈主要应用于以下场景：</p>\n<ol>\n<li>表达式求值：栈可以用于实现表达式求值算法，如中缀表达式转后缀表达式并计算结果。</li>\n<li>函数调用：栈可以用于保存函数调用的上下文信息，包括参数、返回地址等。</li>\n<li>浏览器历史记录：浏览器的后退功能可以通过栈来实现，每次访问新页面时将页面地址入栈，后退时将栈顶元素出栈。</li>\n<li>撤销操作：编辑器、图形软件等可以使用栈来实现撤销操作，每次操作将操作记录入栈，撤销时将栈顶操作出栈。</li>\n<li>括号匹配：栈可以用于检查表达式中的括号是否匹配，遇到左括号入栈，遇到右括号出栈并检查是否匹配。</li>\n</ol>\n<h1 id=\"栈的API设计\"><a href=\"#栈的API设计\" class=\"headerlink\" title=\"栈的API设计\"></a>栈的API设计</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Stack</span>&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">unknown</span> = <span class=\"hljs-built_in\">any</span>&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">collection</span>: T[]<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span> = []<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">item: T</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-title function_\">push</span>(item)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">pop</span>(): T | <span class=\"hljs-literal\">undefined</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-title function_\">pop</span>()<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@description</span>: 是否为空</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> &#123;<span class=\"hljs-type\">*</span>&#125;</span><br><span class=\"hljs-comment\">     */</span>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">isEmpty</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@description</span>: 获取当前栈大小</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> &#123;<span class=\"hljs-type\">*</span>&#125;</span><br><span class=\"hljs-comment\">     */</span>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">size</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">clear</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">collection</span>.<span class=\"hljs-property\">length</span> = <span class=\"hljs-number\">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"micro-app 搭建记录","date":"2023-09-06T15:11:39.000Z","_content":"\n# 搭建平台基座\n\n> 基座与平台无关，技术栈 vite + vue3 + element-plus\n> [micro-app v0.8.1](https://zeroing.jd.com/micro-app/docs.html#/) \n> [micro-app 1.0.0-beta 版本](https://micro-zoe.com/docs/1.x/#/zh-cn/start)\n\n## 通过vite 脚手架搭建项目\n\n\n\n```bash\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-vue-app -- --template vue-ts\n\n```\n- 安装 micro-app \n``` bash\nnpm i @micro-zoe/micro-app --save\n```\n\n- 入口文件添加 **micro-app**\n```typescript\n import microApp from '@micro-zoe/micro-app';\n microApp.start({\n    destroy: true\n })\n\nconst app = createApp()\napp.mount('#root')\n\n```\n\n## 安装element-plus \n| 由于 micro-app 基座应用的样式类无法被隔离，建议修改elment-plus样式类的命名空间\n```bash\nnpm i element-plus\n```\n修改 element-plus 命名空间\nelement plus 当前可以全局导入，如果需要按需导入修改命名空间 可参考官网\n\n**设置 ElConfigProvider**\n使用 ElConfigProvider 包装您的根组件。\n```vue\n<!-- App.vue -->\n<template>\n  <el-config-provider namespace=\"sk\">\n    <router-view></router-view>\n  </el-config-provider>\n</template>\n```\n**设置 SCSS 和 CSS 变量**\n创建 styles/element/index.scss：\n```scss\n// styles/element/index.scss\n// we can add this to custom namespace, default is 'el'\n@forward 'element-plus/theme-chalk/src/mixins/config.scss' with (\n  $namespace: 'sk'\n);\n\n@use \"element-plus/theme-chalk/src/index.scss\" as *;\n// ...\n\n```\n在 vite.config.ts 中导入 styles/element/index.scss：\n```ts\nimport { defineConfig } from 'vite'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  // ...\n  css: {\n    preprocessorOptions: {\n      scss: {\n        additionalData: `@use \"~/styles/element/index.scss\" as *;`,\n      },\n    },\n  },\n  // ...\n})\n```\n\n## 子应用 vite 挂载\n\n- 挂载子应用路由\n```ts\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    ...,\n    {\n      path: '/mse:*',\n      name: 'mse',\n      component: () => import('@/views/mse/index.vue'),\n    },\n  ],\n});\n\n```\n- vite子应用组件挂载\n子应用micro-app 中需要区分 URL与baseroute 关系具体可[参考官网](https://zeroing.jd.com/micro-app/docs.html#/zh-cn/route)\n  - URL 为获取index.html静态资源的加载路由\n  - baseroute 为下发子应用的区分路由\n\n### 关闭 disable-sandbox\n\n```ts\n<template>\n  <div class=\"mse-iframe-container\">\n  // 加载vite 应用需要关闭沙箱\n    <micro-app name=\"mse\" url=\"http://localhost:8004\" :data=\"{}\" baseroute=\"/child/vite-vue\" inline disablesandbox></micro-app>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { EventCenterForMicroApp } from '@micro-zoe/micro-app'\nimport config, { getAppUrl } from '@/micro-app/config.ts'\nimport { ref } from 'vue';\n// @ts-ignore 因为vite子应用关闭了沙箱，我们需要为子应用mse创建EventCenterForMicroApp对象来实现数据通信\nwindow.eventCenterForAppNameVite = new EventCenterForMicroApp('mse')\n</script>\n<style lang=\"less\" scoped>\n.mse-iframe-container {\n  height: 100%;\n}\n</style>\n```\n\n### Iframe 沙箱模式加载(BETA 1.0 公测支持)\n> 推荐使用\n```ts\n<template>\n  <div>\n    <micro-app :name=\"name\" :url=\"url\" :data=\"data\" iframe></micro-app>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport config, { getAppUrl } from '@/micro-app/config.ts'\nimport { ref } from 'vue';\nimport { useMicroData } from '@/micro-app/micro-data-hooks';\nconst name = config.mse.appName\nconst url = ref('http://localhost:9001')\nconst data = reactive({})\n</script>\n```\n\n# vite 子应用\n> 按照正常方式搭建vite 子应用，main.ts && serve 服务需要改造\n\n## 关闭 disable-sandbox 模式 子应用的 main.ts 配置\n### main.ts 入口文件文件\n```ts\nfunction handleMicroData () {\n  // eventCenterForAppNameVite 是基座添加到window的数据通信对象\n  if (window.eventCenterForAppNameVite) {\n    // 主动获取基座下发的数据\n    const rootData = window.eventCenterForAppNameVite.getData()\n    console.log(rootData)\n  }\n}\nconst app = createApp(App)\napp.use(router);\napp.mount('#app')\n\nhandleMicroData()\n// 监听卸载操作\nwindow.addEventListener('unmount', function () {\n  app.unmount()\n  // 卸载所有数据监听函数\n  window.eventCenterForAppNameVite?.clearDataListener()\n})\n\n```\n### vite.config.ts 配置\n- server 需要支持 跨域请求\n- 打包时处理\n  - 指定域名设置\n  - 通过动态basePath插件 vite-plugin-dynamic-base  类似webpack \\_\\_webpack_public_path\\_\\_\n  \n```ts\nimport { fileURLToPath, URL } from 'node:url'\n\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport vueJsx from '@vitejs/plugin-vue-jsx'\nimport { dynamicBase } from 'vite-plugin-dynamic-base'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  base: process.env.NODE_ENV === \"production\" ? \"__dynamic_base__\" : \"/child/vite-vue/\",\n  plugins: [\n    vue(),\n    vueJsx(),\n    //打包后 \n    dynamicBase({\n      publicPath: 'window.__dynamic_base__',\n      transformIndexHtml:  true\n    })\n  ],\n  server: {\n    port: 8004,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    cors: true,\n  },\n  resolve: {\n    alias: {\n      '@': fileURLToPath(new URL('./src', import.meta.url))\n    }\n  }\n})\n\n```\n### 主应用中需要 micro-app 加载时需要plugins 需要插件处理\n参照官网 [vite 基座配置](https://zeroing.jd.com/micro-app/docs.html#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%9f%ba%e5%ba%a7%e5%ba%94%e7%94%a8)\n\n\n\n## Iframe 沙盒模式下配置\n### main.ts 配置\n```\n// 与基座进行数据交互\nfunction handleMicroData(router: Router) {\n  // TODO 从全局获取数据，等APP 应用完全号了后规划\n  const rootData = window.microApp.getGlobalData();\n  handleRootData(rootData, router);\n}\n\nif (isInMicroApp()) {\n  handleMicroData(router);\n  // 卸载应用\n  window.unmount = () => {\n    app.unmount();\n  };\n}\n\n```\n### vite-config.ts 配置\n  [参考官网](https://micro-zoe.com/docs/1.x/#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%ad%90%e5%ba%94%e7%94%a8)\n\n# 部署\n[参考官网配置](https://zeroing.jd.com/micro-app/docs.html#/zh-cn/deploy)\n\n# 问题&&解决方案\n\n## 0.8.1 版本中部署后无法加载vite 子应用\n-  检查 window.\\_\\_dynamic_base\\_\\_ 是否初始化成功\n>\n> 可以在index.html 页面用立即执行函数来初始化 \\_\\_dynamic_base\\_\\_ 变量\n> \n```html\n<script>\n  (function() {\n    window.__dynamic_base__ = window.rawWindow__dynamic_base__ \n  })()\n</script>\n```\n\n- 检查基座是否开启vite 子应用的预加载\n> 基座应用加载 vite-vue 子应用时使用了预加载模式，预加载时，子应用的index.html 引用的js 文件&& css 文件地址会直接设置未相对地址，基座中关闭vite 子应用的预加载即可\n\n## 父子资源样式相互污染\n   - 如果基座样式库使用 elment-plus(2.2.0版本及以上) 可以通过自定义命名空间规避污染\n   - 开启沙盒模式进行样式隔离\n## iframe 沙箱下 vite 子应用的接口请求总是 cors-error\n![](/img/micro-app/cors-error.png)\n\n原因可能在 [MDN COROS policy](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials)\n\n1. vite 子应用 axios withCredentials 设置为false\n2. baseUrl 建议设置和父级同层的URL\n\n\n```ts\nconst basepath = '/xxxx'\nconst http = axios.create({\n  baseURL: window.__MICRO_APP_ENVIRONMENT__ ? window.location.origin + basepath :  basepath,\n  withCredentials: !window.__MICRO_APP_ENVIRONMENT__,\n})\n```","source":"_posts/micro-web/micro-app.md","raw":"---\ntitle: micro-app 搭建记录\ndate: 2023-09-06 23:11:39\ntags: vue\ncategory: 微前端\n---\n\n# 搭建平台基座\n\n> 基座与平台无关，技术栈 vite + vue3 + element-plus\n> [micro-app v0.8.1](https://zeroing.jd.com/micro-app/docs.html#/) \n> [micro-app 1.0.0-beta 版本](https://micro-zoe.com/docs/1.x/#/zh-cn/start)\n\n## 通过vite 脚手架搭建项目\n\n\n\n```bash\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-vue-app -- --template vue-ts\n\n```\n- 安装 micro-app \n``` bash\nnpm i @micro-zoe/micro-app --save\n```\n\n- 入口文件添加 **micro-app**\n```typescript\n import microApp from '@micro-zoe/micro-app';\n microApp.start({\n    destroy: true\n })\n\nconst app = createApp()\napp.mount('#root')\n\n```\n\n## 安装element-plus \n| 由于 micro-app 基座应用的样式类无法被隔离，建议修改elment-plus样式类的命名空间\n```bash\nnpm i element-plus\n```\n修改 element-plus 命名空间\nelement plus 当前可以全局导入，如果需要按需导入修改命名空间 可参考官网\n\n**设置 ElConfigProvider**\n使用 ElConfigProvider 包装您的根组件。\n```vue\n<!-- App.vue -->\n<template>\n  <el-config-provider namespace=\"sk\">\n    <router-view></router-view>\n  </el-config-provider>\n</template>\n```\n**设置 SCSS 和 CSS 变量**\n创建 styles/element/index.scss：\n```scss\n// styles/element/index.scss\n// we can add this to custom namespace, default is 'el'\n@forward 'element-plus/theme-chalk/src/mixins/config.scss' with (\n  $namespace: 'sk'\n);\n\n@use \"element-plus/theme-chalk/src/index.scss\" as *;\n// ...\n\n```\n在 vite.config.ts 中导入 styles/element/index.scss：\n```ts\nimport { defineConfig } from 'vite'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  // ...\n  css: {\n    preprocessorOptions: {\n      scss: {\n        additionalData: `@use \"~/styles/element/index.scss\" as *;`,\n      },\n    },\n  },\n  // ...\n})\n```\n\n## 子应用 vite 挂载\n\n- 挂载子应用路由\n```ts\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    ...,\n    {\n      path: '/mse:*',\n      name: 'mse',\n      component: () => import('@/views/mse/index.vue'),\n    },\n  ],\n});\n\n```\n- vite子应用组件挂载\n子应用micro-app 中需要区分 URL与baseroute 关系具体可[参考官网](https://zeroing.jd.com/micro-app/docs.html#/zh-cn/route)\n  - URL 为获取index.html静态资源的加载路由\n  - baseroute 为下发子应用的区分路由\n\n### 关闭 disable-sandbox\n\n```ts\n<template>\n  <div class=\"mse-iframe-container\">\n  // 加载vite 应用需要关闭沙箱\n    <micro-app name=\"mse\" url=\"http://localhost:8004\" :data=\"{}\" baseroute=\"/child/vite-vue\" inline disablesandbox></micro-app>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { EventCenterForMicroApp } from '@micro-zoe/micro-app'\nimport config, { getAppUrl } from '@/micro-app/config.ts'\nimport { ref } from 'vue';\n// @ts-ignore 因为vite子应用关闭了沙箱，我们需要为子应用mse创建EventCenterForMicroApp对象来实现数据通信\nwindow.eventCenterForAppNameVite = new EventCenterForMicroApp('mse')\n</script>\n<style lang=\"less\" scoped>\n.mse-iframe-container {\n  height: 100%;\n}\n</style>\n```\n\n### Iframe 沙箱模式加载(BETA 1.0 公测支持)\n> 推荐使用\n```ts\n<template>\n  <div>\n    <micro-app :name=\"name\" :url=\"url\" :data=\"data\" iframe></micro-app>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport config, { getAppUrl } from '@/micro-app/config.ts'\nimport { ref } from 'vue';\nimport { useMicroData } from '@/micro-app/micro-data-hooks';\nconst name = config.mse.appName\nconst url = ref('http://localhost:9001')\nconst data = reactive({})\n</script>\n```\n\n# vite 子应用\n> 按照正常方式搭建vite 子应用，main.ts && serve 服务需要改造\n\n## 关闭 disable-sandbox 模式 子应用的 main.ts 配置\n### main.ts 入口文件文件\n```ts\nfunction handleMicroData () {\n  // eventCenterForAppNameVite 是基座添加到window的数据通信对象\n  if (window.eventCenterForAppNameVite) {\n    // 主动获取基座下发的数据\n    const rootData = window.eventCenterForAppNameVite.getData()\n    console.log(rootData)\n  }\n}\nconst app = createApp(App)\napp.use(router);\napp.mount('#app')\n\nhandleMicroData()\n// 监听卸载操作\nwindow.addEventListener('unmount', function () {\n  app.unmount()\n  // 卸载所有数据监听函数\n  window.eventCenterForAppNameVite?.clearDataListener()\n})\n\n```\n### vite.config.ts 配置\n- server 需要支持 跨域请求\n- 打包时处理\n  - 指定域名设置\n  - 通过动态basePath插件 vite-plugin-dynamic-base  类似webpack \\_\\_webpack_public_path\\_\\_\n  \n```ts\nimport { fileURLToPath, URL } from 'node:url'\n\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport vueJsx from '@vitejs/plugin-vue-jsx'\nimport { dynamicBase } from 'vite-plugin-dynamic-base'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  base: process.env.NODE_ENV === \"production\" ? \"__dynamic_base__\" : \"/child/vite-vue/\",\n  plugins: [\n    vue(),\n    vueJsx(),\n    //打包后 \n    dynamicBase({\n      publicPath: 'window.__dynamic_base__',\n      transformIndexHtml:  true\n    })\n  ],\n  server: {\n    port: 8004,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    cors: true,\n  },\n  resolve: {\n    alias: {\n      '@': fileURLToPath(new URL('./src', import.meta.url))\n    }\n  }\n})\n\n```\n### 主应用中需要 micro-app 加载时需要plugins 需要插件处理\n参照官网 [vite 基座配置](https://zeroing.jd.com/micro-app/docs.html#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%9f%ba%e5%ba%a7%e5%ba%94%e7%94%a8)\n\n\n\n## Iframe 沙盒模式下配置\n### main.ts 配置\n```\n// 与基座进行数据交互\nfunction handleMicroData(router: Router) {\n  // TODO 从全局获取数据，等APP 应用完全号了后规划\n  const rootData = window.microApp.getGlobalData();\n  handleRootData(rootData, router);\n}\n\nif (isInMicroApp()) {\n  handleMicroData(router);\n  // 卸载应用\n  window.unmount = () => {\n    app.unmount();\n  };\n}\n\n```\n### vite-config.ts 配置\n  [参考官网](https://micro-zoe.com/docs/1.x/#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%ad%90%e5%ba%94%e7%94%a8)\n\n# 部署\n[参考官网配置](https://zeroing.jd.com/micro-app/docs.html#/zh-cn/deploy)\n\n# 问题&&解决方案\n\n## 0.8.1 版本中部署后无法加载vite 子应用\n-  检查 window.\\_\\_dynamic_base\\_\\_ 是否初始化成功\n>\n> 可以在index.html 页面用立即执行函数来初始化 \\_\\_dynamic_base\\_\\_ 变量\n> \n```html\n<script>\n  (function() {\n    window.__dynamic_base__ = window.rawWindow__dynamic_base__ \n  })()\n</script>\n```\n\n- 检查基座是否开启vite 子应用的预加载\n> 基座应用加载 vite-vue 子应用时使用了预加载模式，预加载时，子应用的index.html 引用的js 文件&& css 文件地址会直接设置未相对地址，基座中关闭vite 子应用的预加载即可\n\n## 父子资源样式相互污染\n   - 如果基座样式库使用 elment-plus(2.2.0版本及以上) 可以通过自定义命名空间规避污染\n   - 开启沙盒模式进行样式隔离\n## iframe 沙箱下 vite 子应用的接口请求总是 cors-error\n![](/img/micro-app/cors-error.png)\n\n原因可能在 [MDN COROS policy](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials)\n\n1. vite 子应用 axios withCredentials 设置为false\n2. baseUrl 建议设置和父级同层的URL\n\n\n```ts\nconst basepath = '/xxxx'\nconst http = axios.create({\n  baseURL: window.__MICRO_APP_ENVIRONMENT__ ? window.location.origin + basepath :  basepath,\n  withCredentials: !window.__MICRO_APP_ENVIRONMENT__,\n})\n```","slug":"micro-web/micro-app","published":1,"updated":"2023-11-28T14:21:14.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nby000rjcsk5mxph69g","content":"<h1 id=\"搭建平台基座\"><a href=\"#搭建平台基座\" class=\"headerlink\" title=\"搭建平台基座\"></a>搭建平台基座</h1><blockquote>\n<p>基座与平台无关，技术栈 vite + vue3 + element-plus<br><a href=\"https://zeroing.jd.com/micro-app/docs.html#/\">micro-app v0.8.1</a><br><a href=\"https://micro-zoe.com/docs/1.x/#/zh-cn/start\">micro-app 1.0.0-beta 版本</a></p>\n</blockquote>\n<h2 id=\"通过vite-脚手架搭建项目\"><a href=\"#通过vite-脚手架搭建项目\" class=\"headerlink\" title=\"通过vite 脚手架搭建项目\"></a>通过vite 脚手架搭建项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># npm 7+, extra double-dash is needed:</span><br>npm create vite@latest my-vue-app -- --template vue-ts<br><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>安装 micro-app </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i @micro-zoe/micro-app --save<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>入口文件添加 <strong>micro-app</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"> <span class=\"hljs-keyword\">import</span> microApp <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@micro-zoe/micro-app&#x27;</span>;<br> microApp.<span class=\"hljs-title function_\">start</span>(&#123;<br>    <span class=\"hljs-attr\">destroy</span>: <span class=\"hljs-literal\">true</span><br> &#125;)<br><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>()<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装element-plus\"><a href=\"#安装element-plus\" class=\"headerlink\" title=\"安装element-plus\"></a>安装element-plus</h2><p>| 由于 micro-app 基座应用的样式类无法被隔离，建议修改elment-plus样式类的命名空间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i element-plus<br></code></pre></td></tr></table></figure>\n<p>修改 element-plus 命名空间<br>element plus 当前可以全局导入，如果需要按需导入修改命名空间 可参考官网</p>\n<p><strong>设置 ElConfigProvider</strong><br>使用 ElConfigProvider 包装您的根组件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;!-- App.vue --&gt;<br>&lt;template&gt;<br>  &lt;el-config-provider namespace=&quot;sk&quot;&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/el-config-provider&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>设置 SCSS 和 CSS 变量</strong><br>创建 styles&#x2F;element&#x2F;index.scss：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">// styles/element/index.scss</span><br><span class=\"hljs-comment\">// we can add this to custom namespace, default is &#x27;el&#x27;</span><br><span class=\"hljs-keyword\">@forward</span> <span class=\"hljs-string\">&#x27;element-plus/theme-chalk/src/mixins/config.scss&#x27;</span> with (<br>  <span class=\"hljs-variable\">$namespace</span>: <span class=\"hljs-string\">&#x27;sk&#x27;</span><br>);<br><br><span class=\"hljs-keyword\">@use</span> <span class=\"hljs-string\">&quot;element-plus/theme-chalk/src/index.scss&quot;</span> as *;<br><span class=\"hljs-comment\">// ...</span><br><br></code></pre></td></tr></table></figure>\n<p>在 vite.config.ts 中导入 styles&#x2F;element&#x2F;index.scss：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; defineConfig &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite&#x27;</span><br><span class=\"hljs-comment\">// https://vitejs.dev/config/</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-comment\">// ...</span><br>  <span class=\"hljs-attr\">css</span>: &#123;<br>    <span class=\"hljs-attr\">preprocessorOptions</span>: &#123;<br>      <span class=\"hljs-attr\">scss</span>: &#123;<br>        <span class=\"hljs-attr\">additionalData</span>: <span class=\"hljs-string\">`@use &quot;~/styles/element/index.scss&quot; as *;`</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"子应用-vite-挂载\"><a href=\"#子应用-vite-挂载\" class=\"headerlink\" title=\"子应用 vite 挂载\"></a>子应用 vite 挂载</h2><ul>\n<li>挂载子应用路由<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-title function_\">createRouter</span>(&#123;<br>  <span class=\"hljs-attr\">history</span>: <span class=\"hljs-title function_\">createWebHistory</span>(<span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">BASE_URL</span>),<br>  <span class=\"hljs-attr\">routes</span>: [<br>    ...,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/mse:*&#x27;</span>,<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;mse&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/views/mse/index.vue&#x27;</span>),<br>    &#125;,<br>  ],<br>&#125;);<br><br></code></pre></td></tr></table></figure></li>\n<li>vite子应用组件挂载<br>子应用micro-app 中需要区分 URL与baseroute 关系具体可<a href=\"https://zeroing.jd.com/micro-app/docs.html#/zh-cn/route\">参考官网</a><ul>\n<li>URL 为获取index.html静态资源的加载路由</li>\n<li>baseroute 为下发子应用的区分路由</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关闭-disable-sandbox\"><a href=\"#关闭-disable-sandbox\" class=\"headerlink\" title=\"关闭 disable-sandbox\"></a>关闭 disable-sandbox</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">&lt;template&gt;<br>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;mse-iframe-container&quot;</span>&gt;</span></span><br><span class=\"language-xml\">  // 加载vite 应用需要关闭沙箱</span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">micro-app</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mse&quot;</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;http://localhost:8004&quot;</span> <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span> <span class=\"hljs-attr\">baseroute</span>=<span class=\"hljs-string\">&quot;/child/vite-vue&quot;</span> <span class=\"hljs-attr\">inline</span> <span class=\"hljs-attr\">disablesandbox</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">micro-app</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">EventCenterForMicroApp</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@micro-zoe/micro-app&#x27;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> config, &#123; getAppUrl &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/micro-app/config.ts&#x27;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-comment\">// @ts-ignore 因为vite子应用关闭了沙箱，我们需要为子应用mse创建EventCenterForMicroApp对象来实现数据通信</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">eventCenterForAppNameVite</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventCenterForMicroApp</span>(<span class=\"hljs-string\">&#x27;mse&#x27;</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;less&quot;</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"language-css\"><span class=\"language-xml\"><span class=\"hljs-selector-class\">.mse-iframe-container</span> &#123;</span></span><br><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;</span></span><br><span class=\"language-css\"><span class=\"language-xml\">&#125;</span></span><br><span class=\"language-css\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Iframe-沙箱模式加载-BETA-1-0-公测支持\"><a href=\"#Iframe-沙箱模式加载-BETA-1-0-公测支持\" class=\"headerlink\" title=\"Iframe 沙箱模式加载(BETA 1.0 公测支持)\"></a>Iframe 沙箱模式加载(BETA 1.0 公测支持)</h3><blockquote>\n<p>推荐使用</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">&lt;template&gt;<br>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">micro-app</span> <span class=\"hljs-attr\">:name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">:url</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">&quot;data&quot;</span> <span class=\"hljs-attr\">iframe</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">micro-app</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> config, &#123; getAppUrl &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/micro-app/config.ts&#x27;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> &#123; useMicroData &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/micro-app/micro-data-hooks&#x27;</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">const</span> name = config.<span class=\"hljs-property\">mse</span>.<span class=\"hljs-property\">appName</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;http://localhost:9001&#x27;</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title function_\">reactive</span>(&#123;&#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"vite-子应用\"><a href=\"#vite-子应用\" class=\"headerlink\" title=\"vite 子应用\"></a>vite 子应用</h1><blockquote>\n<p>按照正常方式搭建vite 子应用，main.ts &amp;&amp; serve 服务需要改造</p>\n</blockquote>\n<h2 id=\"关闭-disable-sandbox-模式-子应用的-main-ts-配置\"><a href=\"#关闭-disable-sandbox-模式-子应用的-main-ts-配置\" class=\"headerlink\" title=\"关闭 disable-sandbox 模式 子应用的 main.ts 配置\"></a>关闭 disable-sandbox 模式 子应用的 main.ts 配置</h2><h3 id=\"main-ts-入口文件文件\"><a href=\"#main-ts-入口文件文件\" class=\"headerlink\" title=\"main.ts 入口文件文件\"></a>main.ts 入口文件文件</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleMicroData</span> () &#123;<br>  <span class=\"hljs-comment\">// eventCenterForAppNameVite 是基座添加到window的数据通信对象</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">eventCenterForAppNameVite</span>) &#123;<br>    <span class=\"hljs-comment\">// 主动获取基座下发的数据</span><br>    <span class=\"hljs-keyword\">const</span> rootData = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">eventCenterForAppNameVite</span>.<span class=\"hljs-title function_\">getData</span>()<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(rootData)<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>(<span class=\"hljs-title class_\">App</span>)<br>app.<span class=\"hljs-title function_\">use</span>(router);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>)<br><br><span class=\"hljs-title function_\">handleMicroData</span>()<br><span class=\"hljs-comment\">// 监听卸载操作</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;unmount&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  app.<span class=\"hljs-title function_\">unmount</span>()<br>  <span class=\"hljs-comment\">// 卸载所有数据监听函数</span><br>  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">eventCenterForAppNameVite</span>?.<span class=\"hljs-title function_\">clearDataListener</span>()<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"vite-config-ts-配置\"><a href=\"#vite-config-ts-配置\" class=\"headerlink\" title=\"vite.config.ts 配置\"></a>vite.config.ts 配置</h3><ul>\n<li>server 需要支持 跨域请求</li>\n<li>打包时处理<ul>\n<li>指定域名设置</li>\n<li>通过动态basePath插件 vite-plugin-dynamic-base  类似webpack __webpack_public_path__</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; fileURLToPath, <span class=\"hljs-variable constant_\">URL</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node:url&#x27;</span><br><br><span class=\"hljs-keyword\">import</span> &#123; defineConfig &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite&#x27;</span><br><span class=\"hljs-keyword\">import</span> vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> vueJsx <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vitejs/plugin-vue-jsx&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; dynamicBase &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite-plugin-dynamic-base&#x27;</span><br><span class=\"hljs-comment\">// https://vitejs.dev/config/</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-attr\">base</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">&quot;production&quot;</span> ? <span class=\"hljs-string\">&quot;__dynamic_base__&quot;</span> : <span class=\"hljs-string\">&quot;/child/vite-vue/&quot;</span>,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-title function_\">vue</span>(),<br>    <span class=\"hljs-title function_\">vueJsx</span>(),<br>    <span class=\"hljs-comment\">//打包后 </span><br>    <span class=\"hljs-title function_\">dynamicBase</span>(&#123;<br>      <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">&#x27;window.__dynamic_base__&#x27;</span>,<br>      <span class=\"hljs-attr\">transformIndexHtml</span>:  <span class=\"hljs-literal\">true</span><br>    &#125;)<br>  ],<br>  <span class=\"hljs-attr\">server</span>: &#123;<br>    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8004</span>,<br>    <span class=\"hljs-attr\">headers</span>: &#123;<br>      <span class=\"hljs-string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"hljs-string\">&#x27;*&#x27;</span>,<br>    &#125;,<br>    <span class=\"hljs-attr\">cors</span>: <span class=\"hljs-literal\">true</span>,<br>  &#125;,<br>  <span class=\"hljs-attr\">resolve</span>: &#123;<br>    <span class=\"hljs-attr\">alias</span>: &#123;<br>      <span class=\"hljs-string\">&#x27;@&#x27;</span>: <span class=\"hljs-title function_\">fileURLToPath</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">&#x27;./src&#x27;</span>, <span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">url</span>))<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"主应用中需要-micro-app-加载时需要plugins-需要插件处理\"><a href=\"#主应用中需要-micro-app-加载时需要plugins-需要插件处理\" class=\"headerlink\" title=\"主应用中需要 micro-app 加载时需要plugins 需要插件处理\"></a>主应用中需要 micro-app 加载时需要plugins 需要插件处理</h3><p>参照官网 <a href=\"https://zeroing.jd.com/micro-app/docs.html#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%9f%ba%e5%ba%a7%e5%ba%94%e7%94%a8\">vite 基座配置</a></p>\n<h2 id=\"Iframe-沙盒模式下配置\"><a href=\"#Iframe-沙盒模式下配置\" class=\"headerlink\" title=\"Iframe 沙盒模式下配置\"></a>Iframe 沙盒模式下配置</h2><h3 id=\"main-ts-配置\"><a href=\"#main-ts-配置\" class=\"headerlink\" title=\"main.ts 配置\"></a>main.ts 配置</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 与基座进行数据交互</span><br><span class=\"hljs-keyword\">function</span> handle<span class=\"hljs-constructor\">MicroData(<span class=\"hljs-params\">router</span>: Router)</span> &#123;<br>  <span class=\"hljs-comment\">// TODO 从全局获取数据，等APP 应用完全号了后规划</span><br>  const rootData = window.microApp.get<span class=\"hljs-constructor\">GlobalData()</span>;<br>  handle<span class=\"hljs-constructor\">RootData(<span class=\"hljs-params\">rootData</span>, <span class=\"hljs-params\">router</span>)</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">if</span> (is<span class=\"hljs-constructor\">InMicroApp()</span>) &#123;<br>  handle<span class=\"hljs-constructor\">MicroData(<span class=\"hljs-params\">router</span>)</span>;<br>  <span class=\"hljs-comment\">// 卸载应用</span><br>  window.unmount =<span class=\"hljs-function\"> <span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    app.unmount<span class=\"hljs-literal\">()</span>;<br>  &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"vite-config-ts-配置-1\"><a href=\"#vite-config-ts-配置-1\" class=\"headerlink\" title=\"vite-config.ts 配置\"></a>vite-config.ts 配置</h3><p>  <a href=\"https://micro-zoe.com/docs/1.x/#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%ad%90%e5%ba%94%e7%94%a8\">参考官网</a></p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p><a href=\"https://zeroing.jd.com/micro-app/docs.html#/zh-cn/deploy\">参考官网配置</a></p>\n<h1 id=\"问题-解决方案\"><a href=\"#问题-解决方案\" class=\"headerlink\" title=\"问题&amp;&amp;解决方案\"></a>问题&amp;&amp;解决方案</h1><h2 id=\"0-8-1-版本中部署后无法加载vite-子应用\"><a href=\"#0-8-1-版本中部署后无法加载vite-子应用\" class=\"headerlink\" title=\"0.8.1 版本中部署后无法加载vite 子应用\"></a>0.8.1 版本中部署后无法加载vite 子应用</h2><ul>\n<li><p>检查 window.__dynamic_base__ 是否初始化成功</p>\n<blockquote>\n<p>可以在index.html 页面用立即执行函数来初始化 __dynamic_base__ 变量</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  (<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">__dynamic_base__</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">rawWindow__dynamic_base__</span> </span><br><span class=\"language-javascript\">  &#125;)()</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>检查基座是否开启vite 子应用的预加载</p>\n<blockquote>\n<p>基座应用加载 vite-vue 子应用时使用了预加载模式，预加载时，子应用的index.html 引用的js 文件&amp;&amp; css 文件地址会直接设置未相对地址，基座中关闭vite 子应用的预加载即可</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"父子资源样式相互污染\"><a href=\"#父子资源样式相互污染\" class=\"headerlink\" title=\"父子资源样式相互污染\"></a>父子资源样式相互污染</h2><ul>\n<li>如果基座样式库使用 elment-plus(2.2.0版本及以上) 可以通过自定义命名空间规避污染</li>\n<li>开启沙盒模式进行样式隔离</li>\n</ul>\n<h2 id=\"iframe-沙箱下-vite-子应用的接口请求总是-cors-error\"><a href=\"#iframe-沙箱下-vite-子应用的接口请求总是-cors-error\" class=\"headerlink\" title=\"iframe 沙箱下 vite 子应用的接口请求总是 cors-error\"></a>iframe 沙箱下 vite 子应用的接口请求总是 cors-error</h2><p><img src=\"/img/micro-app/cors-error.png\"></p>\n<p>原因可能在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials\">MDN COROS policy</a></p>\n<ol>\n<li>vite 子应用 axios withCredentials 设置为false</li>\n<li>baseUrl 建议设置和父级同层的URL</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> basepath = <span class=\"hljs-string\">&#x27;/xxxx&#x27;</span><br><span class=\"hljs-keyword\">const</span> http = axios.<span class=\"hljs-title function_\">create</span>(&#123;<br>  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">__MICRO_APP_ENVIRONMENT__</span> ? <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">origin</span> + basepath :  basepath,<br>  <span class=\"hljs-attr\">withCredentials</span>: !<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">__MICRO_APP_ENVIRONMENT__</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建平台基座\"><a href=\"#搭建平台基座\" class=\"headerlink\" title=\"搭建平台基座\"></a>搭建平台基座</h1><blockquote>\n<p>基座与平台无关，技术栈 vite + vue3 + element-plus<br><a href=\"https://zeroing.jd.com/micro-app/docs.html#/\">micro-app v0.8.1</a><br><a href=\"https://micro-zoe.com/docs/1.x/#/zh-cn/start\">micro-app 1.0.0-beta 版本</a></p>\n</blockquote>\n<h2 id=\"通过vite-脚手架搭建项目\"><a href=\"#通过vite-脚手架搭建项目\" class=\"headerlink\" title=\"通过vite 脚手架搭建项目\"></a>通过vite 脚手架搭建项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># npm 7+, extra double-dash is needed:</span><br>npm create vite@latest my-vue-app -- --template vue-ts<br><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>安装 micro-app </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i @micro-zoe/micro-app --save<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>入口文件添加 <strong>micro-app</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"> <span class=\"hljs-keyword\">import</span> microApp <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@micro-zoe/micro-app&#x27;</span>;<br> microApp.<span class=\"hljs-title function_\">start</span>(&#123;<br>    <span class=\"hljs-attr\">destroy</span>: <span class=\"hljs-literal\">true</span><br> &#125;)<br><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>()<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装element-plus\"><a href=\"#安装element-plus\" class=\"headerlink\" title=\"安装element-plus\"></a>安装element-plus</h2><p>| 由于 micro-app 基座应用的样式类无法被隔离，建议修改elment-plus样式类的命名空间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i element-plus<br></code></pre></td></tr></table></figure>\n<p>修改 element-plus 命名空间<br>element plus 当前可以全局导入，如果需要按需导入修改命名空间 可参考官网</p>\n<p><strong>设置 ElConfigProvider</strong><br>使用 ElConfigProvider 包装您的根组件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;!-- App.vue --&gt;<br>&lt;template&gt;<br>  &lt;el-config-provider namespace=&quot;sk&quot;&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/el-config-provider&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>设置 SCSS 和 CSS 变量</strong><br>创建 styles&#x2F;element&#x2F;index.scss：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">// styles/element/index.scss</span><br><span class=\"hljs-comment\">// we can add this to custom namespace, default is &#x27;el&#x27;</span><br><span class=\"hljs-keyword\">@forward</span> <span class=\"hljs-string\">&#x27;element-plus/theme-chalk/src/mixins/config.scss&#x27;</span> with (<br>  <span class=\"hljs-variable\">$namespace</span>: <span class=\"hljs-string\">&#x27;sk&#x27;</span><br>);<br><br><span class=\"hljs-keyword\">@use</span> <span class=\"hljs-string\">&quot;element-plus/theme-chalk/src/index.scss&quot;</span> as *;<br><span class=\"hljs-comment\">// ...</span><br><br></code></pre></td></tr></table></figure>\n<p>在 vite.config.ts 中导入 styles&#x2F;element&#x2F;index.scss：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; defineConfig &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite&#x27;</span><br><span class=\"hljs-comment\">// https://vitejs.dev/config/</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-comment\">// ...</span><br>  <span class=\"hljs-attr\">css</span>: &#123;<br>    <span class=\"hljs-attr\">preprocessorOptions</span>: &#123;<br>      <span class=\"hljs-attr\">scss</span>: &#123;<br>        <span class=\"hljs-attr\">additionalData</span>: <span class=\"hljs-string\">`@use &quot;~/styles/element/index.scss&quot; as *;`</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"子应用-vite-挂载\"><a href=\"#子应用-vite-挂载\" class=\"headerlink\" title=\"子应用 vite 挂载\"></a>子应用 vite 挂载</h2><ul>\n<li>挂载子应用路由<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-title function_\">createRouter</span>(&#123;<br>  <span class=\"hljs-attr\">history</span>: <span class=\"hljs-title function_\">createWebHistory</span>(<span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">BASE_URL</span>),<br>  <span class=\"hljs-attr\">routes</span>: [<br>    ...,<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/mse:*&#x27;</span>,<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;mse&#x27;</span>,<br>      <span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/views/mse/index.vue&#x27;</span>),<br>    &#125;,<br>  ],<br>&#125;);<br><br></code></pre></td></tr></table></figure></li>\n<li>vite子应用组件挂载<br>子应用micro-app 中需要区分 URL与baseroute 关系具体可<a href=\"https://zeroing.jd.com/micro-app/docs.html#/zh-cn/route\">参考官网</a><ul>\n<li>URL 为获取index.html静态资源的加载路由</li>\n<li>baseroute 为下发子应用的区分路由</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关闭-disable-sandbox\"><a href=\"#关闭-disable-sandbox\" class=\"headerlink\" title=\"关闭 disable-sandbox\"></a>关闭 disable-sandbox</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">&lt;template&gt;<br>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;mse-iframe-container&quot;</span>&gt;</span></span><br><span class=\"language-xml\">  // 加载vite 应用需要关闭沙箱</span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">micro-app</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mse&quot;</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;http://localhost:8004&quot;</span> <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span> <span class=\"hljs-attr\">baseroute</span>=<span class=\"hljs-string\">&quot;/child/vite-vue&quot;</span> <span class=\"hljs-attr\">inline</span> <span class=\"hljs-attr\">disablesandbox</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">micro-app</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">EventCenterForMicroApp</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@micro-zoe/micro-app&#x27;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> config, &#123; getAppUrl &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/micro-app/config.ts&#x27;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-comment\">// @ts-ignore 因为vite子应用关闭了沙箱，我们需要为子应用mse创建EventCenterForMicroApp对象来实现数据通信</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">eventCenterForAppNameVite</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventCenterForMicroApp</span>(<span class=\"hljs-string\">&#x27;mse&#x27;</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;less&quot;</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"language-css\"><span class=\"language-xml\"><span class=\"hljs-selector-class\">.mse-iframe-container</span> &#123;</span></span><br><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;</span></span><br><span class=\"language-css\"><span class=\"language-xml\">&#125;</span></span><br><span class=\"language-css\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Iframe-沙箱模式加载-BETA-1-0-公测支持\"><a href=\"#Iframe-沙箱模式加载-BETA-1-0-公测支持\" class=\"headerlink\" title=\"Iframe 沙箱模式加载(BETA 1.0 公测支持)\"></a>Iframe 沙箱模式加载(BETA 1.0 公测支持)</h3><blockquote>\n<p>推荐使用</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">&lt;template&gt;<br>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">micro-app</span> <span class=\"hljs-attr\">:name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">:url</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">&quot;data&quot;</span> <span class=\"hljs-attr\">iframe</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">micro-app</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> config, &#123; getAppUrl &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/micro-app/config.ts&#x27;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> &#123; useMicroData &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/micro-app/micro-data-hooks&#x27;</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">const</span> name = config.<span class=\"hljs-property\">mse</span>.<span class=\"hljs-property\">appName</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;http://localhost:9001&#x27;</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title function_\">reactive</span>(&#123;&#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"vite-子应用\"><a href=\"#vite-子应用\" class=\"headerlink\" title=\"vite 子应用\"></a>vite 子应用</h1><blockquote>\n<p>按照正常方式搭建vite 子应用，main.ts &amp;&amp; serve 服务需要改造</p>\n</blockquote>\n<h2 id=\"关闭-disable-sandbox-模式-子应用的-main-ts-配置\"><a href=\"#关闭-disable-sandbox-模式-子应用的-main-ts-配置\" class=\"headerlink\" title=\"关闭 disable-sandbox 模式 子应用的 main.ts 配置\"></a>关闭 disable-sandbox 模式 子应用的 main.ts 配置</h2><h3 id=\"main-ts-入口文件文件\"><a href=\"#main-ts-入口文件文件\" class=\"headerlink\" title=\"main.ts 入口文件文件\"></a>main.ts 入口文件文件</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleMicroData</span> () &#123;<br>  <span class=\"hljs-comment\">// eventCenterForAppNameVite 是基座添加到window的数据通信对象</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">eventCenterForAppNameVite</span>) &#123;<br>    <span class=\"hljs-comment\">// 主动获取基座下发的数据</span><br>    <span class=\"hljs-keyword\">const</span> rootData = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">eventCenterForAppNameVite</span>.<span class=\"hljs-title function_\">getData</span>()<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(rootData)<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>(<span class=\"hljs-title class_\">App</span>)<br>app.<span class=\"hljs-title function_\">use</span>(router);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>)<br><br><span class=\"hljs-title function_\">handleMicroData</span>()<br><span class=\"hljs-comment\">// 监听卸载操作</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;unmount&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  app.<span class=\"hljs-title function_\">unmount</span>()<br>  <span class=\"hljs-comment\">// 卸载所有数据监听函数</span><br>  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">eventCenterForAppNameVite</span>?.<span class=\"hljs-title function_\">clearDataListener</span>()<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"vite-config-ts-配置\"><a href=\"#vite-config-ts-配置\" class=\"headerlink\" title=\"vite.config.ts 配置\"></a>vite.config.ts 配置</h3><ul>\n<li>server 需要支持 跨域请求</li>\n<li>打包时处理<ul>\n<li>指定域名设置</li>\n<li>通过动态basePath插件 vite-plugin-dynamic-base  类似webpack __webpack_public_path__</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; fileURLToPath, <span class=\"hljs-variable constant_\">URL</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node:url&#x27;</span><br><br><span class=\"hljs-keyword\">import</span> &#123; defineConfig &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite&#x27;</span><br><span class=\"hljs-keyword\">import</span> vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> vueJsx <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vitejs/plugin-vue-jsx&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; dynamicBase &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite-plugin-dynamic-base&#x27;</span><br><span class=\"hljs-comment\">// https://vitejs.dev/config/</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-attr\">base</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">&quot;production&quot;</span> ? <span class=\"hljs-string\">&quot;__dynamic_base__&quot;</span> : <span class=\"hljs-string\">&quot;/child/vite-vue/&quot;</span>,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-title function_\">vue</span>(),<br>    <span class=\"hljs-title function_\">vueJsx</span>(),<br>    <span class=\"hljs-comment\">//打包后 </span><br>    <span class=\"hljs-title function_\">dynamicBase</span>(&#123;<br>      <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">&#x27;window.__dynamic_base__&#x27;</span>,<br>      <span class=\"hljs-attr\">transformIndexHtml</span>:  <span class=\"hljs-literal\">true</span><br>    &#125;)<br>  ],<br>  <span class=\"hljs-attr\">server</span>: &#123;<br>    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8004</span>,<br>    <span class=\"hljs-attr\">headers</span>: &#123;<br>      <span class=\"hljs-string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"hljs-string\">&#x27;*&#x27;</span>,<br>    &#125;,<br>    <span class=\"hljs-attr\">cors</span>: <span class=\"hljs-literal\">true</span>,<br>  &#125;,<br>  <span class=\"hljs-attr\">resolve</span>: &#123;<br>    <span class=\"hljs-attr\">alias</span>: &#123;<br>      <span class=\"hljs-string\">&#x27;@&#x27;</span>: <span class=\"hljs-title function_\">fileURLToPath</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">&#x27;./src&#x27;</span>, <span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">url</span>))<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"主应用中需要-micro-app-加载时需要plugins-需要插件处理\"><a href=\"#主应用中需要-micro-app-加载时需要plugins-需要插件处理\" class=\"headerlink\" title=\"主应用中需要 micro-app 加载时需要plugins 需要插件处理\"></a>主应用中需要 micro-app 加载时需要plugins 需要插件处理</h3><p>参照官网 <a href=\"https://zeroing.jd.com/micro-app/docs.html#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%9f%ba%e5%ba%a7%e5%ba%94%e7%94%a8\">vite 基座配置</a></p>\n<h2 id=\"Iframe-沙盒模式下配置\"><a href=\"#Iframe-沙盒模式下配置\" class=\"headerlink\" title=\"Iframe 沙盒模式下配置\"></a>Iframe 沙盒模式下配置</h2><h3 id=\"main-ts-配置\"><a href=\"#main-ts-配置\" class=\"headerlink\" title=\"main.ts 配置\"></a>main.ts 配置</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 与基座进行数据交互</span><br><span class=\"hljs-keyword\">function</span> handle<span class=\"hljs-constructor\">MicroData(<span class=\"hljs-params\">router</span>: Router)</span> &#123;<br>  <span class=\"hljs-comment\">// TODO 从全局获取数据，等APP 应用完全号了后规划</span><br>  const rootData = window.microApp.get<span class=\"hljs-constructor\">GlobalData()</span>;<br>  handle<span class=\"hljs-constructor\">RootData(<span class=\"hljs-params\">rootData</span>, <span class=\"hljs-params\">router</span>)</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">if</span> (is<span class=\"hljs-constructor\">InMicroApp()</span>) &#123;<br>  handle<span class=\"hljs-constructor\">MicroData(<span class=\"hljs-params\">router</span>)</span>;<br>  <span class=\"hljs-comment\">// 卸载应用</span><br>  window.unmount =<span class=\"hljs-function\"> <span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    app.unmount<span class=\"hljs-literal\">()</span>;<br>  &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"vite-config-ts-配置-1\"><a href=\"#vite-config-ts-配置-1\" class=\"headerlink\" title=\"vite-config.ts 配置\"></a>vite-config.ts 配置</h3><p>  <a href=\"https://micro-zoe.com/docs/1.x/#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%ad%90%e5%ba%94%e7%94%a8\">参考官网</a></p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p><a href=\"https://zeroing.jd.com/micro-app/docs.html#/zh-cn/deploy\">参考官网配置</a></p>\n<h1 id=\"问题-解决方案\"><a href=\"#问题-解决方案\" class=\"headerlink\" title=\"问题&amp;&amp;解决方案\"></a>问题&amp;&amp;解决方案</h1><h2 id=\"0-8-1-版本中部署后无法加载vite-子应用\"><a href=\"#0-8-1-版本中部署后无法加载vite-子应用\" class=\"headerlink\" title=\"0.8.1 版本中部署后无法加载vite 子应用\"></a>0.8.1 版本中部署后无法加载vite 子应用</h2><ul>\n<li><p>检查 window.__dynamic_base__ 是否初始化成功</p>\n<blockquote>\n<p>可以在index.html 页面用立即执行函数来初始化 __dynamic_base__ 变量</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  (<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">__dynamic_base__</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">rawWindow__dynamic_base__</span> </span><br><span class=\"language-javascript\">  &#125;)()</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>检查基座是否开启vite 子应用的预加载</p>\n<blockquote>\n<p>基座应用加载 vite-vue 子应用时使用了预加载模式，预加载时，子应用的index.html 引用的js 文件&amp;&amp; css 文件地址会直接设置未相对地址，基座中关闭vite 子应用的预加载即可</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"父子资源样式相互污染\"><a href=\"#父子资源样式相互污染\" class=\"headerlink\" title=\"父子资源样式相互污染\"></a>父子资源样式相互污染</h2><ul>\n<li>如果基座样式库使用 elment-plus(2.2.0版本及以上) 可以通过自定义命名空间规避污染</li>\n<li>开启沙盒模式进行样式隔离</li>\n</ul>\n<h2 id=\"iframe-沙箱下-vite-子应用的接口请求总是-cors-error\"><a href=\"#iframe-沙箱下-vite-子应用的接口请求总是-cors-error\" class=\"headerlink\" title=\"iframe 沙箱下 vite 子应用的接口请求总是 cors-error\"></a>iframe 沙箱下 vite 子应用的接口请求总是 cors-error</h2><p><img src=\"/img/micro-app/cors-error.png\"></p>\n<p>原因可能在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials\">MDN COROS policy</a></p>\n<ol>\n<li>vite 子应用 axios withCredentials 设置为false</li>\n<li>baseUrl 建议设置和父级同层的URL</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> basepath = <span class=\"hljs-string\">&#x27;/xxxx&#x27;</span><br><span class=\"hljs-keyword\">const</span> http = axios.<span class=\"hljs-title function_\">create</span>(&#123;<br>  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">__MICRO_APP_ENVIRONMENT__</span> ? <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">origin</span> + basepath :  basepath,<br>  <span class=\"hljs-attr\">withCredentials</span>: !<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">__MICRO_APP_ENVIRONMENT__</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>"},{"title":"micro-app 基座应用和子应用共享window 全局变量","date":"2023-09-07T15:11:39.000Z","_content":"micro-app 运行时沙盒机制，会将基座应用window 自己配置的全局变量无法共享\n具体可以参考\n\n```ts\n/**\n * rewrite special properties of window\n * @param appName app name\n * @param microAppWindow child app microWindow\n */\nfunction patchWindowProperty (\n  microAppWindow: microAppWindowType,\n):void {\n  const rawWindow = globalEnv.rawWindow\n  Object.getOwnPropertyNames(rawWindow)\n    .filter((key: string) => {\n      return /^on/.test(key) && !SCOPE_WINDOW_ON_EVENT.includes(key)\n    })\n    .forEach((eventName: string) => {\n      const { enumerable, writable, set } = Object.getOwnPropertyDescriptor(rawWindow, eventName) || {\n        enumerable: true,\n        writable: true,\n      }\n      rawDefineProperty(microAppWindow, eventName, {\n        enumerable,\n        configurable: true,\n        get: () => rawWindow[eventName],\n        set: writable ?? !!set\n          ? (value) => { rawWindow[eventName] = value }\n          : undefined,\n      })\n    })\n}\n\n```\n如果在项目中想通过子应用直接访问 基座应用window上属性有两种方案\n例如基座应用的window对象上自定影了 $name\n```ts\nwindow.$name = 'xxxxxx'\n```\n\n1. 子应用中通过window.rawWindow 拿到原始对象\n\n```ts\n const name = window.rawWindow.$name\n \n```\n\n2. 通过micro-app 的内置的plugin 定义全局processHtml 拦截处理, 将共有属性通过立即执行函数给子应用赋值，达到在子应用中直接通过window 获取对应的属性\n```ts\n plugins: {\n      global: [\n        {\n          escapeProperties: [],\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          processHtml(code: string, url: string) {\n            // 全局注入 $YS 对象\n            const data = `<head><script>(function(window) {window.$name = window.rawWindow.$name})(window)</script>`;\n            code = code.replace('<head>', data);\n            return code;\n          }\n        }\n      ],\n      modules: {}\n    }\n```\n子应用可以通过 window.$name 获取到对应的值\n","source":"_posts/micro-web/micro-app_01.md","raw":"---\ntitle: micro-app 基座应用和子应用共享window 全局变量\ndate: 2023-09-07 23:11:39\ntags: 微前端\n---\nmicro-app 运行时沙盒机制，会将基座应用window 自己配置的全局变量无法共享\n具体可以参考\n\n```ts\n/**\n * rewrite special properties of window\n * @param appName app name\n * @param microAppWindow child app microWindow\n */\nfunction patchWindowProperty (\n  microAppWindow: microAppWindowType,\n):void {\n  const rawWindow = globalEnv.rawWindow\n  Object.getOwnPropertyNames(rawWindow)\n    .filter((key: string) => {\n      return /^on/.test(key) && !SCOPE_WINDOW_ON_EVENT.includes(key)\n    })\n    .forEach((eventName: string) => {\n      const { enumerable, writable, set } = Object.getOwnPropertyDescriptor(rawWindow, eventName) || {\n        enumerable: true,\n        writable: true,\n      }\n      rawDefineProperty(microAppWindow, eventName, {\n        enumerable,\n        configurable: true,\n        get: () => rawWindow[eventName],\n        set: writable ?? !!set\n          ? (value) => { rawWindow[eventName] = value }\n          : undefined,\n      })\n    })\n}\n\n```\n如果在项目中想通过子应用直接访问 基座应用window上属性有两种方案\n例如基座应用的window对象上自定影了 $name\n```ts\nwindow.$name = 'xxxxxx'\n```\n\n1. 子应用中通过window.rawWindow 拿到原始对象\n\n```ts\n const name = window.rawWindow.$name\n \n```\n\n2. 通过micro-app 的内置的plugin 定义全局processHtml 拦截处理, 将共有属性通过立即执行函数给子应用赋值，达到在子应用中直接通过window 获取对应的属性\n```ts\n plugins: {\n      global: [\n        {\n          escapeProperties: [],\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          processHtml(code: string, url: string) {\n            // 全局注入 $YS 对象\n            const data = `<head><script>(function(window) {window.$name = window.rawWindow.$name})(window)</script>`;\n            code = code.replace('<head>', data);\n            return code;\n          }\n        }\n      ],\n      modules: {}\n    }\n```\n子应用可以通过 window.$name 获取到对应的值\n","slug":"micro-web/micro-app_01","published":1,"updated":"2024-02-22T13:48:22.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbz000tjcskb84g0c4g","content":"<p>micro-app 运行时沙盒机制，会将基座应用window 自己配置的全局变量无法共享<br>具体可以参考</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * rewrite special properties of window</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> appName app name</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> microAppWindow child app microWindow</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">patchWindowProperty</span> (<br>  <span class=\"hljs-attr\">microAppWindow</span>: microAppWindowType,<br>):<span class=\"hljs-built_in\">void</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> rawWindow = globalEnv.<span class=\"hljs-property\">rawWindow</span><br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getOwnPropertyNames</span>(rawWindow)<br>    .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-regexp\">/^on/</span>.<span class=\"hljs-title function_\">test</span>(key) &amp;&amp; !<span class=\"hljs-variable constant_\">SCOPE_WINDOW_ON_EVENT</span>.<span class=\"hljs-title function_\">includes</span>(key)<br>    &#125;)<br>    .<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">eventName: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">const</span> &#123; enumerable, writable, set &#125; = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getOwnPropertyDescriptor</span>(rawWindow, eventName) || &#123;<br>        <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>,<br>      &#125;<br>      <span class=\"hljs-title function_\">rawDefineProperty</span>(microAppWindow, eventName, &#123;<br>        enumerable,<br>        <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">() =&gt;</span> rawWindow[eventName],<br>        <span class=\"hljs-attr\">set</span>: writable ?? !!set<br>          ? <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> &#123; rawWindow[eventName] = value &#125;<br>          : <span class=\"hljs-literal\">undefined</span>,<br>      &#125;)<br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>如果在项目中想通过子应用直接访问 基座应用window上属性有两种方案<br>例如基座应用的window对象上自定影了 $name</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">$name</span> = <span class=\"hljs-string\">&#x27;xxxxxx&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>子应用中通过window.rawWindow 拿到原始对象</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">rawWindow</span>.<span class=\"hljs-property\">$name</span><br><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>通过micro-app 的内置的plugin 定义全局processHtml 拦截处理, 将共有属性通过立即执行函数给子应用赋值，达到在子应用中直接通过window 获取对应的属性<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-attr\">plugins</span>: &#123;<br>     <span class=\"hljs-attr\">global</span>: [<br>       &#123;<br>         <span class=\"hljs-attr\">escapeProperties</span>: [],<br>         <span class=\"hljs-comment\">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span><br>         <span class=\"hljs-title function_\">processHtml</span>(<span class=\"hljs-params\">code: <span class=\"hljs-built_in\">string</span>, url: <span class=\"hljs-built_in\">string</span></span>) &#123;<br>           <span class=\"hljs-comment\">// 全局注入 $YS 对象</span><br>           <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-string\">`&lt;head&gt;&lt;script&gt;(function(window) &#123;window.$name = window.rawWindow.$name&#125;)(window)&lt;/script&gt;`</span>;<br>           code = code.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;&lt;head&gt;&#x27;</span>, data);<br>           <span class=\"hljs-keyword\">return</span> code;<br>         &#125;<br>       &#125;<br>     ],<br>     <span class=\"hljs-attr\">modules</span>: &#123;&#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n子应用可以通过 window.$name 获取到对应的值</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>micro-app 运行时沙盒机制，会将基座应用window 自己配置的全局变量无法共享<br>具体可以参考</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * rewrite special properties of window</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> appName app name</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> microAppWindow child app microWindow</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">patchWindowProperty</span> (<br>  <span class=\"hljs-attr\">microAppWindow</span>: microAppWindowType,<br>):<span class=\"hljs-built_in\">void</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> rawWindow = globalEnv.<span class=\"hljs-property\">rawWindow</span><br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getOwnPropertyNames</span>(rawWindow)<br>    .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-regexp\">/^on/</span>.<span class=\"hljs-title function_\">test</span>(key) &amp;&amp; !<span class=\"hljs-variable constant_\">SCOPE_WINDOW_ON_EVENT</span>.<span class=\"hljs-title function_\">includes</span>(key)<br>    &#125;)<br>    .<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">eventName: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">const</span> &#123; enumerable, writable, set &#125; = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getOwnPropertyDescriptor</span>(rawWindow, eventName) || &#123;<br>        <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>,<br>      &#125;<br>      <span class=\"hljs-title function_\">rawDefineProperty</span>(microAppWindow, eventName, &#123;<br>        enumerable,<br>        <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">() =&gt;</span> rawWindow[eventName],<br>        <span class=\"hljs-attr\">set</span>: writable ?? !!set<br>          ? <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> &#123; rawWindow[eventName] = value &#125;<br>          : <span class=\"hljs-literal\">undefined</span>,<br>      &#125;)<br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>如果在项目中想通过子应用直接访问 基座应用window上属性有两种方案<br>例如基座应用的window对象上自定影了 $name</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">$name</span> = <span class=\"hljs-string\">&#x27;xxxxxx&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>子应用中通过window.rawWindow 拿到原始对象</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">rawWindow</span>.<span class=\"hljs-property\">$name</span><br><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>通过micro-app 的内置的plugin 定义全局processHtml 拦截处理, 将共有属性通过立即执行函数给子应用赋值，达到在子应用中直接通过window 获取对应的属性<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-attr\">plugins</span>: &#123;<br>     <span class=\"hljs-attr\">global</span>: [<br>       &#123;<br>         <span class=\"hljs-attr\">escapeProperties</span>: [],<br>         <span class=\"hljs-comment\">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span><br>         <span class=\"hljs-title function_\">processHtml</span>(<span class=\"hljs-params\">code: <span class=\"hljs-built_in\">string</span>, url: <span class=\"hljs-built_in\">string</span></span>) &#123;<br>           <span class=\"hljs-comment\">// 全局注入 $YS 对象</span><br>           <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-string\">`&lt;head&gt;&lt;script&gt;(function(window) &#123;window.$name = window.rawWindow.$name&#125;)(window)&lt;/script&gt;`</span>;<br>           code = code.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;&lt;head&gt;&#x27;</span>, data);<br>           <span class=\"hljs-keyword\">return</span> code;<br>         &#125;<br>       &#125;<br>     ],<br>     <span class=\"hljs-attr\">modules</span>: &#123;&#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n子应用可以通过 window.$name 获取到对应的值</li>\n</ol>\n"},{"title":"node.js 部署脚本","date":"2023-09-26T05:40:23.000Z","_content":"# node.js 自动打包&&部署脚本\n\n## 搭建项目\n> 采用 ES module 用法，package.json type 需要设置为 module \n``` bash \nnpm init\n```\n\n## 添加配置文件server.json\n```json\n{\n    \"host\": \"****\",\n    \"username\": \"****\",\n    \"password\": \"*****\",\n    \"path\": \"****\",\n    \"port\": 22,\n    \"localDir\": \"release/\",\n    \"backUp\": false\n  }\n\n```\n## 读取配置文件\n```javascript\nimport fs from \"fs\";\nconst configFilePath = path.resolve(process.cwd(), \"server.json\");\nconst config = JSON.parse(fs.readFileSync(configFilePath));\n```\n## 链接服务器\n安装 node-ssh 依赖\n``` bash\nnpm i node-ssh -D\nnpm i ora -D \nnpm i chalk -D\n```\n\n```typescript\nimport chalk from \"chalk\";\nimport Ora from \"ora\";\nasync function connectServer(config) {\n  let spinner = Ora(chalk.cyan(`[info] connecting server....\\n`)).start();\n  const sshLoginParam = {\n    host: config.host,\n    port: config.port,\n    username: config.username,\n    password: config.password,\n  };\n//   链接\n  await SSH.connect(sshLoginParam)\n    .then(() => {\n      spinner.succeed(chalk.green(`[info] connected server \\n`));\n    })\n    .catch((err) => {\n      spinner.fail(chalk.red(`[error] connect server failed\\n`));\n      console.log(err);\n      process.exit(1);\n    });\n}\n```\n\n## 添加执行命令方法\n```javascript\n// cmd 需要执行的命令\n// cwd 执行命令所在的目录\n// await runCommand(`rm -rf test-dir`, '/home')\nasync function runCommand(cmd, cwd) {\n  await SSH.execCommand(cmd, {\n    cwd,\n    // onStderr(chunk) {\n    //   logError(`${cmd}, stderrChunk, ${chunk.toString(\"utf8\")}`);\n    // },\n  });\n}\n\n```\n## 执行推送文件到远程\n```javascript\n// localDir 本地文件目录\n// remoteDir 远程文件目录\nawait SSH.putDirectory(localDir, remoteDir);\n```\n## child_process 开启子shell执行命令\n<!-- @example spawnCommand('yarn', ['build'], process.cwd()) -->\n```javascript\nconst spawnCommand = (command, params, cwd) => {\n  return new Promise((resolve, reject) => {\n    const result = spawn(command, params, {\n      cwd,\n      stdio: 'inherit', // 打印命令原始输出\n      // 在mac 环境下出问题是可以尝试直接将shell 设置为true\n      shell: process.platform === 'win32', // 兼容windows系统\n    });\n\n    result.on('error', (err) => {\n      reject(err);\n    });\n\n    result.on('close', (code) => {\n      if (code === 0) resolve();\n      else reject(code);\n    });\n  });\n};\n\n```\n\n# 完整示例\n```js\nimport Ora from \"ora\";\nimport * as NodeSSH from \"node-ssh\";\nimport fs from \"fs\";\nimport * as path from \"path\";\nimport chalk from \"chalk\";\nimport  { spawn } from 'child_process';\n// 根目录\nconst REMOTE_ROOT = \"/home/simtek-cloud/front/all/html\";\n// 主APP目录\nconst MAIN_APP = `main-app`;\nconst SSH = new NodeSSH.NodeSSH();\n\nconst logInfo = (text) => console.log(chalk.cyan(text));\nconst logSuccess = (text) => console.log(chalk.green(text));\nconst logError = (text) => console.log(chalk.red(text));\n\n/**\n * spawnCommand 执行shell命令\n * @param {*} command 命令 string\n * @param {*} params 参数 array\n * @param {*} cwd 工作路径\n * @example spawnCommand('yarn', ['build'], process.cwd())\n */\nconst spawnCommand = (command, params, cwd) => {\n  return new Promise((resolve, reject) => {\n    const result = spawn(command, params, {\n      cwd,\n      stdio: 'inherit', // 打印命令原始输出\n      shell: process.platform === 'win32', // 兼容windows系统\n    });\n\n    result.on('error', (err) => {\n      reject(err);\n    });\n\n    result.on('close', (code) => {\n      if (code === 0) resolve();\n      else reject(code);\n    });\n  });\n};\n\nasync function runCommand(cmd, cwd) {\n  await SSH.execCommand(cmd, {\n    cwd,\n    onStderr(chunk) {\n      logError(`${cmd}, stderrChunk, ${chunk.toString(\"utf8\")}`);\n    },\n  });\n}\n\nconst configFilePath = path.resolve(process.cwd(), \"server.json\");\nconst config = JSON.parse(fs.readFileSync(configFilePath));\n\nasync function connectServer(config) {\n  let spinner = Ora(chalk.cyan(`[info] connecting server....\\n`)).start();\n  const sshLoginParam = {\n    host: config.host,\n    port: config.port,\n    username: config.username,\n    password: config.password,\n  };\n  await SSH.connect(sshLoginParam)\n    .then(() => {\n      spinner.succeed(chalk.green(`[info] connected server \\n`));\n    })\n    .catch((err) => {\n      spinner.fail(chalk.red(`[error] connect server failed\\n`));\n      console.log(err);\n      process.exit(1);\n    });\n}\n\nasync function deleteMainAppDir() {\n  const spinner = Ora(\n    chalk.cyan(`[info] delete remote dir: main-app\\n`)\n  ).start();\n  // 删除源目录\n  await runCommand(`rm -rf ${MAIN_APP}`, config.path).catch((err) => {\n    spinner.fail(chalk.red(\"删除文件失败了\"));\n    console.log(\"[error]chmod: \", err);\n  });\n  spinner.succeed(chalk.green(`[info] remote dir [main-app] is deleted`));\n}\n\n\n/**\n * @description: 推送推送main app\n * @return {*}\n */\nasync function putMainAppDir() {\n  const localDir = path.resolve(process.cwd(), `main-app/dist`);\n  const remoteDir = `${config.path}/${MAIN_APP}`;\n  const successText = `[info] push ${localDir} to ${remoteDir}\\n`;\n  const spinner = Ora(chalk.cyan(successText)).start();\n  try {\n    await SSH.putDirectory(localDir, remoteDir);\n    spinner.succeed(chalk.green(successText));\n  } catch (e) {\n    spinner.fail(chalk.red(successText));\n  }\n}\n\n/**\n * @description: 重启docker 容器\n * @return {*}\n */\nasync function restartDocker() {\n  const spinner = Ora(chalk.cyan(`[info] restart docker\\n`)).start();\n  // 重启docker 容器\n  try {\n    // 如果需要输入密码 可以常通过 sudo -S 配置 从标准输入流获取密码\n    // echo ${passsword} | sudo docker restart all\n    await runCommand(`docker restart all`, config.path).catch((err) => {\n      console.log(\"[error]unzip: \", err);\n    });\n    spinner.succeed(chalk.green(`[error] restart docker\\n`));\n  } catch (e) {\n    spinner.fail(chalk.red(`[error] restart docker\\n`));\n  }\n}\n\nasync function deploy() {\n  console.log(`======= 加载配置文件 ==========`);\n  console.log(config);\n  await spawnCommand('npm run', ['build:all'], process.cwd())\n  await connectServer(config);\n  // 删除目录\n  await deleteMainAppDir();\n  // 上传文件到指定目录\n  await putMainAppDir();\n  // 重启docker\n  await restartDocker();\n  SSH.dispose();\n}\n\ndeploy();\n","source":"_posts/micro-web/micro-deploy.md","raw":"---\ntitle: node.js 部署脚本\ndate: 2023-09-26 13:40:23\ntags: javascript\n---\n# node.js 自动打包&&部署脚本\n\n## 搭建项目\n> 采用 ES module 用法，package.json type 需要设置为 module \n``` bash \nnpm init\n```\n\n## 添加配置文件server.json\n```json\n{\n    \"host\": \"****\",\n    \"username\": \"****\",\n    \"password\": \"*****\",\n    \"path\": \"****\",\n    \"port\": 22,\n    \"localDir\": \"release/\",\n    \"backUp\": false\n  }\n\n```\n## 读取配置文件\n```javascript\nimport fs from \"fs\";\nconst configFilePath = path.resolve(process.cwd(), \"server.json\");\nconst config = JSON.parse(fs.readFileSync(configFilePath));\n```\n## 链接服务器\n安装 node-ssh 依赖\n``` bash\nnpm i node-ssh -D\nnpm i ora -D \nnpm i chalk -D\n```\n\n```typescript\nimport chalk from \"chalk\";\nimport Ora from \"ora\";\nasync function connectServer(config) {\n  let spinner = Ora(chalk.cyan(`[info] connecting server....\\n`)).start();\n  const sshLoginParam = {\n    host: config.host,\n    port: config.port,\n    username: config.username,\n    password: config.password,\n  };\n//   链接\n  await SSH.connect(sshLoginParam)\n    .then(() => {\n      spinner.succeed(chalk.green(`[info] connected server \\n`));\n    })\n    .catch((err) => {\n      spinner.fail(chalk.red(`[error] connect server failed\\n`));\n      console.log(err);\n      process.exit(1);\n    });\n}\n```\n\n## 添加执行命令方法\n```javascript\n// cmd 需要执行的命令\n// cwd 执行命令所在的目录\n// await runCommand(`rm -rf test-dir`, '/home')\nasync function runCommand(cmd, cwd) {\n  await SSH.execCommand(cmd, {\n    cwd,\n    // onStderr(chunk) {\n    //   logError(`${cmd}, stderrChunk, ${chunk.toString(\"utf8\")}`);\n    // },\n  });\n}\n\n```\n## 执行推送文件到远程\n```javascript\n// localDir 本地文件目录\n// remoteDir 远程文件目录\nawait SSH.putDirectory(localDir, remoteDir);\n```\n## child_process 开启子shell执行命令\n<!-- @example spawnCommand('yarn', ['build'], process.cwd()) -->\n```javascript\nconst spawnCommand = (command, params, cwd) => {\n  return new Promise((resolve, reject) => {\n    const result = spawn(command, params, {\n      cwd,\n      stdio: 'inherit', // 打印命令原始输出\n      // 在mac 环境下出问题是可以尝试直接将shell 设置为true\n      shell: process.platform === 'win32', // 兼容windows系统\n    });\n\n    result.on('error', (err) => {\n      reject(err);\n    });\n\n    result.on('close', (code) => {\n      if (code === 0) resolve();\n      else reject(code);\n    });\n  });\n};\n\n```\n\n# 完整示例\n```js\nimport Ora from \"ora\";\nimport * as NodeSSH from \"node-ssh\";\nimport fs from \"fs\";\nimport * as path from \"path\";\nimport chalk from \"chalk\";\nimport  { spawn } from 'child_process';\n// 根目录\nconst REMOTE_ROOT = \"/home/simtek-cloud/front/all/html\";\n// 主APP目录\nconst MAIN_APP = `main-app`;\nconst SSH = new NodeSSH.NodeSSH();\n\nconst logInfo = (text) => console.log(chalk.cyan(text));\nconst logSuccess = (text) => console.log(chalk.green(text));\nconst logError = (text) => console.log(chalk.red(text));\n\n/**\n * spawnCommand 执行shell命令\n * @param {*} command 命令 string\n * @param {*} params 参数 array\n * @param {*} cwd 工作路径\n * @example spawnCommand('yarn', ['build'], process.cwd())\n */\nconst spawnCommand = (command, params, cwd) => {\n  return new Promise((resolve, reject) => {\n    const result = spawn(command, params, {\n      cwd,\n      stdio: 'inherit', // 打印命令原始输出\n      shell: process.platform === 'win32', // 兼容windows系统\n    });\n\n    result.on('error', (err) => {\n      reject(err);\n    });\n\n    result.on('close', (code) => {\n      if (code === 0) resolve();\n      else reject(code);\n    });\n  });\n};\n\nasync function runCommand(cmd, cwd) {\n  await SSH.execCommand(cmd, {\n    cwd,\n    onStderr(chunk) {\n      logError(`${cmd}, stderrChunk, ${chunk.toString(\"utf8\")}`);\n    },\n  });\n}\n\nconst configFilePath = path.resolve(process.cwd(), \"server.json\");\nconst config = JSON.parse(fs.readFileSync(configFilePath));\n\nasync function connectServer(config) {\n  let spinner = Ora(chalk.cyan(`[info] connecting server....\\n`)).start();\n  const sshLoginParam = {\n    host: config.host,\n    port: config.port,\n    username: config.username,\n    password: config.password,\n  };\n  await SSH.connect(sshLoginParam)\n    .then(() => {\n      spinner.succeed(chalk.green(`[info] connected server \\n`));\n    })\n    .catch((err) => {\n      spinner.fail(chalk.red(`[error] connect server failed\\n`));\n      console.log(err);\n      process.exit(1);\n    });\n}\n\nasync function deleteMainAppDir() {\n  const spinner = Ora(\n    chalk.cyan(`[info] delete remote dir: main-app\\n`)\n  ).start();\n  // 删除源目录\n  await runCommand(`rm -rf ${MAIN_APP}`, config.path).catch((err) => {\n    spinner.fail(chalk.red(\"删除文件失败了\"));\n    console.log(\"[error]chmod: \", err);\n  });\n  spinner.succeed(chalk.green(`[info] remote dir [main-app] is deleted`));\n}\n\n\n/**\n * @description: 推送推送main app\n * @return {*}\n */\nasync function putMainAppDir() {\n  const localDir = path.resolve(process.cwd(), `main-app/dist`);\n  const remoteDir = `${config.path}/${MAIN_APP}`;\n  const successText = `[info] push ${localDir} to ${remoteDir}\\n`;\n  const spinner = Ora(chalk.cyan(successText)).start();\n  try {\n    await SSH.putDirectory(localDir, remoteDir);\n    spinner.succeed(chalk.green(successText));\n  } catch (e) {\n    spinner.fail(chalk.red(successText));\n  }\n}\n\n/**\n * @description: 重启docker 容器\n * @return {*}\n */\nasync function restartDocker() {\n  const spinner = Ora(chalk.cyan(`[info] restart docker\\n`)).start();\n  // 重启docker 容器\n  try {\n    // 如果需要输入密码 可以常通过 sudo -S 配置 从标准输入流获取密码\n    // echo ${passsword} | sudo docker restart all\n    await runCommand(`docker restart all`, config.path).catch((err) => {\n      console.log(\"[error]unzip: \", err);\n    });\n    spinner.succeed(chalk.green(`[error] restart docker\\n`));\n  } catch (e) {\n    spinner.fail(chalk.red(`[error] restart docker\\n`));\n  }\n}\n\nasync function deploy() {\n  console.log(`======= 加载配置文件 ==========`);\n  console.log(config);\n  await spawnCommand('npm run', ['build:all'], process.cwd())\n  await connectServer(config);\n  // 删除目录\n  await deleteMainAppDir();\n  // 上传文件到指定目录\n  await putMainAppDir();\n  // 重启docker\n  await restartDocker();\n  SSH.dispose();\n}\n\ndeploy();\n","slug":"micro-web/micro-deploy","published":1,"updated":"2023-11-28T14:24:47.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbz000wjcskcwn7gkbk","content":"<h1 id=\"node-js-自动打包-部署脚本\"><a href=\"#node-js-自动打包-部署脚本\" class=\"headerlink\" title=\"node.js 自动打包&amp;&amp;部署脚本\"></a>node.js 自动打包&amp;&amp;部署脚本</h1><h2 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h2><blockquote>\n<p>采用 ES module 用法，package.json type 需要设置为 module </p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm init<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加配置文件server-json\"><a href=\"#添加配置文件server-json\" class=\"headerlink\" title=\"添加配置文件server.json\"></a>添加配置文件server.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;host&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;****&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;username&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;****&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;password&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;*****&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;path&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;****&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;port&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">22</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;localDir&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;release/&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;backUp&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>  <span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"读取配置文件\"><a href=\"#读取配置文件\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;<br><span class=\"hljs-keyword\">const</span> configFilePath = path.<span class=\"hljs-title function_\">resolve</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">&quot;server.json&quot;</span>);<br><span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(fs.<span class=\"hljs-title function_\">readFileSync</span>(configFilePath));<br></code></pre></td></tr></table></figure>\n<h2 id=\"链接服务器\"><a href=\"#链接服务器\" class=\"headerlink\" title=\"链接服务器\"></a>链接服务器</h2><p>安装 node-ssh 依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i node-ssh -D<br>npm i ora -D <br>npm i chalk -D<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> chalk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chalk&quot;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ora</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;ora&quot;</span>;<br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">connectServer</span>(<span class=\"hljs-params\">config</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> spinner = <span class=\"hljs-title class_\">Ora</span>(chalk.<span class=\"hljs-title function_\">cyan</span>(<span class=\"hljs-string\">`[info] connecting server....\\n`</span>)).<span class=\"hljs-title function_\">start</span>();<br>  <span class=\"hljs-keyword\">const</span> sshLoginParam = &#123;<br>    <span class=\"hljs-attr\">host</span>: config.<span class=\"hljs-property\">host</span>,<br>    <span class=\"hljs-attr\">port</span>: config.<span class=\"hljs-property\">port</span>,<br>    <span class=\"hljs-attr\">username</span>: config.<span class=\"hljs-property\">username</span>,<br>    <span class=\"hljs-attr\">password</span>: config.<span class=\"hljs-property\">password</span>,<br>  &#125;;<br><span class=\"hljs-comment\">//   链接</span><br>  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">SSH</span>.<span class=\"hljs-title function_\">connect</span>(sshLoginParam)<br>    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      spinner.<span class=\"hljs-title function_\">succeed</span>(chalk.<span class=\"hljs-title function_\">green</span>(<span class=\"hljs-string\">`[info] connected server \\n`</span>));<br>    &#125;)<br>    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>      spinner.<span class=\"hljs-title function_\">fail</span>(chalk.<span class=\"hljs-title function_\">red</span>(<span class=\"hljs-string\">`[error] connect server failed\\n`</span>));<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>      process.<span class=\"hljs-title function_\">exit</span>(<span class=\"hljs-number\">1</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加执行命令方法\"><a href=\"#添加执行命令方法\" class=\"headerlink\" title=\"添加执行命令方法\"></a>添加执行命令方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// cmd 需要执行的命令</span><br><span class=\"hljs-comment\">// cwd 执行命令所在的目录</span><br><span class=\"hljs-comment\">// await runCommand(`rm -rf test-dir`, &#x27;/home&#x27;)</span><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">runCommand</span>(<span class=\"hljs-params\">cmd, cwd</span>) &#123;<br>  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">SSH</span>.<span class=\"hljs-title function_\">execCommand</span>(cmd, &#123;<br>    cwd,<br>    <span class=\"hljs-comment\">// onStderr(chunk) &#123;</span><br>    <span class=\"hljs-comment\">//   logError(`$&#123;cmd&#125;, stderrChunk, $&#123;chunk.toString(&quot;utf8&quot;)&#125;`);</span><br>    <span class=\"hljs-comment\">// &#125;,</span><br>  &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"执行推送文件到远程\"><a href=\"#执行推送文件到远程\" class=\"headerlink\" title=\"执行推送文件到远程\"></a>执行推送文件到远程</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// localDir 本地文件目录</span><br><span class=\"hljs-comment\">// remoteDir 远程文件目录</span><br><span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">SSH</span>.<span class=\"hljs-title function_\">putDirectory</span>(localDir, remoteDir);<br></code></pre></td></tr></table></figure>\n<h2 id=\"child-process-开启子shell执行命令\"><a href=\"#child-process-开启子shell执行命令\" class=\"headerlink\" title=\"child_process 开启子shell执行命令\"></a>child_process 开启子shell执行命令</h2><!-- @example spawnCommand('yarn', ['build'], process.cwd()) -->\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">spawnCommand</span> = (<span class=\"hljs-params\">command, params, cwd</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">spawn</span>(command, params, &#123;<br>      cwd,<br>      <span class=\"hljs-attr\">stdio</span>: <span class=\"hljs-string\">&#x27;inherit&#x27;</span>, <span class=\"hljs-comment\">// 打印命令原始输出</span><br>      <span class=\"hljs-comment\">// 在mac 环境下出问题是可以尝试直接将shell 设置为true</span><br>      <span class=\"hljs-attr\">shell</span>: process.<span class=\"hljs-property\">platform</span> === <span class=\"hljs-string\">&#x27;win32&#x27;</span>, <span class=\"hljs-comment\">// 兼容windows系统</span><br>    &#125;);<br><br>    result.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;error&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">reject</span>(err);<br>    &#125;);<br><br>    result.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;close&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">code</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (code === <span class=\"hljs-number\">0</span>) <span class=\"hljs-title function_\">resolve</span>();<br>      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_\">reject</span>(code);<br>    &#125;);<br>  &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h1><pre><code class=\"js\">import Ora from &quot;ora&quot;;\nimport * as NodeSSH from &quot;node-ssh&quot;;\nimport fs from &quot;fs&quot;;\nimport * as path from &quot;path&quot;;\nimport chalk from &quot;chalk&quot;;\nimport  &#123; spawn &#125; from &#39;child_process&#39;;\n// 根目录\nconst REMOTE_ROOT = &quot;/home/simtek-cloud/front/all/html&quot;;\n// 主APP目录\nconst MAIN_APP = `main-app`;\nconst SSH = new NodeSSH.NodeSSH();\n\nconst logInfo = (text) =&gt; console.log(chalk.cyan(text));\nconst logSuccess = (text) =&gt; console.log(chalk.green(text));\nconst logError = (text) =&gt; console.log(chalk.red(text));\n\n/**\n * spawnCommand 执行shell命令\n * @param &#123;*&#125; command 命令 string\n * @param &#123;*&#125; params 参数 array\n * @param &#123;*&#125; cwd 工作路径\n * @example spawnCommand(&#39;yarn&#39;, [&#39;build&#39;], process.cwd())\n */\nconst spawnCommand = (command, params, cwd) =&gt; &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    const result = spawn(command, params, &#123;\n      cwd,\n      stdio: &#39;inherit&#39;, // 打印命令原始输出\n      shell: process.platform === &#39;win32&#39;, // 兼容windows系统\n    &#125;);\n\n    result.on(&#39;error&#39;, (err) =&gt; &#123;\n      reject(err);\n    &#125;);\n\n    result.on(&#39;close&#39;, (code) =&gt; &#123;\n      if (code === 0) resolve();\n      else reject(code);\n    &#125;);\n  &#125;);\n&#125;;\n\nasync function runCommand(cmd, cwd) &#123;\n  await SSH.execCommand(cmd, &#123;\n    cwd,\n    onStderr(chunk) &#123;\n      logError(`$&#123;cmd&#125;, stderrChunk, $&#123;chunk.toString(&quot;utf8&quot;)&#125;`);\n    &#125;,\n  &#125;);\n&#125;\n\nconst configFilePath = path.resolve(process.cwd(), &quot;server.json&quot;);\nconst config = JSON.parse(fs.readFileSync(configFilePath));\n\nasync function connectServer(config) &#123;\n  let spinner = Ora(chalk.cyan(`[info] connecting server....\\n`)).start();\n  const sshLoginParam = &#123;\n    host: config.host,\n    port: config.port,\n    username: config.username,\n    password: config.password,\n  &#125;;\n  await SSH.connect(sshLoginParam)\n    .then(() =&gt; &#123;\n      spinner.succeed(chalk.green(`[info] connected server \\n`));\n    &#125;)\n    .catch((err) =&gt; &#123;\n      spinner.fail(chalk.red(`[error] connect server failed\\n`));\n      console.log(err);\n      process.exit(1);\n    &#125;);\n&#125;\n\nasync function deleteMainAppDir() &#123;\n  const spinner = Ora(\n    chalk.cyan(`[info] delete remote dir: main-app\\n`)\n  ).start();\n  // 删除源目录\n  await runCommand(`rm -rf $&#123;MAIN_APP&#125;`, config.path).catch((err) =&gt; &#123;\n    spinner.fail(chalk.red(&quot;删除文件失败了&quot;));\n    console.log(&quot;[error]chmod: &quot;, err);\n  &#125;);\n  spinner.succeed(chalk.green(`[info] remote dir [main-app] is deleted`));\n&#125;\n\n\n/**\n * @description: 推送推送main app\n * @return &#123;*&#125;\n */\nasync function putMainAppDir() &#123;\n  const localDir = path.resolve(process.cwd(), `main-app/dist`);\n  const remoteDir = `$&#123;config.path&#125;/$&#123;MAIN_APP&#125;`;\n  const successText = `[info] push $&#123;localDir&#125; to $&#123;remoteDir&#125;\\n`;\n  const spinner = Ora(chalk.cyan(successText)).start();\n  try &#123;\n    await SSH.putDirectory(localDir, remoteDir);\n    spinner.succeed(chalk.green(successText));\n  &#125; catch (e) &#123;\n    spinner.fail(chalk.red(successText));\n  &#125;\n&#125;\n\n/**\n * @description: 重启docker 容器\n * @return &#123;*&#125;\n */\nasync function restartDocker() &#123;\n  const spinner = Ora(chalk.cyan(`[info] restart docker\\n`)).start();\n  // 重启docker 容器\n  try &#123;\n    // 如果需要输入密码 可以常通过 sudo -S 配置 从标准输入流获取密码\n    // echo $&#123;passsword&#125; | sudo docker restart all\n    await runCommand(`docker restart all`, config.path).catch((err) =&gt; &#123;\n      console.log(&quot;[error]unzip: &quot;, err);\n    &#125;);\n    spinner.succeed(chalk.green(`[error] restart docker\\n`));\n  &#125; catch (e) &#123;\n    spinner.fail(chalk.red(`[error] restart docker\\n`));\n  &#125;\n&#125;\n\nasync function deploy() &#123;\n  console.log(`======= 加载配置文件 ==========`);\n  console.log(config);\n  await spawnCommand(&#39;npm run&#39;, [&#39;build:all&#39;], process.cwd())\n  await connectServer(config);\n  // 删除目录\n  await deleteMainAppDir();\n  // 上传文件到指定目录\n  await putMainAppDir();\n  // 重启docker\n  await restartDocker();\n  SSH.dispose();\n&#125;\n\ndeploy();\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"node-js-自动打包-部署脚本\"><a href=\"#node-js-自动打包-部署脚本\" class=\"headerlink\" title=\"node.js 自动打包&amp;&amp;部署脚本\"></a>node.js 自动打包&amp;&amp;部署脚本</h1><h2 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h2><blockquote>\n<p>采用 ES module 用法，package.json type 需要设置为 module </p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm init<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加配置文件server-json\"><a href=\"#添加配置文件server-json\" class=\"headerlink\" title=\"添加配置文件server.json\"></a>添加配置文件server.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;host&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;****&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;username&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;****&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;password&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;*****&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;path&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;****&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;port&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">22</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;localDir&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;release/&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;backUp&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>  <span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"读取配置文件\"><a href=\"#读取配置文件\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;<br><span class=\"hljs-keyword\">const</span> configFilePath = path.<span class=\"hljs-title function_\">resolve</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">&quot;server.json&quot;</span>);<br><span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(fs.<span class=\"hljs-title function_\">readFileSync</span>(configFilePath));<br></code></pre></td></tr></table></figure>\n<h2 id=\"链接服务器\"><a href=\"#链接服务器\" class=\"headerlink\" title=\"链接服务器\"></a>链接服务器</h2><p>安装 node-ssh 依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i node-ssh -D<br>npm i ora -D <br>npm i chalk -D<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> chalk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chalk&quot;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ora</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;ora&quot;</span>;<br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">connectServer</span>(<span class=\"hljs-params\">config</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> spinner = <span class=\"hljs-title class_\">Ora</span>(chalk.<span class=\"hljs-title function_\">cyan</span>(<span class=\"hljs-string\">`[info] connecting server....\\n`</span>)).<span class=\"hljs-title function_\">start</span>();<br>  <span class=\"hljs-keyword\">const</span> sshLoginParam = &#123;<br>    <span class=\"hljs-attr\">host</span>: config.<span class=\"hljs-property\">host</span>,<br>    <span class=\"hljs-attr\">port</span>: config.<span class=\"hljs-property\">port</span>,<br>    <span class=\"hljs-attr\">username</span>: config.<span class=\"hljs-property\">username</span>,<br>    <span class=\"hljs-attr\">password</span>: config.<span class=\"hljs-property\">password</span>,<br>  &#125;;<br><span class=\"hljs-comment\">//   链接</span><br>  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">SSH</span>.<span class=\"hljs-title function_\">connect</span>(sshLoginParam)<br>    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      spinner.<span class=\"hljs-title function_\">succeed</span>(chalk.<span class=\"hljs-title function_\">green</span>(<span class=\"hljs-string\">`[info] connected server \\n`</span>));<br>    &#125;)<br>    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>      spinner.<span class=\"hljs-title function_\">fail</span>(chalk.<span class=\"hljs-title function_\">red</span>(<span class=\"hljs-string\">`[error] connect server failed\\n`</span>));<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>      process.<span class=\"hljs-title function_\">exit</span>(<span class=\"hljs-number\">1</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加执行命令方法\"><a href=\"#添加执行命令方法\" class=\"headerlink\" title=\"添加执行命令方法\"></a>添加执行命令方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// cmd 需要执行的命令</span><br><span class=\"hljs-comment\">// cwd 执行命令所在的目录</span><br><span class=\"hljs-comment\">// await runCommand(`rm -rf test-dir`, &#x27;/home&#x27;)</span><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">runCommand</span>(<span class=\"hljs-params\">cmd, cwd</span>) &#123;<br>  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">SSH</span>.<span class=\"hljs-title function_\">execCommand</span>(cmd, &#123;<br>    cwd,<br>    <span class=\"hljs-comment\">// onStderr(chunk) &#123;</span><br>    <span class=\"hljs-comment\">//   logError(`$&#123;cmd&#125;, stderrChunk, $&#123;chunk.toString(&quot;utf8&quot;)&#125;`);</span><br>    <span class=\"hljs-comment\">// &#125;,</span><br>  &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"执行推送文件到远程\"><a href=\"#执行推送文件到远程\" class=\"headerlink\" title=\"执行推送文件到远程\"></a>执行推送文件到远程</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// localDir 本地文件目录</span><br><span class=\"hljs-comment\">// remoteDir 远程文件目录</span><br><span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">SSH</span>.<span class=\"hljs-title function_\">putDirectory</span>(localDir, remoteDir);<br></code></pre></td></tr></table></figure>\n<h2 id=\"child-process-开启子shell执行命令\"><a href=\"#child-process-开启子shell执行命令\" class=\"headerlink\" title=\"child_process 开启子shell执行命令\"></a>child_process 开启子shell执行命令</h2><!-- @example spawnCommand('yarn', ['build'], process.cwd()) -->\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">spawnCommand</span> = (<span class=\"hljs-params\">command, params, cwd</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">spawn</span>(command, params, &#123;<br>      cwd,<br>      <span class=\"hljs-attr\">stdio</span>: <span class=\"hljs-string\">&#x27;inherit&#x27;</span>, <span class=\"hljs-comment\">// 打印命令原始输出</span><br>      <span class=\"hljs-comment\">// 在mac 环境下出问题是可以尝试直接将shell 设置为true</span><br>      <span class=\"hljs-attr\">shell</span>: process.<span class=\"hljs-property\">platform</span> === <span class=\"hljs-string\">&#x27;win32&#x27;</span>, <span class=\"hljs-comment\">// 兼容windows系统</span><br>    &#125;);<br><br>    result.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;error&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">reject</span>(err);<br>    &#125;);<br><br>    result.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;close&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">code</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (code === <span class=\"hljs-number\">0</span>) <span class=\"hljs-title function_\">resolve</span>();<br>      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_\">reject</span>(code);<br>    &#125;);<br>  &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h1><pre><code class=\"js\">import Ora from &quot;ora&quot;;\nimport * as NodeSSH from &quot;node-ssh&quot;;\nimport fs from &quot;fs&quot;;\nimport * as path from &quot;path&quot;;\nimport chalk from &quot;chalk&quot;;\nimport  &#123; spawn &#125; from &#39;child_process&#39;;\n// 根目录\nconst REMOTE_ROOT = &quot;/home/simtek-cloud/front/all/html&quot;;\n// 主APP目录\nconst MAIN_APP = `main-app`;\nconst SSH = new NodeSSH.NodeSSH();\n\nconst logInfo = (text) =&gt; console.log(chalk.cyan(text));\nconst logSuccess = (text) =&gt; console.log(chalk.green(text));\nconst logError = (text) =&gt; console.log(chalk.red(text));\n\n/**\n * spawnCommand 执行shell命令\n * @param &#123;*&#125; command 命令 string\n * @param &#123;*&#125; params 参数 array\n * @param &#123;*&#125; cwd 工作路径\n * @example spawnCommand(&#39;yarn&#39;, [&#39;build&#39;], process.cwd())\n */\nconst spawnCommand = (command, params, cwd) =&gt; &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    const result = spawn(command, params, &#123;\n      cwd,\n      stdio: &#39;inherit&#39;, // 打印命令原始输出\n      shell: process.platform === &#39;win32&#39;, // 兼容windows系统\n    &#125;);\n\n    result.on(&#39;error&#39;, (err) =&gt; &#123;\n      reject(err);\n    &#125;);\n\n    result.on(&#39;close&#39;, (code) =&gt; &#123;\n      if (code === 0) resolve();\n      else reject(code);\n    &#125;);\n  &#125;);\n&#125;;\n\nasync function runCommand(cmd, cwd) &#123;\n  await SSH.execCommand(cmd, &#123;\n    cwd,\n    onStderr(chunk) &#123;\n      logError(`$&#123;cmd&#125;, stderrChunk, $&#123;chunk.toString(&quot;utf8&quot;)&#125;`);\n    &#125;,\n  &#125;);\n&#125;\n\nconst configFilePath = path.resolve(process.cwd(), &quot;server.json&quot;);\nconst config = JSON.parse(fs.readFileSync(configFilePath));\n\nasync function connectServer(config) &#123;\n  let spinner = Ora(chalk.cyan(`[info] connecting server....\\n`)).start();\n  const sshLoginParam = &#123;\n    host: config.host,\n    port: config.port,\n    username: config.username,\n    password: config.password,\n  &#125;;\n  await SSH.connect(sshLoginParam)\n    .then(() =&gt; &#123;\n      spinner.succeed(chalk.green(`[info] connected server \\n`));\n    &#125;)\n    .catch((err) =&gt; &#123;\n      spinner.fail(chalk.red(`[error] connect server failed\\n`));\n      console.log(err);\n      process.exit(1);\n    &#125;);\n&#125;\n\nasync function deleteMainAppDir() &#123;\n  const spinner = Ora(\n    chalk.cyan(`[info] delete remote dir: main-app\\n`)\n  ).start();\n  // 删除源目录\n  await runCommand(`rm -rf $&#123;MAIN_APP&#125;`, config.path).catch((err) =&gt; &#123;\n    spinner.fail(chalk.red(&quot;删除文件失败了&quot;));\n    console.log(&quot;[error]chmod: &quot;, err);\n  &#125;);\n  spinner.succeed(chalk.green(`[info] remote dir [main-app] is deleted`));\n&#125;\n\n\n/**\n * @description: 推送推送main app\n * @return &#123;*&#125;\n */\nasync function putMainAppDir() &#123;\n  const localDir = path.resolve(process.cwd(), `main-app/dist`);\n  const remoteDir = `$&#123;config.path&#125;/$&#123;MAIN_APP&#125;`;\n  const successText = `[info] push $&#123;localDir&#125; to $&#123;remoteDir&#125;\\n`;\n  const spinner = Ora(chalk.cyan(successText)).start();\n  try &#123;\n    await SSH.putDirectory(localDir, remoteDir);\n    spinner.succeed(chalk.green(successText));\n  &#125; catch (e) &#123;\n    spinner.fail(chalk.red(successText));\n  &#125;\n&#125;\n\n/**\n * @description: 重启docker 容器\n * @return &#123;*&#125;\n */\nasync function restartDocker() &#123;\n  const spinner = Ora(chalk.cyan(`[info] restart docker\\n`)).start();\n  // 重启docker 容器\n  try &#123;\n    // 如果需要输入密码 可以常通过 sudo -S 配置 从标准输入流获取密码\n    // echo $&#123;passsword&#125; | sudo docker restart all\n    await runCommand(`docker restart all`, config.path).catch((err) =&gt; &#123;\n      console.log(&quot;[error]unzip: &quot;, err);\n    &#125;);\n    spinner.succeed(chalk.green(`[error] restart docker\\n`));\n  &#125; catch (e) &#123;\n    spinner.fail(chalk.red(`[error] restart docker\\n`));\n  &#125;\n&#125;\n\nasync function deploy() &#123;\n  console.log(`======= 加载配置文件 ==========`);\n  console.log(config);\n  await spawnCommand(&#39;npm run&#39;, [&#39;build:all&#39;], process.cwd())\n  await connectServer(config);\n  // 删除目录\n  await deleteMainAppDir();\n  // 上传文件到指定目录\n  await putMainAppDir();\n  // 重启docker\n  await restartDocker();\n  SSH.dispose();\n&#125;\n\ndeploy();\n</code></pre>\n"},{"title":"微前端搭建总结","date":"2024-08-06T15:11:39.000Z","_content":"确定启用微前端处理公司业务时，通过微前端 __4个关键性决策__ 考虑设计\n根据微前端架构决策：\n- 微前端在架构中的定义\n- 微前端的组合\n- 微前端的路由\n- 微前端之间的通信\n\n\n### 定义微前端\n首先我们可以根据自身业务，判断前端业务试图是，横向拆分，还是纵向拆分。\n- 横向业务如下所示\n业务在横向拆分时，一个视图上有多个微前端，这些组成部分可以由不同团队开发\n![](/img/micro-app/micro-横向业务.png)\n\n- 纵向业务拆分如下所示\n纵向拆分业务中，一次视图上只有一个微前端，每个团队只开发自己的业务规则\n![](/img/micro-app/micro-纵向业务.png)\n\n\n### 微前端组合\n微前端组合分为\n- 客户端组合\n- 边缘侧组合\n- 服务端组合\n\n目前根据业务选择自己所需的组合方案，目前一般会选择客户端组合，方式客户端组合方式，即通过一个APP shell 通过URL来加载不同微前端，当前开源的技术站有如下几种\n1. SPA\n2. qiankun\n3. micro-app\n当前也可以直接通过Iframe 加载实现\n\n### 微前端路由\n微前端路由两种组合方式\n- 服务端路由\n- 边缘侧路由\n- 客户端路由\n\n如果技术站上处理使用SPA这种技术站，建议通过客户端进行路由组合，通过客户端路由组合时，在基座中处理路由，即可通过配置等操作实现复杂路由操作。\n\n### 微前端通信\n理论上当业务独立时，每个微前端业务独立，不需要和其他微前端通信，在实际业务中，每个微前端确实需要根据业务进行通信。通信原则是，每个微前端不知道其他微前端的存在，否则违反的独立部署的原则。\n\n通信方式可以采用如下两种\n- 全局事件总线\n在每一个微前端中注入事件总线，每个微前端只定义自己关心的事件信息\n![](/img/micro-app/micro-纵向业务.png)\n\n- 通过自定义事件\n使用自定义事件的好处是可以将通信逻辑封装在各个微前端内部，使得各个微前端之间的通信更加独立和可控。\n```javascript\n// 通过自定义事件\n// 创建一个自定义事件\nconst customEvent = new CustomEvent('myCustomEvent', {\n  detail: {\n    message: 'Hello from custom event!'\n  }\n});\n\n// 监听自定义事件\ndocument.addEventListener('myCustomEvent', function(event) {\n  console.log(event.detail.message);\n});\n\n// 触发自定义事件\ndocument.dispatchEvent(customEvent);\n```\n```javascript\n// 通过自定义事件\n// 创建一个自定义事件\nconst customEvent = new CustomEvent('myCustomEvent', {\n  detail: {\n    message: 'Hello from custom event!'\n  }\n});\n\n// 监听自定义事件\ndocument.addEventListener('myCustomEvent', function(event) {\n  console.log(event.detail.message);\n});\n\n// 触发自定义事件\ndocument.dispatchEvent(customEvent);\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/micro-web/micro-frontend-1.md","raw":"---\ntitle: 微前端搭建总结\ndate: 2024-08-06 23:11:39\ntags: 前端\ncategory: 微前端\n---\n确定启用微前端处理公司业务时，通过微前端 __4个关键性决策__ 考虑设计\n根据微前端架构决策：\n- 微前端在架构中的定义\n- 微前端的组合\n- 微前端的路由\n- 微前端之间的通信\n\n\n### 定义微前端\n首先我们可以根据自身业务，判断前端业务试图是，横向拆分，还是纵向拆分。\n- 横向业务如下所示\n业务在横向拆分时，一个视图上有多个微前端，这些组成部分可以由不同团队开发\n![](/img/micro-app/micro-横向业务.png)\n\n- 纵向业务拆分如下所示\n纵向拆分业务中，一次视图上只有一个微前端，每个团队只开发自己的业务规则\n![](/img/micro-app/micro-纵向业务.png)\n\n\n### 微前端组合\n微前端组合分为\n- 客户端组合\n- 边缘侧组合\n- 服务端组合\n\n目前根据业务选择自己所需的组合方案，目前一般会选择客户端组合，方式客户端组合方式，即通过一个APP shell 通过URL来加载不同微前端，当前开源的技术站有如下几种\n1. SPA\n2. qiankun\n3. micro-app\n当前也可以直接通过Iframe 加载实现\n\n### 微前端路由\n微前端路由两种组合方式\n- 服务端路由\n- 边缘侧路由\n- 客户端路由\n\n如果技术站上处理使用SPA这种技术站，建议通过客户端进行路由组合，通过客户端路由组合时，在基座中处理路由，即可通过配置等操作实现复杂路由操作。\n\n### 微前端通信\n理论上当业务独立时，每个微前端业务独立，不需要和其他微前端通信，在实际业务中，每个微前端确实需要根据业务进行通信。通信原则是，每个微前端不知道其他微前端的存在，否则违反的独立部署的原则。\n\n通信方式可以采用如下两种\n- 全局事件总线\n在每一个微前端中注入事件总线，每个微前端只定义自己关心的事件信息\n![](/img/micro-app/micro-纵向业务.png)\n\n- 通过自定义事件\n使用自定义事件的好处是可以将通信逻辑封装在各个微前端内部，使得各个微前端之间的通信更加独立和可控。\n```javascript\n// 通过自定义事件\n// 创建一个自定义事件\nconst customEvent = new CustomEvent('myCustomEvent', {\n  detail: {\n    message: 'Hello from custom event!'\n  }\n});\n\n// 监听自定义事件\ndocument.addEventListener('myCustomEvent', function(event) {\n  console.log(event.detail.message);\n});\n\n// 触发自定义事件\ndocument.dispatchEvent(customEvent);\n```\n```javascript\n// 通过自定义事件\n// 创建一个自定义事件\nconst customEvent = new CustomEvent('myCustomEvent', {\n  detail: {\n    message: 'Hello from custom event!'\n  }\n});\n\n// 监听自定义事件\ndocument.addEventListener('myCustomEvent', function(event) {\n  console.log(event.detail.message);\n});\n\n// 触发自定义事件\ndocument.dispatchEvent(customEvent);\n```\n\n\n\n\n\n\n\n\n\n","slug":"micro-web/micro-frontend-1","published":1,"updated":"2024-08-27T02:03:24.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nbz000yjcskdva35qmz","content":"<p>确定启用微前端处理公司业务时，通过微前端 <strong>4个关键性决策</strong> 考虑设计<br>根据微前端架构决策：</p>\n<ul>\n<li>微前端在架构中的定义</li>\n<li>微前端的组合</li>\n<li>微前端的路由</li>\n<li>微前端之间的通信</li>\n</ul>\n<h3 id=\"定义微前端\"><a href=\"#定义微前端\" class=\"headerlink\" title=\"定义微前端\"></a>定义微前端</h3><p>首先我们可以根据自身业务，判断前端业务试图是，横向拆分，还是纵向拆分。</p>\n<ul>\n<li><p>横向业务如下所示<br>业务在横向拆分时，一个视图上有多个微前端，这些组成部分可以由不同团队开发<br><img src=\"/img/micro-app/micro-%E6%A8%AA%E5%90%91%E4%B8%9A%E5%8A%A1.png\"></p>\n</li>\n<li><p>纵向业务拆分如下所示<br>纵向拆分业务中，一次视图上只有一个微前端，每个团队只开发自己的业务规则<br><img src=\"/img/micro-app/micro-%E7%BA%B5%E5%90%91%E4%B8%9A%E5%8A%A1.png\"></p>\n</li>\n</ul>\n<h3 id=\"微前端组合\"><a href=\"#微前端组合\" class=\"headerlink\" title=\"微前端组合\"></a>微前端组合</h3><p>微前端组合分为</p>\n<ul>\n<li>客户端组合</li>\n<li>边缘侧组合</li>\n<li>服务端组合</li>\n</ul>\n<p>目前根据业务选择自己所需的组合方案，目前一般会选择客户端组合，方式客户端组合方式，即通过一个APP shell 通过URL来加载不同微前端，当前开源的技术站有如下几种</p>\n<ol>\n<li>SPA</li>\n<li>qiankun</li>\n<li>micro-app<br>当前也可以直接通过Iframe 加载实现</li>\n</ol>\n<h3 id=\"微前端路由\"><a href=\"#微前端路由\" class=\"headerlink\" title=\"微前端路由\"></a>微前端路由</h3><p>微前端路由两种组合方式</p>\n<ul>\n<li>服务端路由</li>\n<li>边缘侧路由</li>\n<li>客户端路由</li>\n</ul>\n<p>如果技术站上处理使用SPA这种技术站，建议通过客户端进行路由组合，通过客户端路由组合时，在基座中处理路由，即可通过配置等操作实现复杂路由操作。</p>\n<h3 id=\"微前端通信\"><a href=\"#微前端通信\" class=\"headerlink\" title=\"微前端通信\"></a>微前端通信</h3><p>理论上当业务独立时，每个微前端业务独立，不需要和其他微前端通信，在实际业务中，每个微前端确实需要根据业务进行通信。通信原则是，每个微前端不知道其他微前端的存在，否则违反的独立部署的原则。</p>\n<p>通信方式可以采用如下两种</p>\n<ul>\n<li><p>全局事件总线<br>在每一个微前端中注入事件总线，每个微前端只定义自己关心的事件信息<br><img src=\"/img/micro-app/micro-%E7%BA%B5%E5%90%91%E4%B8%9A%E5%8A%A1.png\"></p>\n</li>\n<li><p>通过自定义事件<br>使用自定义事件的好处是可以将通信逻辑封装在各个微前端内部，使得各个微前端之间的通信更加独立和可控。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 通过自定义事件</span><br><span class=\"hljs-comment\">// 创建一个自定义事件</span><br><span class=\"hljs-keyword\">const</span> customEvent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomEvent</span>(<span class=\"hljs-string\">&#x27;myCustomEvent&#x27;</span>, &#123;<br>  <span class=\"hljs-attr\">detail</span>: &#123;<br>    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello from custom event!&#x27;</span><br>  &#125;<br>&#125;);<br><br><span class=\"hljs-comment\">// 监听自定义事件</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;myCustomEvent&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(event.<span class=\"hljs-property\">detail</span>.<span class=\"hljs-property\">message</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">// 触发自定义事件</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">dispatchEvent</span>(customEvent);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 通过自定义事件</span><br><span class=\"hljs-comment\">// 创建一个自定义事件</span><br><span class=\"hljs-keyword\">const</span> customEvent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomEvent</span>(<span class=\"hljs-string\">&#x27;myCustomEvent&#x27;</span>, &#123;<br>  <span class=\"hljs-attr\">detail</span>: &#123;<br>    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello from custom event!&#x27;</span><br>  &#125;<br>&#125;);<br><br><span class=\"hljs-comment\">// 监听自定义事件</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;myCustomEvent&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(event.<span class=\"hljs-property\">detail</span>.<span class=\"hljs-property\">message</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">// 触发自定义事件</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">dispatchEvent</span>(customEvent);<br></code></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>确定启用微前端处理公司业务时，通过微前端 <strong>4个关键性决策</strong> 考虑设计<br>根据微前端架构决策：</p>\n<ul>\n<li>微前端在架构中的定义</li>\n<li>微前端的组合</li>\n<li>微前端的路由</li>\n<li>微前端之间的通信</li>\n</ul>\n<h3 id=\"定义微前端\"><a href=\"#定义微前端\" class=\"headerlink\" title=\"定义微前端\"></a>定义微前端</h3><p>首先我们可以根据自身业务，判断前端业务试图是，横向拆分，还是纵向拆分。</p>\n<ul>\n<li><p>横向业务如下所示<br>业务在横向拆分时，一个视图上有多个微前端，这些组成部分可以由不同团队开发<br><img src=\"/img/micro-app/micro-%E6%A8%AA%E5%90%91%E4%B8%9A%E5%8A%A1.png\"></p>\n</li>\n<li><p>纵向业务拆分如下所示<br>纵向拆分业务中，一次视图上只有一个微前端，每个团队只开发自己的业务规则<br><img src=\"/img/micro-app/micro-%E7%BA%B5%E5%90%91%E4%B8%9A%E5%8A%A1.png\"></p>\n</li>\n</ul>\n<h3 id=\"微前端组合\"><a href=\"#微前端组合\" class=\"headerlink\" title=\"微前端组合\"></a>微前端组合</h3><p>微前端组合分为</p>\n<ul>\n<li>客户端组合</li>\n<li>边缘侧组合</li>\n<li>服务端组合</li>\n</ul>\n<p>目前根据业务选择自己所需的组合方案，目前一般会选择客户端组合，方式客户端组合方式，即通过一个APP shell 通过URL来加载不同微前端，当前开源的技术站有如下几种</p>\n<ol>\n<li>SPA</li>\n<li>qiankun</li>\n<li>micro-app<br>当前也可以直接通过Iframe 加载实现</li>\n</ol>\n<h3 id=\"微前端路由\"><a href=\"#微前端路由\" class=\"headerlink\" title=\"微前端路由\"></a>微前端路由</h3><p>微前端路由两种组合方式</p>\n<ul>\n<li>服务端路由</li>\n<li>边缘侧路由</li>\n<li>客户端路由</li>\n</ul>\n<p>如果技术站上处理使用SPA这种技术站，建议通过客户端进行路由组合，通过客户端路由组合时，在基座中处理路由，即可通过配置等操作实现复杂路由操作。</p>\n<h3 id=\"微前端通信\"><a href=\"#微前端通信\" class=\"headerlink\" title=\"微前端通信\"></a>微前端通信</h3><p>理论上当业务独立时，每个微前端业务独立，不需要和其他微前端通信，在实际业务中，每个微前端确实需要根据业务进行通信。通信原则是，每个微前端不知道其他微前端的存在，否则违反的独立部署的原则。</p>\n<p>通信方式可以采用如下两种</p>\n<ul>\n<li><p>全局事件总线<br>在每一个微前端中注入事件总线，每个微前端只定义自己关心的事件信息<br><img src=\"/img/micro-app/micro-%E7%BA%B5%E5%90%91%E4%B8%9A%E5%8A%A1.png\"></p>\n</li>\n<li><p>通过自定义事件<br>使用自定义事件的好处是可以将通信逻辑封装在各个微前端内部，使得各个微前端之间的通信更加独立和可控。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 通过自定义事件</span><br><span class=\"hljs-comment\">// 创建一个自定义事件</span><br><span class=\"hljs-keyword\">const</span> customEvent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomEvent</span>(<span class=\"hljs-string\">&#x27;myCustomEvent&#x27;</span>, &#123;<br>  <span class=\"hljs-attr\">detail</span>: &#123;<br>    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello from custom event!&#x27;</span><br>  &#125;<br>&#125;);<br><br><span class=\"hljs-comment\">// 监听自定义事件</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;myCustomEvent&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(event.<span class=\"hljs-property\">detail</span>.<span class=\"hljs-property\">message</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">// 触发自定义事件</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">dispatchEvent</span>(customEvent);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 通过自定义事件</span><br><span class=\"hljs-comment\">// 创建一个自定义事件</span><br><span class=\"hljs-keyword\">const</span> customEvent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomEvent</span>(<span class=\"hljs-string\">&#x27;myCustomEvent&#x27;</span>, &#123;<br>  <span class=\"hljs-attr\">detail</span>: &#123;<br>    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello from custom event!&#x27;</span><br>  &#125;<br>&#125;);<br><br><span class=\"hljs-comment\">// 监听自定义事件</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;myCustomEvent&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(event.<span class=\"hljs-property\">detail</span>.<span class=\"hljs-property\">message</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">// 触发自定义事件</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">dispatchEvent</span>(customEvent);<br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"micro-editor-python-lsp","date":"2023-09-16T01:41:30.000Z","_content":"\nMAC 环境\n\n# 安装python 环境\n## 安装 pyenv-virtualenv\n使用 Homebrew 安装\n```bash\nbrew install pyenv-virtualenv\n```\n\n## 创建隔离的工作环境\n```\npyenv virtualenv (python-version) (workspace-name)\n```\n## 激活环境：\n```\npyenv activate (workspace-name)\n```\n## 退出环境：\n```\npyenv deactivate\n```\n\n#安装python \n\n\n# 参考资料\n[JSON-RPC](http://wiki.geekdream.com/Specification/json-rpc_2.0.html#41)\n[teaching-the-language-server-protocol-to-microsofts-monaco-editor](https://www.typefox.io/blog/teaching-the-language-server-protocol-to-microsofts-monaco-editor)","source":"_posts/python-lsp/python-lsp.md","raw":"---\ntitle: micro-editor-python-lsp\ndate: 2023-09-16 09:41:30\ntags: python\ncategory: python代码编辑器\n---\n\nMAC 环境\n\n# 安装python 环境\n## 安装 pyenv-virtualenv\n使用 Homebrew 安装\n```bash\nbrew install pyenv-virtualenv\n```\n\n## 创建隔离的工作环境\n```\npyenv virtualenv (python-version) (workspace-name)\n```\n## 激活环境：\n```\npyenv activate (workspace-name)\n```\n## 退出环境：\n```\npyenv deactivate\n```\n\n#安装python \n\n\n# 参考资料\n[JSON-RPC](http://wiki.geekdream.com/Specification/json-rpc_2.0.html#41)\n[teaching-the-language-server-protocol-to-microsofts-monaco-editor](https://www.typefox.io/blog/teaching-the-language-server-protocol-to-microsofts-monaco-editor)","slug":"python-lsp/python-lsp","published":1,"updated":"2023-11-28T14:22:27.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nc00010jcskcg998eng","content":"<p>MAC 环境</p>\n<h1 id=\"安装python-环境\"><a href=\"#安装python-环境\" class=\"headerlink\" title=\"安装python 环境\"></a>安装python 环境</h1><h2 id=\"安装-pyenv-virtualenv\"><a href=\"#安装-pyenv-virtualenv\" class=\"headerlink\" title=\"安装 pyenv-virtualenv\"></a>安装 pyenv-virtualenv</h2><p>使用 Homebrew 安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">brew install pyenv-virtualenv<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建隔离的工作环境\"><a href=\"#创建隔离的工作环境\" class=\"headerlink\" title=\"创建隔离的工作环境\"></a>创建隔离的工作环境</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">pyenv virtualenv (<span class=\"hljs-name\">python-version</span>) (<span class=\"hljs-name\">workspace-name</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"激活环境：\"><a href=\"#激活环境：\" class=\"headerlink\" title=\"激活环境：\"></a>激活环境：</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">pyenv <span class=\"hljs-built_in\">activate</span> (workspace-<span class=\"hljs-built_in\">name</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"退出环境：\"><a href=\"#退出环境：\" class=\"headerlink\" title=\"退出环境：\"></a>退出环境：</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">pyenv deactivate</span><br></code></pre></td></tr></table></figure>\n\n<p>#安装python </p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://wiki.geekdream.com/Specification/json-rpc_2.0.html#41\">JSON-RPC</a><br><a href=\"https://www.typefox.io/blog/teaching-the-language-server-protocol-to-microsofts-monaco-editor\">teaching-the-language-server-protocol-to-microsofts-monaco-editor</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>MAC 环境</p>\n<h1 id=\"安装python-环境\"><a href=\"#安装python-环境\" class=\"headerlink\" title=\"安装python 环境\"></a>安装python 环境</h1><h2 id=\"安装-pyenv-virtualenv\"><a href=\"#安装-pyenv-virtualenv\" class=\"headerlink\" title=\"安装 pyenv-virtualenv\"></a>安装 pyenv-virtualenv</h2><p>使用 Homebrew 安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">brew install pyenv-virtualenv<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建隔离的工作环境\"><a href=\"#创建隔离的工作环境\" class=\"headerlink\" title=\"创建隔离的工作环境\"></a>创建隔离的工作环境</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">pyenv virtualenv (<span class=\"hljs-name\">python-version</span>) (<span class=\"hljs-name\">workspace-name</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"激活环境：\"><a href=\"#激活环境：\" class=\"headerlink\" title=\"激活环境：\"></a>激活环境：</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">pyenv <span class=\"hljs-built_in\">activate</span> (workspace-<span class=\"hljs-built_in\">name</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"退出环境：\"><a href=\"#退出环境：\" class=\"headerlink\" title=\"退出环境：\"></a>退出环境：</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">pyenv deactivate</span><br></code></pre></td></tr></table></figure>\n\n<p>#安装python </p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://wiki.geekdream.com/Specification/json-rpc_2.0.html#41\">JSON-RPC</a><br><a href=\"https://www.typefox.io/blog/teaching-the-language-server-protocol-to-microsofts-monaco-editor\">teaching-the-language-server-protocol-to-microsofts-monaco-editor</a></p>\n"},{"title":"svg 动画","date":"2023-09-10T02:38:39.000Z","_content":"\n# svg 动画\n[动画参考资料链接链接](https://css-tricks.com/guide-svg-animations-smil/) https://css-tricks.com/guide-svg-animations-smil/\n\n## SVG dasharray \nstroke-dasharray 属性可以设置线段绘制时的间隔\nstroke-dasharray 数值型值 可以配置2个，第二个值缺省\n- stroke-dasharray=\"4\" 代表dash 值和offset间距保持一直\n- stroke-dasharray=\"4 5\"  dash宽度为4，每一块间距为5\n\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n</svg>\n\n```\n\n## [stroke-dashoffset](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset)\nstroke-dashoffset 指定了 dash 模式到路径开始的距离\n\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-dashoffset=\"2\" stroke-width=\"6\"></path>\n</svg>\n\n## 结合dasharray 与 stroke-dashoffset 让路径动起来\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n    \n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-dashoffset=\"2\" stroke-width=\"6\">\n      <animate attributeName=\"stroke-dashoffset\" from=\"0\" to=\"-20\" dur=\"10\" fill=\"freeze\" repeatCount=\"indefinite\" easing=\"linear\"></animate>\n    </path>\n</svg>\n\n```\n![](/img/svg/svg-1.gif)\n\n## 模拟管道水流动动画\n该动画需要通过 SVGGeometryElement的 getTotalLength 获取全部路径，通过动画设置stroke-dashoffset偏移\n```vue\n<template>\n   <svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n     <path\n        ref=\"pathEl2\"\n        fill=\"none\"\n        :stroke-dasharray=\"dashArray\"\n        stroke=\"red\"\n        stroke-width=\"6\"\n            d=\"M 10,30\n            A 20,20 0,0,1 50,30\n            A 20,20 0,0,1 90,30\n            Q 90,60 50,90\n            Q 10,60 10,30 z\" >\n            <!-- <animate\n                attributeName=\"dash\"\n                values=\"0;5;0\"\n                dur=\"10s\"\n                repeatCount=\"indefinite\" /> -->\n            </path>\n\n     <path\n        ref=\"pathEl\"\n        fill=\"none\"\n        :stroke-dasharray=\"dashArray\"\n        :stroke-dashoffset=\"strokeDashoffset\"\n        stroke-width=\"6\"\n        stroke=\"green\"\n            d=\"M 10,30\n            A 20,20 0,0,1 50,30\n            A 20,20 0,0,1 90,30\n            Q 90,60 50,90\n            Q 10,60 10,30 z\" >\n            <animate\n                attributeName=\"stroke-dashoffset\"\n                from=\"275\"\n                to=\"0\"\n                dur=\"4s\"\n                repeatCount=\"indefinite\" />\n            </path> \n</svg>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue';\n\nconst pathEl = ref<SVGGeometryElement>()\n\nconst dashArray = ref(275)\nconst strokeDashoffset = ref(-275)\n\nonMounted(() => {\n    const totalLength = pathEl.value?.getTotalLength()\n    console.log(totalLength)\n\n})\n\n</script>\n\n<style scoped>\n\n</style>\n\n```\n运行效果预览\n![](/img/svg/svg-path-wather.gif)\n\n其他\nTODO","source":"_posts/svg-animate/svg-animate.md","raw":"---\ntitle: svg 动画\ndate: 2023-09-10 10:38:39\ntags: svg\ncategory: SVG\n---\n\n# svg 动画\n[动画参考资料链接链接](https://css-tricks.com/guide-svg-animations-smil/) https://css-tricks.com/guide-svg-animations-smil/\n\n## SVG dasharray \nstroke-dasharray 属性可以设置线段绘制时的间隔\nstroke-dasharray 数值型值 可以配置2个，第二个值缺省\n- stroke-dasharray=\"4\" 代表dash 值和offset间距保持一直\n- stroke-dasharray=\"4 5\"  dash宽度为4，每一块间距为5\n\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n</svg>\n\n```\n\n## [stroke-dashoffset](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset)\nstroke-dashoffset 指定了 dash 模式到路径开始的距离\n\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-dashoffset=\"2\" stroke-width=\"6\"></path>\n</svg>\n\n## 结合dasharray 与 stroke-dashoffset 让路径动起来\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n    \n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-dashoffset=\"2\" stroke-width=\"6\">\n      <animate attributeName=\"stroke-dashoffset\" from=\"0\" to=\"-20\" dur=\"10\" fill=\"freeze\" repeatCount=\"indefinite\" easing=\"linear\"></animate>\n    </path>\n</svg>\n\n```\n![](/img/svg/svg-1.gif)\n\n## 模拟管道水流动动画\n该动画需要通过 SVGGeometryElement的 getTotalLength 获取全部路径，通过动画设置stroke-dashoffset偏移\n```vue\n<template>\n   <svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n     <path\n        ref=\"pathEl2\"\n        fill=\"none\"\n        :stroke-dasharray=\"dashArray\"\n        stroke=\"red\"\n        stroke-width=\"6\"\n            d=\"M 10,30\n            A 20,20 0,0,1 50,30\n            A 20,20 0,0,1 90,30\n            Q 90,60 50,90\n            Q 10,60 10,30 z\" >\n            <!-- <animate\n                attributeName=\"dash\"\n                values=\"0;5;0\"\n                dur=\"10s\"\n                repeatCount=\"indefinite\" /> -->\n            </path>\n\n     <path\n        ref=\"pathEl\"\n        fill=\"none\"\n        :stroke-dasharray=\"dashArray\"\n        :stroke-dashoffset=\"strokeDashoffset\"\n        stroke-width=\"6\"\n        stroke=\"green\"\n            d=\"M 10,30\n            A 20,20 0,0,1 50,30\n            A 20,20 0,0,1 90,30\n            Q 90,60 50,90\n            Q 10,60 10,30 z\" >\n            <animate\n                attributeName=\"stroke-dashoffset\"\n                from=\"275\"\n                to=\"0\"\n                dur=\"4s\"\n                repeatCount=\"indefinite\" />\n            </path> \n</svg>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue';\n\nconst pathEl = ref<SVGGeometryElement>()\n\nconst dashArray = ref(275)\nconst strokeDashoffset = ref(-275)\n\nonMounted(() => {\n    const totalLength = pathEl.value?.getTotalLength()\n    console.log(totalLength)\n\n})\n\n</script>\n\n<style scoped>\n\n</style>\n\n```\n运行效果预览\n![](/img/svg/svg-path-wather.gif)\n\n其他\nTODO","slug":"svg-animate/svg-animate","published":1,"updated":"2023-11-28T14:23:58.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nc00012jcsk3hb5aszm","content":"<h1 id=\"svg-动画\"><a href=\"#svg-动画\" class=\"headerlink\" title=\"svg 动画\"></a>svg 动画</h1><p><a href=\"https://css-tricks.com/guide-svg-animations-smil/\">动画参考资料链接链接</a> <a href=\"https://css-tricks.com/guide-svg-animations-smil/\">https://css-tricks.com/guide-svg-animations-smil/</a></p>\n<h2 id=\"SVG-dasharray\"><a href=\"#SVG-dasharray\" class=\"headerlink\" title=\"SVG dasharray\"></a>SVG dasharray</h2><p>stroke-dasharray 属性可以设置线段绘制时的间隔<br>stroke-dasharray 数值型值 可以配置2个，第二个值缺省</p>\n<ul>\n<li>stroke-dasharray&#x3D;”4” 代表dash 值和offset间距保持一直</li>\n<li>stroke-dasharray&#x3D;”4 5”  dash宽度为4，每一块间距为5</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"stroke-dashoffset\"><a href=\"#stroke-dashoffset\" class=\"headerlink\" title=\"stroke-dashoffset\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset\">stroke-dashoffset</a></h2><p>stroke-dashoffset 指定了 dash 模式到路径开始的距离</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-dashoffset</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br>## 结合dasharray 与 stroke-dashoffset 让路径动起来<br>```html<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-dashoffset</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">animate</span> <span class=\"hljs-attr\">attributeName</span>=<span class=\"hljs-string\">&quot;stroke-dashoffset&quot;</span> <span class=\"hljs-attr\">from</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;-20&quot;</span> <span class=\"hljs-attr\">dur</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;freeze&quot;</span> <span class=\"hljs-attr\">repeatCount</span>=<span class=\"hljs-string\">&quot;indefinite&quot;</span> <span class=\"hljs-attr\">easing</span>=<span class=\"hljs-string\">&quot;linear&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">animate</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/svg/svg-1.gif\"></p>\n<h2 id=\"模拟管道水流动动画\"><a href=\"#模拟管道水流动动画\" class=\"headerlink\" title=\"模拟管道水流动动画\"></a>模拟管道水流动动画</h2><p>该动画需要通过 SVGGeometryElement的 getTotalLength 获取全部路径，通过动画设置stroke-dashoffset偏移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>   &lt;svg version=&quot;1.1&quot;<br>     baseProfile=&quot;full&quot;<br>     width=&quot;100%&quot; height=&quot;100%&quot;<br>     xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;<br>     &lt;path<br>        ref=&quot;pathEl2&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        stroke=&quot;red&quot;<br>        stroke-width=&quot;6&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;!-- &lt;animate<br>                attributeName=&quot;dash&quot;<br>                values=&quot;0;5;0&quot;<br>                dur=&quot;10s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt; --&gt;<br>            &lt;/path&gt;<br><br>     &lt;path<br>        ref=&quot;pathEl&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        :stroke-dashoffset=&quot;strokeDashoffset&quot;<br>        stroke-width=&quot;6&quot;<br>        stroke=&quot;green&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;animate<br>                attributeName=&quot;stroke-dashoffset&quot;<br>                from=&quot;275&quot;<br>                to=&quot;0&quot;<br>                dur=&quot;4s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt;<br>            &lt;/path&gt; <br>&lt;/svg&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;<br><br>const pathEl = ref&lt;SVGGeometryElement&gt;()<br><br>const dashArray = ref(275)<br>const strokeDashoffset = ref(-275)<br><br>onMounted(() =&gt; &#123;<br>    const totalLength = pathEl.value?.getTotalLength()<br>    console.log(totalLength)<br><br>&#125;)<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>\n<p>运行效果预览<br><img src=\"/img/svg/svg-path-wather.gif\"></p>\n<p>其他<br>TODO</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"svg-动画\"><a href=\"#svg-动画\" class=\"headerlink\" title=\"svg 动画\"></a>svg 动画</h1><p><a href=\"https://css-tricks.com/guide-svg-animations-smil/\">动画参考资料链接链接</a> <a href=\"https://css-tricks.com/guide-svg-animations-smil/\">https://css-tricks.com/guide-svg-animations-smil/</a></p>\n<h2 id=\"SVG-dasharray\"><a href=\"#SVG-dasharray\" class=\"headerlink\" title=\"SVG dasharray\"></a>SVG dasharray</h2><p>stroke-dasharray 属性可以设置线段绘制时的间隔<br>stroke-dasharray 数值型值 可以配置2个，第二个值缺省</p>\n<ul>\n<li>stroke-dasharray&#x3D;”4” 代表dash 值和offset间距保持一直</li>\n<li>stroke-dasharray&#x3D;”4 5”  dash宽度为4，每一块间距为5</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"stroke-dashoffset\"><a href=\"#stroke-dashoffset\" class=\"headerlink\" title=\"stroke-dashoffset\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset\">stroke-dashoffset</a></h2><p>stroke-dashoffset 指定了 dash 模式到路径开始的距离</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-dashoffset</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br>## 结合dasharray 与 stroke-dashoffset 让路径动起来<br>```html<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-dashoffset</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">animate</span> <span class=\"hljs-attr\">attributeName</span>=<span class=\"hljs-string\">&quot;stroke-dashoffset&quot;</span> <span class=\"hljs-attr\">from</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;-20&quot;</span> <span class=\"hljs-attr\">dur</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;freeze&quot;</span> <span class=\"hljs-attr\">repeatCount</span>=<span class=\"hljs-string\">&quot;indefinite&quot;</span> <span class=\"hljs-attr\">easing</span>=<span class=\"hljs-string\">&quot;linear&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">animate</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/svg/svg-1.gif\"></p>\n<h2 id=\"模拟管道水流动动画\"><a href=\"#模拟管道水流动动画\" class=\"headerlink\" title=\"模拟管道水流动动画\"></a>模拟管道水流动动画</h2><p>该动画需要通过 SVGGeometryElement的 getTotalLength 获取全部路径，通过动画设置stroke-dashoffset偏移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>   &lt;svg version=&quot;1.1&quot;<br>     baseProfile=&quot;full&quot;<br>     width=&quot;100%&quot; height=&quot;100%&quot;<br>     xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;<br>     &lt;path<br>        ref=&quot;pathEl2&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        stroke=&quot;red&quot;<br>        stroke-width=&quot;6&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;!-- &lt;animate<br>                attributeName=&quot;dash&quot;<br>                values=&quot;0;5;0&quot;<br>                dur=&quot;10s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt; --&gt;<br>            &lt;/path&gt;<br><br>     &lt;path<br>        ref=&quot;pathEl&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        :stroke-dashoffset=&quot;strokeDashoffset&quot;<br>        stroke-width=&quot;6&quot;<br>        stroke=&quot;green&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;animate<br>                attributeName=&quot;stroke-dashoffset&quot;<br>                from=&quot;275&quot;<br>                to=&quot;0&quot;<br>                dur=&quot;4s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt;<br>            &lt;/path&gt; <br>&lt;/svg&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;<br><br>const pathEl = ref&lt;SVGGeometryElement&gt;()<br><br>const dashArray = ref(275)<br>const strokeDashoffset = ref(-275)<br><br>onMounted(() =&gt; &#123;<br>    const totalLength = pathEl.value?.getTotalLength()<br>    console.log(totalLength)<br><br>&#125;)<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>\n<p>运行效果预览<br><img src=\"/img/svg/svg-path-wather.gif\"></p>\n<p>其他<br>TODO</p>\n"},{"title":"svg 动画","date":"2023-09-10T02:38:39.000Z","_content":"\n# svg 动画\n[动画参考资料链接链接](https://css-tricks.com/guide-svg-animations-smil/) https://css-tricks.com/guide-svg-animations-smil/\n\n## SVG dasharray \nstroke-dasharray 属性可以设置线段绘制时的间隔\nstroke-dasharray 数值型值 可以配置2个，第二个值缺省\n- stroke-dasharray=\"4\" 代表dash 值和offset间距保持一直\n- stroke-dasharray=\"4 5\"  dash宽度为4，每一块间距为5\n\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n</svg>\n\n```\n\n## [stroke-dashoffset](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset)\nstroke-dashoffset 指定了 dash 模式到路径开始的距离\n\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-dashoffset=\"2\" stroke-width=\"6\"></path>\n</svg>\n\n## 结合dasharray 与 stroke-dashoffset 让路径动起来\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n    \n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-dashoffset=\"2\" stroke-width=\"6\">\n      <animate attributeName=\"stroke-dashoffset\" from=\"0\" to=\"-20\" dur=\"10\" fill=\"freeze\" repeatCount=\"indefinite\" easing=\"linear\"></animate>\n    </path>\n</svg>\n\n```\n![](/img/svg/svg-1.gif)\n\n## 模拟管道水流动动画\n该动画需要通过 SVGGeometryElement的 getTotalLength 获取全部路径，通过动画设置stroke-dashoffset偏移\n```vue\n<template>\n   <svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n     <path\n        ref=\"pathEl2\"\n        fill=\"none\"\n        :stroke-dasharray=\"dashArray\"\n        stroke=\"red\"\n        stroke-width=\"6\"\n            d=\"M 10,30\n            A 20,20 0,0,1 50,30\n            A 20,20 0,0,1 90,30\n            Q 90,60 50,90\n            Q 10,60 10,30 z\" >\n            <!-- <animate\n                attributeName=\"dash\"\n                values=\"0;5;0\"\n                dur=\"10s\"\n                repeatCount=\"indefinite\" /> -->\n            </path>\n\n     <path\n        ref=\"pathEl\"\n        fill=\"none\"\n        :stroke-dasharray=\"dashArray\"\n        :stroke-dashoffset=\"strokeDashoffset\"\n        stroke-width=\"6\"\n        stroke=\"green\"\n            d=\"M 10,30\n            A 20,20 0,0,1 50,30\n            A 20,20 0,0,1 90,30\n            Q 90,60 50,90\n            Q 10,60 10,30 z\" >\n            <animate\n                attributeName=\"stroke-dashoffset\"\n                from=\"275\"\n                to=\"0\"\n                dur=\"4s\"\n                repeatCount=\"indefinite\" />\n            </path> \n</svg>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue';\n\nconst pathEl = ref<SVGGeometryElement>()\n\nconst dashArray = ref(275)\nconst strokeDashoffset = ref(-275)\n\nonMounted(() => {\n    const totalLength = pathEl.value?.getTotalLength()\n    console.log(totalLength)\n\n})\n\n</script>\n\n<style scoped>\n\n</style>\n\n```\n运行效果预览\n![](/img/svg/svg-path-wather.gif)\n\n其他\nTODO","source":"_posts/svg/svg-animate.md","raw":"---\ntitle: svg 动画\ndate: 2023-09-10 10:38:39\ntags: svg\ncategory: SVG\n---\n\n# svg 动画\n[动画参考资料链接链接](https://css-tricks.com/guide-svg-animations-smil/) https://css-tricks.com/guide-svg-animations-smil/\n\n## SVG dasharray \nstroke-dasharray 属性可以设置线段绘制时的间隔\nstroke-dasharray 数值型值 可以配置2个，第二个值缺省\n- stroke-dasharray=\"4\" 代表dash 值和offset间距保持一直\n- stroke-dasharray=\"4 5\"  dash宽度为4，每一块间距为5\n\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n</svg>\n\n```\n\n## [stroke-dashoffset](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset)\nstroke-dashoffset 指定了 dash 模式到路径开始的距离\n\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-dashoffset=\"2\" stroke-width=\"6\"></path>\n</svg>\n\n## 结合dasharray 与 stroke-dashoffset 让路径动起来\n```html\n<svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0, 200, L200, 200, L400, 200\" stroke=\"green\" stroke-width=\"6\"></path>\n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-width=\"6\"></path>\n    \n    <path d=\"M0, 250, L200, 250, L400, 250\" stroke=\"green\" stroke-dasharray=\"2\" stroke-dashoffset=\"2\" stroke-width=\"6\">\n      <animate attributeName=\"stroke-dashoffset\" from=\"0\" to=\"-20\" dur=\"10\" fill=\"freeze\" repeatCount=\"indefinite\" easing=\"linear\"></animate>\n    </path>\n</svg>\n\n```\n![](/img/svg/svg-1.gif)\n\n## 模拟管道水流动动画\n该动画需要通过 SVGGeometryElement的 getTotalLength 获取全部路径，通过动画设置stroke-dashoffset偏移\n```vue\n<template>\n   <svg version=\"1.1\"\n     baseProfile=\"full\"\n     width=\"100%\" height=\"100%\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n     <path\n        ref=\"pathEl2\"\n        fill=\"none\"\n        :stroke-dasharray=\"dashArray\"\n        stroke=\"red\"\n        stroke-width=\"6\"\n            d=\"M 10,30\n            A 20,20 0,0,1 50,30\n            A 20,20 0,0,1 90,30\n            Q 90,60 50,90\n            Q 10,60 10,30 z\" >\n            <!-- <animate\n                attributeName=\"dash\"\n                values=\"0;5;0\"\n                dur=\"10s\"\n                repeatCount=\"indefinite\" /> -->\n            </path>\n\n     <path\n        ref=\"pathEl\"\n        fill=\"none\"\n        :stroke-dasharray=\"dashArray\"\n        :stroke-dashoffset=\"strokeDashoffset\"\n        stroke-width=\"6\"\n        stroke=\"green\"\n            d=\"M 10,30\n            A 20,20 0,0,1 50,30\n            A 20,20 0,0,1 90,30\n            Q 90,60 50,90\n            Q 10,60 10,30 z\" >\n            <animate\n                attributeName=\"stroke-dashoffset\"\n                from=\"275\"\n                to=\"0\"\n                dur=\"4s\"\n                repeatCount=\"indefinite\" />\n            </path> \n</svg>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue';\n\nconst pathEl = ref<SVGGeometryElement>()\n\nconst dashArray = ref(275)\nconst strokeDashoffset = ref(-275)\n\nonMounted(() => {\n    const totalLength = pathEl.value?.getTotalLength()\n    console.log(totalLength)\n\n})\n\n</script>\n\n<style scoped>\n\n</style>\n\n```\n运行效果预览\n![](/img/svg/svg-path-wather.gif)\n\n其他\nTODO","slug":"svg/svg-animate","published":1,"updated":"2023-11-28T14:24:47.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nc10015jcskepep8v8b","content":"<h1 id=\"svg-动画\"><a href=\"#svg-动画\" class=\"headerlink\" title=\"svg 动画\"></a>svg 动画</h1><p><a href=\"https://css-tricks.com/guide-svg-animations-smil/\">动画参考资料链接链接</a> <a href=\"https://css-tricks.com/guide-svg-animations-smil/\">https://css-tricks.com/guide-svg-animations-smil/</a></p>\n<h2 id=\"SVG-dasharray\"><a href=\"#SVG-dasharray\" class=\"headerlink\" title=\"SVG dasharray\"></a>SVG dasharray</h2><p>stroke-dasharray 属性可以设置线段绘制时的间隔<br>stroke-dasharray 数值型值 可以配置2个，第二个值缺省</p>\n<ul>\n<li>stroke-dasharray&#x3D;”4” 代表dash 值和offset间距保持一直</li>\n<li>stroke-dasharray&#x3D;”4 5”  dash宽度为4，每一块间距为5</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"stroke-dashoffset\"><a href=\"#stroke-dashoffset\" class=\"headerlink\" title=\"stroke-dashoffset\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset\">stroke-dashoffset</a></h2><p>stroke-dashoffset 指定了 dash 模式到路径开始的距离</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-dashoffset</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br>## 结合dasharray 与 stroke-dashoffset 让路径动起来<br>```html<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-dashoffset</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">animate</span> <span class=\"hljs-attr\">attributeName</span>=<span class=\"hljs-string\">&quot;stroke-dashoffset&quot;</span> <span class=\"hljs-attr\">from</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;-20&quot;</span> <span class=\"hljs-attr\">dur</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;freeze&quot;</span> <span class=\"hljs-attr\">repeatCount</span>=<span class=\"hljs-string\">&quot;indefinite&quot;</span> <span class=\"hljs-attr\">easing</span>=<span class=\"hljs-string\">&quot;linear&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">animate</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/svg/svg-1.gif\"></p>\n<h2 id=\"模拟管道水流动动画\"><a href=\"#模拟管道水流动动画\" class=\"headerlink\" title=\"模拟管道水流动动画\"></a>模拟管道水流动动画</h2><p>该动画需要通过 SVGGeometryElement的 getTotalLength 获取全部路径，通过动画设置stroke-dashoffset偏移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>   &lt;svg version=&quot;1.1&quot;<br>     baseProfile=&quot;full&quot;<br>     width=&quot;100%&quot; height=&quot;100%&quot;<br>     xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;<br>     &lt;path<br>        ref=&quot;pathEl2&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        stroke=&quot;red&quot;<br>        stroke-width=&quot;6&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;!-- &lt;animate<br>                attributeName=&quot;dash&quot;<br>                values=&quot;0;5;0&quot;<br>                dur=&quot;10s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt; --&gt;<br>            &lt;/path&gt;<br><br>     &lt;path<br>        ref=&quot;pathEl&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        :stroke-dashoffset=&quot;strokeDashoffset&quot;<br>        stroke-width=&quot;6&quot;<br>        stroke=&quot;green&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;animate<br>                attributeName=&quot;stroke-dashoffset&quot;<br>                from=&quot;275&quot;<br>                to=&quot;0&quot;<br>                dur=&quot;4s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt;<br>            &lt;/path&gt; <br>&lt;/svg&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;<br><br>const pathEl = ref&lt;SVGGeometryElement&gt;()<br><br>const dashArray = ref(275)<br>const strokeDashoffset = ref(-275)<br><br>onMounted(() =&gt; &#123;<br>    const totalLength = pathEl.value?.getTotalLength()<br>    console.log(totalLength)<br><br>&#125;)<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>\n<p>运行效果预览<br><img src=\"/img/svg/svg-path-wather.gif\"></p>\n<p>其他<br>TODO</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"svg-动画\"><a href=\"#svg-动画\" class=\"headerlink\" title=\"svg 动画\"></a>svg 动画</h1><p><a href=\"https://css-tricks.com/guide-svg-animations-smil/\">动画参考资料链接链接</a> <a href=\"https://css-tricks.com/guide-svg-animations-smil/\">https://css-tricks.com/guide-svg-animations-smil/</a></p>\n<h2 id=\"SVG-dasharray\"><a href=\"#SVG-dasharray\" class=\"headerlink\" title=\"SVG dasharray\"></a>SVG dasharray</h2><p>stroke-dasharray 属性可以设置线段绘制时的间隔<br>stroke-dasharray 数值型值 可以配置2个，第二个值缺省</p>\n<ul>\n<li>stroke-dasharray&#x3D;”4” 代表dash 值和offset间距保持一直</li>\n<li>stroke-dasharray&#x3D;”4 5”  dash宽度为4，每一块间距为5</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"stroke-dashoffset\"><a href=\"#stroke-dashoffset\" class=\"headerlink\" title=\"stroke-dashoffset\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset\">stroke-dashoffset</a></h2><p>stroke-dashoffset 指定了 dash 模式到路径开始的距离</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-dashoffset</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br>## 结合dasharray 与 stroke-dashoffset 让路径动起来<br>```html<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.1&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">baseProfile</span>=<span class=\"hljs-string\">&quot;full&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">&quot;green&quot;</span> <span class=\"hljs-attr\">stroke-dasharray</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-dashoffset</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">stroke-width</span>=<span class=\"hljs-string\">&quot;6&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">animate</span> <span class=\"hljs-attr\">attributeName</span>=<span class=\"hljs-string\">&quot;stroke-dashoffset&quot;</span> <span class=\"hljs-attr\">from</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;-20&quot;</span> <span class=\"hljs-attr\">dur</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;freeze&quot;</span> <span class=\"hljs-attr\">repeatCount</span>=<span class=\"hljs-string\">&quot;indefinite&quot;</span> <span class=\"hljs-attr\">easing</span>=<span class=\"hljs-string\">&quot;linear&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">animate</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/svg/svg-1.gif\"></p>\n<h2 id=\"模拟管道水流动动画\"><a href=\"#模拟管道水流动动画\" class=\"headerlink\" title=\"模拟管道水流动动画\"></a>模拟管道水流动动画</h2><p>该动画需要通过 SVGGeometryElement的 getTotalLength 获取全部路径，通过动画设置stroke-dashoffset偏移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>   &lt;svg version=&quot;1.1&quot;<br>     baseProfile=&quot;full&quot;<br>     width=&quot;100%&quot; height=&quot;100%&quot;<br>     xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;<br>     &lt;path<br>        ref=&quot;pathEl2&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        stroke=&quot;red&quot;<br>        stroke-width=&quot;6&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;!-- &lt;animate<br>                attributeName=&quot;dash&quot;<br>                values=&quot;0;5;0&quot;<br>                dur=&quot;10s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt; --&gt;<br>            &lt;/path&gt;<br><br>     &lt;path<br>        ref=&quot;pathEl&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        :stroke-dashoffset=&quot;strokeDashoffset&quot;<br>        stroke-width=&quot;6&quot;<br>        stroke=&quot;green&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;animate<br>                attributeName=&quot;stroke-dashoffset&quot;<br>                from=&quot;275&quot;<br>                to=&quot;0&quot;<br>                dur=&quot;4s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt;<br>            &lt;/path&gt; <br>&lt;/svg&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;<br><br>const pathEl = ref&lt;SVGGeometryElement&gt;()<br><br>const dashArray = ref(275)<br>const strokeDashoffset = ref(-275)<br><br>onMounted(() =&gt; &#123;<br>    const totalLength = pathEl.value?.getTotalLength()<br>    console.log(totalLength)<br><br>&#125;)<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>\n<p>运行效果预览<br><img src=\"/img/svg/svg-path-wather.gif\"></p>\n<p>其他<br>TODO</p>\n"},{"title":"SVG 坐标系","date":"2023-10-09T01:22:48.000Z","_content":"\n参考资料\n- SVG：可缩放矢量图形 | MDN\n- Understanding SVG Coordinate Systems and Transformations (Part 1) — The viewport, viewBox, and prese\n- Coordinate Systems, Transformations and Units — SVG 2\n- A Guide to SVG Animations (SMIL) | CSS-Tricks\n##Svg 画布\n画布(canvs)是绘制 SVG 内容的空间或区域。从概念上讲，这块画布在两个维度(X轴, Y轴)上都是无限的。因此，SVG 可以是任意大小。然而，它是相对于称为视口(viewport)的有限区域在屏幕上渲染的。超出视口边界的 SVG 区域将被剪掉并且不可见。\n视口（viewport）\n视口是 SVG 画布的可见区域. 整个 SVG 画布或部分画布是否可见取决于该cavas的大小和preserveAspectRatio 属性的值。\n```html\n<!-- the viewport will be 800px by 600px -->\n<svg width=\"800\" height=\"600\">\n        <!-- SVG content drawn onto the SVG canvas -->\n</svg>\n```\n在 SVG 中，可以使用或不使用单位标识符来设置值。无单位值据说是使用用户单位在用户空间中指定的。如果以用户单位指定值，则假定该值等于相同数量的“px”单位。这意味着上例中的视口将渲染为 800px x 600px 视口。您还可以使用单位指定值。 SVG 中支持的长度单位标识符有：em、ex、px、pt、pc、cm、mm、in 和百分比。一旦设置了最外层 SVG 元素的宽度和高度，浏览器就会建立 __初始视口坐标系(viewport coordinate system)__ 和 __初始用户坐标系(initial user coordinate system.)__\n\n## 初始化坐标系\n初始视口坐标系是在视口上建立的坐标系，原点位于视口左上角的点(0, 0)，x轴正方向向右，y轴正方向向下，初始坐标系中的一个单位等于视口中的一个“像素”。这个坐标系类似于用CSS盒模型在HTML元素上建立的坐标系。\n初始用户坐标系是在SVG画布上建立的坐标系。该坐标系最初与视口坐标系相同 - 它的原点位于视口的左上角，正 x 轴指向右侧，正 y 轴指向下方。使用 viewBox 属性，可以修改初始用户坐标系（也称为当前坐标系或使用中的用户空间），使其不再与视口坐标系相同\n![](/img/svg/svg初始坐标系.PNG)\n\n## SVG 坐标系变换\nTransform 属性值\nTransform 属性给元素指定一个或多个变换。它采用 <transform-list> 作为值，该值被定义为变换定义列表，这些变换定义按提供的顺序应用。各个转换定义由空格或逗号分隔。对元素应用转换的示例可能如下所示：\n\nSvg 变换包含以下几种：__旋转（rotation）__、__缩放（scaling）__、__平移（translation）__ 和 __倾斜（skewing）__。 Transform 属性中使用的转换函数的工作方式与 Transform 属性中的 CSS 转换函数的工作方式类似，只是它们采用不同的参数。\n\n### 矩阵 （Matrix）\n你可以通过matrix() 方法来将一个或多个变换应用到element 上. Martix 语法如下：\n``` js \nmatrix(<a> <b> <c> <d> <e> <f>)\n\n<g transform=\"matrix(1 ,0, 0,1, 0,0)\"></g>\n```\n除特别精通数学，一般不建议使用， 更多信息可参考 [w3网址](https://www.w3.org/TR/SVG/coords.html#VectorEffectsCalculation)\n### 平移（Translation）\n想要移动一个svg 元素，可以使用 translate() 函数，语法如下：\n```js\ntranslate(<tx> [<ty>])\n```\ntranslate() 接受一个或两个值，分别指定水平和垂直移动。 tx表示沿x轴的平移值； ty 表示沿 y 轴的平移值。\nty 值是可选的；如果省略，则默认为零。 tx 和 ty 值可以以空格分隔或以逗号分隔，并且它们在函数内无需任何单位 - 它们默认为用户当前坐标系单位。\n以下示例将圆向右平移 100 个用户单位，向下平移 300 个用户单位：\n```js\n<circle cx=\"0\" cy=\"0\" r=\"100\" transform=\"translate(100 300)\" />\n```\n如果使用 translate(100, 300) （其中值以逗号分隔），则上面的示例仍然有效。\n### 缩放（Scaling）\n您可以使用scale()函数转换来放大或缩小SVG元素。缩放变换的语法是：\nscale(<sx> [<sy>])\nscale() 函数接收一个或两个值，分别指定水平和垂直缩放值。 sx表示沿x轴的缩放值，用于水平拉伸或收缩元素； sy 表示沿 y 轴的缩放值，用于垂直拉伸或收缩元素。\nsy 值是可选的；如果省略，则假定等于 sx。 sx 和 sy 值可以用空格分隔，也可以用逗号分隔，并且它们是无单位的数字。\n以下示例通过将元素缩放到原始大小的两倍来将元素的大小加倍：\n```html\n<rect width=\"150\" height=\"100\" transform=\"scale(2)\" x=\"0\" y=\"0\" />\n```\n以下代码将元素水平放大为原来2倍，垂直缩小为原来的一半：\n```html\n<rect width=\"150\" height=\"100\" transform=\"scale(2 0.5)\" x=\"0\" y=\"0\" />\n```\n如果使用scale(2, .5)（其中值以逗号分隔)，则上面的示例仍然有效。\n这里需要注意的是，当缩放 SVG 元素时，其整个当前坐标系也会缩放，导致该元素也在视口内重新定位。\n### 倾斜（Skew）\nSVG 元素也可以倾斜。通过两个函数：skewX 和 skewY实现倾斜操作。\n```js\nskewX(<skew-angle>)\nskewY(<skew-angle>)\n```\nskewX 函数指定沿 x 轴的倾斜变换； skewY 函数指定沿 y 轴的倾斜变换。\n指定的倾斜角度是无单位角度，默认为度。\n请注意，倾斜元素可能会导致元素在视口内重新定位\n### 旋转（Rotation）\n您可以使用rotate()函数旋转SVG元素。该函数的语法是：\n```js\nrotate(<rotate-angle> [<cx> <cy>])\n```\nrotate() 可设置指定点，指定角度进行旋转。与 CSS 中的旋转变换不同，您不能指定度以外的角度单位。角度值指定为无单位，默认情况下被视为度值。\n可选的 cx 和 cy 用于设置旋转中心，无单位值。如果未提供 cx 和 cy，则旋转围绕当前用户坐标系的原点\n在rotate()函数中指定旋转中心就像CSS中设置transform:rotate()和transform-origin的简写方式。由于 SVG 中的默认旋转中心是当前使用的用户坐标系的左上角，并且这可能不允许您创建所需的旋转效果，因此您最终可能会在rotate() 中指定一个新的中心。如果您知道元素在 SVG 画布中的尺寸和位置，则可以轻松地将其中心指定为旋转中心。\n以下示例围绕当前用户坐标系中位于 (50, 50) 的指定旋转中心旋转一组元素：\n```html\n<g id=\"parrot\" transform=\"rotate(45 50 50)\" x=\"0\" y=\"0\">\n        <!-- elements making up a parrot shape -->\n</g>\n```\n但是，如果你希望元素绕其中心旋转，你可能想将中心指定为 50% 50%，就像在 CSS 中所做的那样；但不幸的是，在rotate()函数内部这样做是不可能的——必须使用绝对坐标。但是，你可以结合使用 CSS 变换源属性和 CSS 变换属性来执行此操作\n### 坐标系变换\n现在我们已经涵盖了 SVG所有的变换方法 ，我们深入到SVG元素应用变换后的视觉变化。这将是SVG 变换最重要的部分。这将是它们被称为“坐标系变换”而不仅仅是“元素变换”原因。\n在这个规范中，transform 属性被定义可为元素建立新用户空间（当前坐标系）的两个属性之一 - viewBox 属于另外一个。那么这到底代表什么呢？\nThe transform attribute establishes a new user space (current coordinate system) on the element it is | applied to.\n此行为类似于应用于 HTML 元素的 CSS 转换的行为 — HTML 元素的坐标系被转换，当连续转换时通常最为明显（我们稍后会介绍）。尽管 HTML 和 SVG 转换在许多方面相似，但它们还是存在一些差异。\n主要区别在于坐标系。 HTML 元素的坐标系是建立在元素本身上的。同时，在 SVG 中，元素的坐标系最初是当前使用的坐标系或用户空间。\n当您将变换属性应用于 SVG 元素时，该元素将获得当前使用的用户坐标系的“副本”。您可以将其视为只是为转换后的元素创建一个新的“图层”，其中新图层有自己的当前用户坐标系（viewBox）的副本。\n然后，元素的新当前坐标系通过已经被元素的transfrom 指定属性变换了 ，从而导致元素本身的变换。就好像元素被绘制到变换后的坐标系中的画布上一样。\n要了解如何应用 SVG 转换，让我们从视觉部分开始。下图显示了我们将要使用的 SVG 画布。\n![](/img/svg/svg初始坐标系.png)\n\n鹦鹉和狗是我们要转换的元素（组 <g>）。\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <g id=\"dog\">\n                <!-- shapes and paths forming the dog -->\n        </g>\n</svg>\n```\n灰色坐标系是viewBox建立的画布的初始坐标系。为了简单起见，我不会更改初始坐标系 - 我使用与视口大小相同的 viewBox，如上面的代码所示。\nWhen you apply the transform attribute to an SVG element, that element gets a \"copy\" of the current user coordinate system in use.\n现在我们已经建立了画布和初始用户空间，我们将开始转换元素。我们首先将鹦鹉向左平移 150 个单位，向下平移 200 个单位。\n当然，鹦鹉是由多种路径和形状组成的。将 Transform 属性应用于包裹这些形状的组 <g> 就足够了；这会将g 下的所有形状都做同等变换。有关详细信息，请参阅有关构建和分组 SVG 的文章。\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\" transform=\"translate(150 200)\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <!-- ... -->\n</svg>\n```\n下图展示了通过上面的变换来平移鹦鹉。鹦鹉的半透明版本显示应用变换之前的初始位置。\n![](/img/svg/translate-150-200.png)\nSvg 应用变换后的效果和HTML元素应用了CSS 变换效果一致 。我们之前提到过，元素基于transfrom 属性会建立一个新的当前用户坐标系。下图在 鹦鹉元素在变换后建立的初始坐标系的“副本”。注意鹦鹉当前的坐标系是如何平移的。\n![](/img/svg/平移对比.png)\n这里需要注意的是，在元素上建立的新当前坐标系是初始用户空间的复制，其中保留了元素的位置。这意味着它不是建立在元素的边界上，新的当前坐标系的大小也不受元素大小的限制。这就是 HTML 和 SVG 坐标系之间的差异所在。\n现在让我们尝试别的东西。我们要把鹦鹉放大一倍：\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\" transform=\"scale(2)\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <!-- ... -->\n</svg>\n```\n缩放 SVG 元素的结果与缩放 HTML 元素的结果不同。缩放后的 SVG 元素的位置在视口内发生变化。下图显示了将鹦鹉的尺寸放大一倍的结果。注意初始位置和大小，以及最终大小和位置。\n![](/img/svg/放大一倍.png)\n从上图中我们可以注意到，不仅鹦鹉的尺寸（宽度和高度）增加了一倍，而且坐标（x和y）也乘以缩放因子（这里是2）\n我们最终得到这个结果的原因是我们之前提到的：元素当前的坐标系被转换，然后鹦鹉被绘制到新的系统中。因此，在本例中，当前坐标系已缩放。此效果类似于使用 viewBox = \"0 0 400 300\" 的效果，它“放大”到坐标系，从而将其中内容的大小加倍\n因此，如果我们将鹦鹉变换后的当前坐标系绘制出来，我们将得到以下结果：\n![](/img/svg/大小加倍.png)\n鹦鹉的新当前坐标系被放大，同时“放大”到鹦鹉。请注意，在当前坐标系内，鹦鹉不会重新定位，只是缩放坐标系的效果将其在视口内重新定位。鹦鹉被放大后的坐标系中以其原始 x 和 y 坐标绘制。\n让我们尝试使用不同的缩放因子在两个方向上缩放鹦鹉。如果我们通过应用transform=\"scale(2 0.5)来缩放鹦鹉，我们会将其宽度加倍，同时使其高度为原始高度的一半。效果将类似于应用viewBox=\"0 0 400 1200\"。\n![](/img/svg/viewBox放大.png)\n注意鹦鹉在缩放坐标系内的位置，并将其与初始系统（半透明鹦鹉）中的位置进行比较：x 和 y 位置坐标被保留。\n倾斜 SVG 中的元素也会导致该元素因其当前坐标系倾斜而被“移动”。\n假设我们使用 skewX 函数沿 x 轴对狗应用倾斜变换。我们要将狗水平倾斜 25 度。\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <!-- ... -->\n        <g id=\"dog\" transform=\"skewX(25)\">\n                <!-- shapes and paths forming the dog -->\n        </g>\n</svg>\n```\n下图显示了对狗应用倾斜变换的结果。它的坐标系是倾斜，所以小狗也是倾斜的\n![](/img/svg/x轴倾斜.png)\n请注意，由于坐标系倾斜，狗的位置相对于其原始位置也会发生变化。\n下图显示了使用 skewY() 而不是 skewX 将狗倾斜相同角度的结果：\n![](/img/svg/Y轴倾斜.png)\n，让我们尝试旋转鹦鹉。默认旋转中心是当前用户坐标系的左上角。建立在旋转元素上的新的当前系统也将被旋转。在下面的示例中，我们将把鹦鹉旋转 45 度。正旋转方向为顺时针方向。\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\" transform=\"rotate(45)\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <!-- ... -->\n</svg>\n```\n上述转换的结果如下所示：\n![](/img/svg/无中心点旋转.png)\n除了坐标系的默认原点外，你可能还想围绕某个点旋转某个元素。使用 transform 属性中的 rotate() 函数，可以明确指定该点。假设我们要将本示例中的鹦鹉围绕其中心旋转。根据鹦鹉的宽度、高度和位置，我可以确定它的中心大约在（150，170）处。然后就可以围绕这一点旋转鹦鹉：\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\" transform=\"rotate(45 150 170)\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <!-- ... -->\n</svg>\n```\n此时，鹦鹉被旋转，看起来就像这样：\n![](/img/svg/指定点旋转.png)\n我们说过，变换是作用于坐标系，因此元素最终也会受到影响并发生变换。那么，对于原点位于点（0，0）的坐标系来说，改变旋转中心究竟是如何起作用的呢？\n当你更改旋转中心时，坐标系先平移，再旋转指定角度，然后根据您指定的旋转中心再次平移特定值。在本示例中\n```html\n<g id=\"parrot\" transform=\"rotate(45 150 170)\">\n```        \n浏览器通过执行了一系列的平移和旋转操作相当于：\n```html\n<g id=\"parrot\" transform=\"translate(150 170) rotate(45) translate(-150 -170)\">  \n```      \n当前坐标系将平移到你设置的中心点。然后它会根据你指定角度进行旋转。最后，在反向平移回来。上述变换视觉效果如下\n![](/img/svg/平移-旋转-平移.png)\n在进入下一节嵌套和链式变换之前，我想指出的是，每一个元素通过变换后的用户坐标系之间都是相互独立的。下图显示了在狗和鹦鹉上建立的两个坐标系，以及它们是如何相互独立的。\n![](/img/svg/坐标系独立.png)\n另请注意，每个当前坐标系都隶属于<svg> 上的 viewBox 属性建立的画布的主坐标系内，viewBox 的任何变换都会影响整个画布及其内部的所有元素，无论它们是否有自己建立的坐标系。\n例如，下面是将整个画布的用户空间从 viewBox=\"0 0 800 600\" 更改为 viewBox=\"0 0 600 450\" 的结果。整个画布被放大，同时保留每个元素原有的变换\n![](/img/svg/放大.png)\n对比上面的图片看一下\n![](/img/svg/viewbox对比.png)\n嵌套和链式转换\n很多时候你可能想要对一个元素应用多个转换。在原始元素上应用多个转换就是所谓的“链式”转换。\n当应用链式变换时，需要注意的是:像 HTML 元素变换一样，每个变换都是基于前一次变换后的用户坐标系进行变换。\n例如，元素要先旋转在平移，则平移将根据旋转后的新的坐标系进行，而不是初始的非旋转坐标系。\n下面的例子就是这样做的。我们应用之前的旋转，然后沿正 x-axistransform=\"rotate(45 150 170) translate(200)\" 将鹦鹉平移 200 个单位。\n![](/img/svg/嵌套链式链式转换.png)\n","source":"_posts/svg/svg-coordinate-systems.md","raw":"---\ntitle: SVG 坐标系\ndate: 2023-10-09 09:22:48\ntags:\n---\n\n参考资料\n- SVG：可缩放矢量图形 | MDN\n- Understanding SVG Coordinate Systems and Transformations (Part 1) — The viewport, viewBox, and prese\n- Coordinate Systems, Transformations and Units — SVG 2\n- A Guide to SVG Animations (SMIL) | CSS-Tricks\n##Svg 画布\n画布(canvs)是绘制 SVG 内容的空间或区域。从概念上讲，这块画布在两个维度(X轴, Y轴)上都是无限的。因此，SVG 可以是任意大小。然而，它是相对于称为视口(viewport)的有限区域在屏幕上渲染的。超出视口边界的 SVG 区域将被剪掉并且不可见。\n视口（viewport）\n视口是 SVG 画布的可见区域. 整个 SVG 画布或部分画布是否可见取决于该cavas的大小和preserveAspectRatio 属性的值。\n```html\n<!-- the viewport will be 800px by 600px -->\n<svg width=\"800\" height=\"600\">\n        <!-- SVG content drawn onto the SVG canvas -->\n</svg>\n```\n在 SVG 中，可以使用或不使用单位标识符来设置值。无单位值据说是使用用户单位在用户空间中指定的。如果以用户单位指定值，则假定该值等于相同数量的“px”单位。这意味着上例中的视口将渲染为 800px x 600px 视口。您还可以使用单位指定值。 SVG 中支持的长度单位标识符有：em、ex、px、pt、pc、cm、mm、in 和百分比。一旦设置了最外层 SVG 元素的宽度和高度，浏览器就会建立 __初始视口坐标系(viewport coordinate system)__ 和 __初始用户坐标系(initial user coordinate system.)__\n\n## 初始化坐标系\n初始视口坐标系是在视口上建立的坐标系，原点位于视口左上角的点(0, 0)，x轴正方向向右，y轴正方向向下，初始坐标系中的一个单位等于视口中的一个“像素”。这个坐标系类似于用CSS盒模型在HTML元素上建立的坐标系。\n初始用户坐标系是在SVG画布上建立的坐标系。该坐标系最初与视口坐标系相同 - 它的原点位于视口的左上角，正 x 轴指向右侧，正 y 轴指向下方。使用 viewBox 属性，可以修改初始用户坐标系（也称为当前坐标系或使用中的用户空间），使其不再与视口坐标系相同\n![](/img/svg/svg初始坐标系.PNG)\n\n## SVG 坐标系变换\nTransform 属性值\nTransform 属性给元素指定一个或多个变换。它采用 <transform-list> 作为值，该值被定义为变换定义列表，这些变换定义按提供的顺序应用。各个转换定义由空格或逗号分隔。对元素应用转换的示例可能如下所示：\n\nSvg 变换包含以下几种：__旋转（rotation）__、__缩放（scaling）__、__平移（translation）__ 和 __倾斜（skewing）__。 Transform 属性中使用的转换函数的工作方式与 Transform 属性中的 CSS 转换函数的工作方式类似，只是它们采用不同的参数。\n\n### 矩阵 （Matrix）\n你可以通过matrix() 方法来将一个或多个变换应用到element 上. Martix 语法如下：\n``` js \nmatrix(<a> <b> <c> <d> <e> <f>)\n\n<g transform=\"matrix(1 ,0, 0,1, 0,0)\"></g>\n```\n除特别精通数学，一般不建议使用， 更多信息可参考 [w3网址](https://www.w3.org/TR/SVG/coords.html#VectorEffectsCalculation)\n### 平移（Translation）\n想要移动一个svg 元素，可以使用 translate() 函数，语法如下：\n```js\ntranslate(<tx> [<ty>])\n```\ntranslate() 接受一个或两个值，分别指定水平和垂直移动。 tx表示沿x轴的平移值； ty 表示沿 y 轴的平移值。\nty 值是可选的；如果省略，则默认为零。 tx 和 ty 值可以以空格分隔或以逗号分隔，并且它们在函数内无需任何单位 - 它们默认为用户当前坐标系单位。\n以下示例将圆向右平移 100 个用户单位，向下平移 300 个用户单位：\n```js\n<circle cx=\"0\" cy=\"0\" r=\"100\" transform=\"translate(100 300)\" />\n```\n如果使用 translate(100, 300) （其中值以逗号分隔），则上面的示例仍然有效。\n### 缩放（Scaling）\n您可以使用scale()函数转换来放大或缩小SVG元素。缩放变换的语法是：\nscale(<sx> [<sy>])\nscale() 函数接收一个或两个值，分别指定水平和垂直缩放值。 sx表示沿x轴的缩放值，用于水平拉伸或收缩元素； sy 表示沿 y 轴的缩放值，用于垂直拉伸或收缩元素。\nsy 值是可选的；如果省略，则假定等于 sx。 sx 和 sy 值可以用空格分隔，也可以用逗号分隔，并且它们是无单位的数字。\n以下示例通过将元素缩放到原始大小的两倍来将元素的大小加倍：\n```html\n<rect width=\"150\" height=\"100\" transform=\"scale(2)\" x=\"0\" y=\"0\" />\n```\n以下代码将元素水平放大为原来2倍，垂直缩小为原来的一半：\n```html\n<rect width=\"150\" height=\"100\" transform=\"scale(2 0.5)\" x=\"0\" y=\"0\" />\n```\n如果使用scale(2, .5)（其中值以逗号分隔)，则上面的示例仍然有效。\n这里需要注意的是，当缩放 SVG 元素时，其整个当前坐标系也会缩放，导致该元素也在视口内重新定位。\n### 倾斜（Skew）\nSVG 元素也可以倾斜。通过两个函数：skewX 和 skewY实现倾斜操作。\n```js\nskewX(<skew-angle>)\nskewY(<skew-angle>)\n```\nskewX 函数指定沿 x 轴的倾斜变换； skewY 函数指定沿 y 轴的倾斜变换。\n指定的倾斜角度是无单位角度，默认为度。\n请注意，倾斜元素可能会导致元素在视口内重新定位\n### 旋转（Rotation）\n您可以使用rotate()函数旋转SVG元素。该函数的语法是：\n```js\nrotate(<rotate-angle> [<cx> <cy>])\n```\nrotate() 可设置指定点，指定角度进行旋转。与 CSS 中的旋转变换不同，您不能指定度以外的角度单位。角度值指定为无单位，默认情况下被视为度值。\n可选的 cx 和 cy 用于设置旋转中心，无单位值。如果未提供 cx 和 cy，则旋转围绕当前用户坐标系的原点\n在rotate()函数中指定旋转中心就像CSS中设置transform:rotate()和transform-origin的简写方式。由于 SVG 中的默认旋转中心是当前使用的用户坐标系的左上角，并且这可能不允许您创建所需的旋转效果，因此您最终可能会在rotate() 中指定一个新的中心。如果您知道元素在 SVG 画布中的尺寸和位置，则可以轻松地将其中心指定为旋转中心。\n以下示例围绕当前用户坐标系中位于 (50, 50) 的指定旋转中心旋转一组元素：\n```html\n<g id=\"parrot\" transform=\"rotate(45 50 50)\" x=\"0\" y=\"0\">\n        <!-- elements making up a parrot shape -->\n</g>\n```\n但是，如果你希望元素绕其中心旋转，你可能想将中心指定为 50% 50%，就像在 CSS 中所做的那样；但不幸的是，在rotate()函数内部这样做是不可能的——必须使用绝对坐标。但是，你可以结合使用 CSS 变换源属性和 CSS 变换属性来执行此操作\n### 坐标系变换\n现在我们已经涵盖了 SVG所有的变换方法 ，我们深入到SVG元素应用变换后的视觉变化。这将是SVG 变换最重要的部分。这将是它们被称为“坐标系变换”而不仅仅是“元素变换”原因。\n在这个规范中，transform 属性被定义可为元素建立新用户空间（当前坐标系）的两个属性之一 - viewBox 属于另外一个。那么这到底代表什么呢？\nThe transform attribute establishes a new user space (current coordinate system) on the element it is | applied to.\n此行为类似于应用于 HTML 元素的 CSS 转换的行为 — HTML 元素的坐标系被转换，当连续转换时通常最为明显（我们稍后会介绍）。尽管 HTML 和 SVG 转换在许多方面相似，但它们还是存在一些差异。\n主要区别在于坐标系。 HTML 元素的坐标系是建立在元素本身上的。同时，在 SVG 中，元素的坐标系最初是当前使用的坐标系或用户空间。\n当您将变换属性应用于 SVG 元素时，该元素将获得当前使用的用户坐标系的“副本”。您可以将其视为只是为转换后的元素创建一个新的“图层”，其中新图层有自己的当前用户坐标系（viewBox）的副本。\n然后，元素的新当前坐标系通过已经被元素的transfrom 指定属性变换了 ，从而导致元素本身的变换。就好像元素被绘制到变换后的坐标系中的画布上一样。\n要了解如何应用 SVG 转换，让我们从视觉部分开始。下图显示了我们将要使用的 SVG 画布。\n![](/img/svg/svg初始坐标系.png)\n\n鹦鹉和狗是我们要转换的元素（组 <g>）。\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <g id=\"dog\">\n                <!-- shapes and paths forming the dog -->\n        </g>\n</svg>\n```\n灰色坐标系是viewBox建立的画布的初始坐标系。为了简单起见，我不会更改初始坐标系 - 我使用与视口大小相同的 viewBox，如上面的代码所示。\nWhen you apply the transform attribute to an SVG element, that element gets a \"copy\" of the current user coordinate system in use.\n现在我们已经建立了画布和初始用户空间，我们将开始转换元素。我们首先将鹦鹉向左平移 150 个单位，向下平移 200 个单位。\n当然，鹦鹉是由多种路径和形状组成的。将 Transform 属性应用于包裹这些形状的组 <g> 就足够了；这会将g 下的所有形状都做同等变换。有关详细信息，请参阅有关构建和分组 SVG 的文章。\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\" transform=\"translate(150 200)\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <!-- ... -->\n</svg>\n```\n下图展示了通过上面的变换来平移鹦鹉。鹦鹉的半透明版本显示应用变换之前的初始位置。\n![](/img/svg/translate-150-200.png)\nSvg 应用变换后的效果和HTML元素应用了CSS 变换效果一致 。我们之前提到过，元素基于transfrom 属性会建立一个新的当前用户坐标系。下图在 鹦鹉元素在变换后建立的初始坐标系的“副本”。注意鹦鹉当前的坐标系是如何平移的。\n![](/img/svg/平移对比.png)\n这里需要注意的是，在元素上建立的新当前坐标系是初始用户空间的复制，其中保留了元素的位置。这意味着它不是建立在元素的边界上，新的当前坐标系的大小也不受元素大小的限制。这就是 HTML 和 SVG 坐标系之间的差异所在。\n现在让我们尝试别的东西。我们要把鹦鹉放大一倍：\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\" transform=\"scale(2)\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <!-- ... -->\n</svg>\n```\n缩放 SVG 元素的结果与缩放 HTML 元素的结果不同。缩放后的 SVG 元素的位置在视口内发生变化。下图显示了将鹦鹉的尺寸放大一倍的结果。注意初始位置和大小，以及最终大小和位置。\n![](/img/svg/放大一倍.png)\n从上图中我们可以注意到，不仅鹦鹉的尺寸（宽度和高度）增加了一倍，而且坐标（x和y）也乘以缩放因子（这里是2）\n我们最终得到这个结果的原因是我们之前提到的：元素当前的坐标系被转换，然后鹦鹉被绘制到新的系统中。因此，在本例中，当前坐标系已缩放。此效果类似于使用 viewBox = \"0 0 400 300\" 的效果，它“放大”到坐标系，从而将其中内容的大小加倍\n因此，如果我们将鹦鹉变换后的当前坐标系绘制出来，我们将得到以下结果：\n![](/img/svg/大小加倍.png)\n鹦鹉的新当前坐标系被放大，同时“放大”到鹦鹉。请注意，在当前坐标系内，鹦鹉不会重新定位，只是缩放坐标系的效果将其在视口内重新定位。鹦鹉被放大后的坐标系中以其原始 x 和 y 坐标绘制。\n让我们尝试使用不同的缩放因子在两个方向上缩放鹦鹉。如果我们通过应用transform=\"scale(2 0.5)来缩放鹦鹉，我们会将其宽度加倍，同时使其高度为原始高度的一半。效果将类似于应用viewBox=\"0 0 400 1200\"。\n![](/img/svg/viewBox放大.png)\n注意鹦鹉在缩放坐标系内的位置，并将其与初始系统（半透明鹦鹉）中的位置进行比较：x 和 y 位置坐标被保留。\n倾斜 SVG 中的元素也会导致该元素因其当前坐标系倾斜而被“移动”。\n假设我们使用 skewX 函数沿 x 轴对狗应用倾斜变换。我们要将狗水平倾斜 25 度。\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <!-- ... -->\n        <g id=\"dog\" transform=\"skewX(25)\">\n                <!-- shapes and paths forming the dog -->\n        </g>\n</svg>\n```\n下图显示了对狗应用倾斜变换的结果。它的坐标系是倾斜，所以小狗也是倾斜的\n![](/img/svg/x轴倾斜.png)\n请注意，由于坐标系倾斜，狗的位置相对于其原始位置也会发生变化。\n下图显示了使用 skewY() 而不是 skewX 将狗倾斜相同角度的结果：\n![](/img/svg/Y轴倾斜.png)\n，让我们尝试旋转鹦鹉。默认旋转中心是当前用户坐标系的左上角。建立在旋转元素上的新的当前系统也将被旋转。在下面的示例中，我们将把鹦鹉旋转 45 度。正旋转方向为顺时针方向。\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\" transform=\"rotate(45)\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <!-- ... -->\n</svg>\n```\n上述转换的结果如下所示：\n![](/img/svg/无中心点旋转.png)\n除了坐标系的默认原点外，你可能还想围绕某个点旋转某个元素。使用 transform 属性中的 rotate() 函数，可以明确指定该点。假设我们要将本示例中的鹦鹉围绕其中心旋转。根据鹦鹉的宽度、高度和位置，我可以确定它的中心大约在（150，170）处。然后就可以围绕这一点旋转鹦鹉：\n```html\n<svg width=\"800\" height=\"800\" viewBox=\"0 0 800 600\">\n        <g id=\"parrot\" transform=\"rotate(45 150 170)\">\n                <!-- shapes and paths forming the parrot -->\n        </g>\n        <!-- ... -->\n</svg>\n```\n此时，鹦鹉被旋转，看起来就像这样：\n![](/img/svg/指定点旋转.png)\n我们说过，变换是作用于坐标系，因此元素最终也会受到影响并发生变换。那么，对于原点位于点（0，0）的坐标系来说，改变旋转中心究竟是如何起作用的呢？\n当你更改旋转中心时，坐标系先平移，再旋转指定角度，然后根据您指定的旋转中心再次平移特定值。在本示例中\n```html\n<g id=\"parrot\" transform=\"rotate(45 150 170)\">\n```        \n浏览器通过执行了一系列的平移和旋转操作相当于：\n```html\n<g id=\"parrot\" transform=\"translate(150 170) rotate(45) translate(-150 -170)\">  \n```      \n当前坐标系将平移到你设置的中心点。然后它会根据你指定角度进行旋转。最后，在反向平移回来。上述变换视觉效果如下\n![](/img/svg/平移-旋转-平移.png)\n在进入下一节嵌套和链式变换之前，我想指出的是，每一个元素通过变换后的用户坐标系之间都是相互独立的。下图显示了在狗和鹦鹉上建立的两个坐标系，以及它们是如何相互独立的。\n![](/img/svg/坐标系独立.png)\n另请注意，每个当前坐标系都隶属于<svg> 上的 viewBox 属性建立的画布的主坐标系内，viewBox 的任何变换都会影响整个画布及其内部的所有元素，无论它们是否有自己建立的坐标系。\n例如，下面是将整个画布的用户空间从 viewBox=\"0 0 800 600\" 更改为 viewBox=\"0 0 600 450\" 的结果。整个画布被放大，同时保留每个元素原有的变换\n![](/img/svg/放大.png)\n对比上面的图片看一下\n![](/img/svg/viewbox对比.png)\n嵌套和链式转换\n很多时候你可能想要对一个元素应用多个转换。在原始元素上应用多个转换就是所谓的“链式”转换。\n当应用链式变换时，需要注意的是:像 HTML 元素变换一样，每个变换都是基于前一次变换后的用户坐标系进行变换。\n例如，元素要先旋转在平移，则平移将根据旋转后的新的坐标系进行，而不是初始的非旋转坐标系。\n下面的例子就是这样做的。我们应用之前的旋转，然后沿正 x-axistransform=\"rotate(45 150 170) translate(200)\" 将鹦鹉平移 200 个单位。\n![](/img/svg/嵌套链式链式转换.png)\n","slug":"svg/svg-coordinate-systems","published":1,"updated":"2023-11-28T14:24:47.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nc10018jcsk8nff6odk","content":"<p>参考资料</p>\n<ul>\n<li>SVG：可缩放矢量图形 | MDN</li>\n<li>Understanding SVG Coordinate Systems and Transformations (Part 1) — The viewport, viewBox, and prese</li>\n<li>Coordinate Systems, Transformations and Units — SVG 2</li>\n<li>A Guide to SVG Animations (SMIL) | CSS-Tricks</li>\n</ul>\n<p>##Svg 画布<br>画布(canvs)是绘制 SVG 内容的空间或区域。从概念上讲，这块画布在两个维度(X轴, Y轴)上都是无限的。因此，SVG 可以是任意大小。然而，它是相对于称为视口(viewport)的有限区域在屏幕上渲染的。超出视口边界的 SVG 区域将被剪掉并且不可见。<br>视口（viewport）<br>视口是 SVG 画布的可见区域. 整个 SVG 画布或部分画布是否可见取决于该cavas的大小和preserveAspectRatio 属性的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- the viewport will be 800px by 600px --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;600&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- SVG content drawn onto the SVG canvas --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>在 SVG 中，可以使用或不使用单位标识符来设置值。无单位值据说是使用用户单位在用户空间中指定的。如果以用户单位指定值，则假定该值等于相同数量的“px”单位。这意味着上例中的视口将渲染为 800px x 600px 视口。您还可以使用单位指定值。 SVG 中支持的长度单位标识符有：em、ex、px、pt、pc、cm、mm、in 和百分比。一旦设置了最外层 SVG 元素的宽度和高度，浏览器就会建立 <strong>初始视口坐标系(viewport coordinate system)</strong> 和 <strong>初始用户坐标系(initial user coordinate system.)</strong></p>\n<h2 id=\"初始化坐标系\"><a href=\"#初始化坐标系\" class=\"headerlink\" title=\"初始化坐标系\"></a>初始化坐标系</h2><p>初始视口坐标系是在视口上建立的坐标系，原点位于视口左上角的点(0, 0)，x轴正方向向右，y轴正方向向下，初始坐标系中的一个单位等于视口中的一个“像素”。这个坐标系类似于用CSS盒模型在HTML元素上建立的坐标系。<br>初始用户坐标系是在SVG画布上建立的坐标系。该坐标系最初与视口坐标系相同 - 它的原点位于视口的左上角，正 x 轴指向右侧，正 y 轴指向下方。使用 viewBox 属性，可以修改初始用户坐标系（也称为当前坐标系或使用中的用户空间），使其不再与视口坐标系相同<br><img src=\"/img/svg/svg%E5%88%9D%E5%A7%8B%E5%9D%90%E6%A0%87%E7%B3%BB.PNG\"></p>\n<h2 id=\"SVG-坐标系变换\"><a href=\"#SVG-坐标系变换\" class=\"headerlink\" title=\"SVG 坐标系变换\"></a>SVG 坐标系变换</h2><p>Transform 属性值<br>Transform 属性给元素指定一个或多个变换。它采用 <transform-list> 作为值，该值被定义为变换定义列表，这些变换定义按提供的顺序应用。各个转换定义由空格或逗号分隔。对元素应用转换的示例可能如下所示：</p>\n<p>Svg 变换包含以下几种：<strong>旋转（rotation）__、__缩放（scaling）__、__平移（translation）</strong> 和 __倾斜（skewing）__。 Transform 属性中使用的转换函数的工作方式与 Transform 属性中的 CSS 转换函数的工作方式类似，只是它们采用不同的参数。</p>\n<h3 id=\"矩阵-（Matrix）\"><a href=\"#矩阵-（Matrix）\" class=\"headerlink\" title=\"矩阵 （Matrix）\"></a>矩阵 （Matrix）</h3><p>你可以通过matrix() 方法来将一个或多个变换应用到element 上. Martix 语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">matrix</span>(&lt;a&gt; &lt;b&gt; &lt;c&gt; &lt;d&gt; &lt;e&gt; &lt;f&gt;)<br><br>&lt;g transform=<span class=\"hljs-string\">&quot;matrix(1 ,0, 0,1, 0,0)&quot;</span>&gt;&lt;/g&gt;<br></code></pre></td></tr></table></figure>\n<p>除特别精通数学，一般不建议使用， 更多信息可参考 <a href=\"https://www.w3.org/TR/SVG/coords.html#VectorEffectsCalculation\">w3网址</a></p>\n<h3 id=\"平移（Translation）\"><a href=\"#平移（Translation）\" class=\"headerlink\" title=\"平移（Translation）\"></a>平移（Translation）</h3><p>想要移动一个svg 元素，可以使用 translate() 函数，语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">translate</span>(&lt;tx&gt; [&lt;ty&gt;])<br></code></pre></td></tr></table></figure>\n<p>translate() 接受一个或两个值，分别指定水平和垂直移动。 tx表示沿x轴的平移值； ty 表示沿 y 轴的平移值。<br>ty 值是可选的；如果省略，则默认为零。 tx 和 ty 值可以以空格分隔或以逗号分隔，并且它们在函数内无需任何单位 - 它们默认为用户当前坐标系单位。<br>以下示例将圆向右平移 100 个用户单位，向下平移 300 个用户单位：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;circle cx=<span class=\"hljs-string\">&quot;0&quot;</span> cy=<span class=\"hljs-string\">&quot;0&quot;</span> r=<span class=\"hljs-string\">&quot;100&quot;</span> transform=<span class=\"hljs-string\">&quot;translate(100 300)&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>\n<p>如果使用 translate(100, 300) （其中值以逗号分隔），则上面的示例仍然有效。</p>\n<h3 id=\"缩放（Scaling）\"><a href=\"#缩放（Scaling）\" class=\"headerlink\" title=\"缩放（Scaling）\"></a>缩放（Scaling）</h3><p>您可以使用scale()函数转换来放大或缩小SVG元素。缩放变换的语法是：<br>scale(<sx> [<sy>])<br>scale() 函数接收一个或两个值，分别指定水平和垂直缩放值。 sx表示沿x轴的缩放值，用于水平拉伸或收缩元素； sy 表示沿 y 轴的缩放值，用于垂直拉伸或收缩元素。<br>sy 值是可选的；如果省略，则假定等于 sx。 sx 和 sy 值可以用空格分隔，也可以用逗号分隔，并且它们是无单位的数字。<br>以下示例通过将元素缩放到原始大小的两倍来将元素的大小加倍：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rect</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;150&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;scale(2)&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;0&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<p>以下代码将元素水平放大为原来2倍，垂直缩小为原来的一半：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rect</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;150&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;scale(2 0.5)&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;0&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<p>如果使用scale(2, .5)（其中值以逗号分隔)，则上面的示例仍然有效。<br>这里需要注意的是，当缩放 SVG 元素时，其整个当前坐标系也会缩放，导致该元素也在视口内重新定位。</p>\n<h3 id=\"倾斜（Skew）\"><a href=\"#倾斜（Skew）\" class=\"headerlink\" title=\"倾斜（Skew）\"></a>倾斜（Skew）</h3><p>SVG 元素也可以倾斜。通过两个函数：skewX 和 skewY实现倾斜操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">skewX</span>(&lt;skew-angle&gt;)<br><span class=\"hljs-title function_\">skewY</span>(&lt;skew-angle&gt;)<br></code></pre></td></tr></table></figure>\n<p>skewX 函数指定沿 x 轴的倾斜变换； skewY 函数指定沿 y 轴的倾斜变换。<br>指定的倾斜角度是无单位角度，默认为度。<br>请注意，倾斜元素可能会导致元素在视口内重新定位</p>\n<h3 id=\"旋转（Rotation）\"><a href=\"#旋转（Rotation）\" class=\"headerlink\" title=\"旋转（Rotation）\"></a>旋转（Rotation）</h3><p>您可以使用rotate()函数旋转SVG元素。该函数的语法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">rotate</span>(&lt;rotate-angle&gt; [&lt;cx&gt; &lt;cy&gt;])<br></code></pre></td></tr></table></figure>\n<p>rotate() 可设置指定点，指定角度进行旋转。与 CSS 中的旋转变换不同，您不能指定度以外的角度单位。角度值指定为无单位，默认情况下被视为度值。<br>可选的 cx 和 cy 用于设置旋转中心，无单位值。如果未提供 cx 和 cy，则旋转围绕当前用户坐标系的原点<br>在rotate()函数中指定旋转中心就像CSS中设置transform:rotate()和transform-origin的简写方式。由于 SVG 中的默认旋转中心是当前使用的用户坐标系的左上角，并且这可能不允许您创建所需的旋转效果，因此您最终可能会在rotate() 中指定一个新的中心。如果您知道元素在 SVG 画布中的尺寸和位置，则可以轻松地将其中心指定为旋转中心。<br>以下示例围绕当前用户坐标系中位于 (50, 50) 的指定旋转中心旋转一组元素：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;rotate(45 50 50)&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- elements making up a parrot shape --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>但是，如果你希望元素绕其中心旋转，你可能想将中心指定为 50% 50%，就像在 CSS 中所做的那样；但不幸的是，在rotate()函数内部这样做是不可能的——必须使用绝对坐标。但是，你可以结合使用 CSS 变换源属性和 CSS 变换属性来执行此操作</p>\n<h3 id=\"坐标系变换\"><a href=\"#坐标系变换\" class=\"headerlink\" title=\"坐标系变换\"></a>坐标系变换</h3><p>现在我们已经涵盖了 SVG所有的变换方法 ，我们深入到SVG元素应用变换后的视觉变化。这将是SVG 变换最重要的部分。这将是它们被称为“坐标系变换”而不仅仅是“元素变换”原因。<br>在这个规范中，transform 属性被定义可为元素建立新用户空间（当前坐标系）的两个属性之一 - viewBox 属于另外一个。那么这到底代表什么呢？<br>The transform attribute establishes a new user space (current coordinate system) on the element it is | applied to.<br>此行为类似于应用于 HTML 元素的 CSS 转换的行为 — HTML 元素的坐标系被转换，当连续转换时通常最为明显（我们稍后会介绍）。尽管 HTML 和 SVG 转换在许多方面相似，但它们还是存在一些差异。<br>主要区别在于坐标系。 HTML 元素的坐标系是建立在元素本身上的。同时，在 SVG 中，元素的坐标系最初是当前使用的坐标系或用户空间。<br>当您将变换属性应用于 SVG 元素时，该元素将获得当前使用的用户坐标系的“副本”。您可以将其视为只是为转换后的元素创建一个新的“图层”，其中新图层有自己的当前用户坐标系（viewBox）的副本。<br>然后，元素的新当前坐标系通过已经被元素的transfrom 指定属性变换了 ，从而导致元素本身的变换。就好像元素被绘制到变换后的坐标系中的画布上一样。<br>要了解如何应用 SVG 转换，让我们从视觉部分开始。下图显示了我们将要使用的 SVG 画布。<br><img src=\"/img/svg/svg%E5%88%9D%E5%A7%8B%E5%9D%90%E6%A0%87%E7%B3%BB.png\"></p>\n<p>鹦鹉和狗是我们要转换的元素（组 <g>）。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the dog --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>灰色坐标系是viewBox建立的画布的初始坐标系。为了简单起见，我不会更改初始坐标系 - 我使用与视口大小相同的 viewBox，如上面的代码所示。<br>When you apply the transform attribute to an SVG element, that element gets a “copy” of the current user coordinate system in use.<br>现在我们已经建立了画布和初始用户空间，我们将开始转换元素。我们首先将鹦鹉向左平移 150 个单位，向下平移 200 个单位。<br>当然，鹦鹉是由多种路径和形状组成的。将 Transform 属性应用于包裹这些形状的组 <g> 就足够了；这会将g 下的所有形状都做同等变换。有关详细信息，请参阅有关构建和分组 SVG 的文章。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;translate(150 200)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>下图展示了通过上面的变换来平移鹦鹉。鹦鹉的半透明版本显示应用变换之前的初始位置。<br><img src=\"/img/svg/translate-150-200.png\"><br>Svg 应用变换后的效果和HTML元素应用了CSS 变换效果一致 。我们之前提到过，元素基于transfrom 属性会建立一个新的当前用户坐标系。下图在 鹦鹉元素在变换后建立的初始坐标系的“副本”。注意鹦鹉当前的坐标系是如何平移的。<br><img src=\"/img/svg/%E5%B9%B3%E7%A7%BB%E5%AF%B9%E6%AF%94.png\"><br>这里需要注意的是，在元素上建立的新当前坐标系是初始用户空间的复制，其中保留了元素的位置。这意味着它不是建立在元素的边界上，新的当前坐标系的大小也不受元素大小的限制。这就是 HTML 和 SVG 坐标系之间的差异所在。<br>现在让我们尝试别的东西。我们要把鹦鹉放大一倍：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;scale(2)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>缩放 SVG 元素的结果与缩放 HTML 元素的结果不同。缩放后的 SVG 元素的位置在视口内发生变化。下图显示了将鹦鹉的尺寸放大一倍的结果。注意初始位置和大小，以及最终大小和位置。<br><img src=\"/img/svg/%E6%94%BE%E5%A4%A7%E4%B8%80%E5%80%8D.png\"><br>从上图中我们可以注意到，不仅鹦鹉的尺寸（宽度和高度）增加了一倍，而且坐标（x和y）也乘以缩放因子（这里是2）<br>我们最终得到这个结果的原因是我们之前提到的：元素当前的坐标系被转换，然后鹦鹉被绘制到新的系统中。因此，在本例中，当前坐标系已缩放。此效果类似于使用 viewBox &#x3D; “0 0 400 300” 的效果，它“放大”到坐标系，从而将其中内容的大小加倍<br>因此，如果我们将鹦鹉变换后的当前坐标系绘制出来，我们将得到以下结果：<br><img src=\"/img/svg/%E5%A4%A7%E5%B0%8F%E5%8A%A0%E5%80%8D.png\"><br>鹦鹉的新当前坐标系被放大，同时“放大”到鹦鹉。请注意，在当前坐标系内，鹦鹉不会重新定位，只是缩放坐标系的效果将其在视口内重新定位。鹦鹉被放大后的坐标系中以其原始 x 和 y 坐标绘制。<br>让我们尝试使用不同的缩放因子在两个方向上缩放鹦鹉。如果我们通过应用transform&#x3D;”scale(2 0.5)来缩放鹦鹉，我们会将其宽度加倍，同时使其高度为原始高度的一半。效果将类似于应用viewBox&#x3D;”0 0 400 1200”。<br><img src=\"/img/svg/viewBox%E6%94%BE%E5%A4%A7.png\"><br>注意鹦鹉在缩放坐标系内的位置，并将其与初始系统（半透明鹦鹉）中的位置进行比较：x 和 y 位置坐标被保留。<br>倾斜 SVG 中的元素也会导致该元素因其当前坐标系倾斜而被“移动”。<br>假设我们使用 skewX 函数沿 x 轴对狗应用倾斜变换。我们要将狗水平倾斜 25 度。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;skewX(25)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the dog --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>下图显示了对狗应用倾斜变换的结果。它的坐标系是倾斜，所以小狗也是倾斜的<br><img src=\"/img/svg/x%E8%BD%B4%E5%80%BE%E6%96%9C.png\"><br>请注意，由于坐标系倾斜，狗的位置相对于其原始位置也会发生变化。<br>下图显示了使用 skewY() 而不是 skewX 将狗倾斜相同角度的结果：<br><img src=\"/img/svg/Y%E8%BD%B4%E5%80%BE%E6%96%9C.png\"><br>，让我们尝试旋转鹦鹉。默认旋转中心是当前用户坐标系的左上角。建立在旋转元素上的新的当前系统也将被旋转。在下面的示例中，我们将把鹦鹉旋转 45 度。正旋转方向为顺时针方向。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;rotate(45)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>上述转换的结果如下所示：<br><img src=\"/img/svg/%E6%97%A0%E4%B8%AD%E5%BF%83%E7%82%B9%E6%97%8B%E8%BD%AC.png\"><br>除了坐标系的默认原点外，你可能还想围绕某个点旋转某个元素。使用 transform 属性中的 rotate() 函数，可以明确指定该点。假设我们要将本示例中的鹦鹉围绕其中心旋转。根据鹦鹉的宽度、高度和位置，我可以确定它的中心大约在（150，170）处。然后就可以围绕这一点旋转鹦鹉：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;rotate(45 150 170)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>此时，鹦鹉被旋转，看起来就像这样：<br><img src=\"/img/svg/%E6%8C%87%E5%AE%9A%E7%82%B9%E6%97%8B%E8%BD%AC.png\"><br>我们说过，变换是作用于坐标系，因此元素最终也会受到影响并发生变换。那么，对于原点位于点（0，0）的坐标系来说，改变旋转中心究竟是如何起作用的呢？<br>当你更改旋转中心时，坐标系先平移，再旋转指定角度，然后根据您指定的旋转中心再次平移特定值。在本示例中</p>\n<pre><code class=\"html\">&lt;g id=&quot;parrot&quot; transform=&quot;rotate(45 150 170)&quot;&gt;\n</code></pre>\n<p>浏览器通过执行了一系列的平移和旋转操作相当于：</p>\n<pre><code class=\"html\">&lt;g id=&quot;parrot&quot; transform=&quot;translate(150 170) rotate(45) translate(-150 -170)&quot;&gt;  \n</code></pre>\n<p>当前坐标系将平移到你设置的中心点。然后它会根据你指定角度进行旋转。最后，在反向平移回来。上述变换视觉效果如下<br><img src=\"/img/svg/%E5%B9%B3%E7%A7%BB-%E6%97%8B%E8%BD%AC-%E5%B9%B3%E7%A7%BB.png\"><br>在进入下一节嵌套和链式变换之前，我想指出的是，每一个元素通过变换后的用户坐标系之间都是相互独立的。下图显示了在狗和鹦鹉上建立的两个坐标系，以及它们是如何相互独立的。<br><img src=\"/img/svg/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%8B%AC%E7%AB%8B.png\"><br>另请注意，每个当前坐标系都隶属于<svg> 上的 viewBox 属性建立的画布的主坐标系内，viewBox 的任何变换都会影响整个画布及其内部的所有元素，无论它们是否有自己建立的坐标系。<br>例如，下面是将整个画布的用户空间从 viewBox&#x3D;”0 0 800 600” 更改为 viewBox&#x3D;”0 0 600 450” 的结果。整个画布被放大，同时保留每个元素原有的变换<br><img src=\"/img/svg/%E6%94%BE%E5%A4%A7.png\"><br>对比上面的图片看一下<br><img src=\"/img/svg/viewbox%E5%AF%B9%E6%AF%94.png\"><br>嵌套和链式转换<br>很多时候你可能想要对一个元素应用多个转换。在原始元素上应用多个转换就是所谓的“链式”转换。<br>当应用链式变换时，需要注意的是:像 HTML 元素变换一样，每个变换都是基于前一次变换后的用户坐标系进行变换。<br>例如，元素要先旋转在平移，则平移将根据旋转后的新的坐标系进行，而不是初始的非旋转坐标系。<br>下面的例子就是这样做的。我们应用之前的旋转，然后沿正 x-axistransform&#x3D;”rotate(45 150 170) translate(200)” 将鹦鹉平移 200 个单位。<br><img src=\"/img/svg/%E5%B5%8C%E5%A5%97%E9%93%BE%E5%BC%8F%E9%93%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考资料</p>\n<ul>\n<li>SVG：可缩放矢量图形 | MDN</li>\n<li>Understanding SVG Coordinate Systems and Transformations (Part 1) — The viewport, viewBox, and prese</li>\n<li>Coordinate Systems, Transformations and Units — SVG 2</li>\n<li>A Guide to SVG Animations (SMIL) | CSS-Tricks</li>\n</ul>\n<p>##Svg 画布<br>画布(canvs)是绘制 SVG 内容的空间或区域。从概念上讲，这块画布在两个维度(X轴, Y轴)上都是无限的。因此，SVG 可以是任意大小。然而，它是相对于称为视口(viewport)的有限区域在屏幕上渲染的。超出视口边界的 SVG 区域将被剪掉并且不可见。<br>视口（viewport）<br>视口是 SVG 画布的可见区域. 整个 SVG 画布或部分画布是否可见取决于该cavas的大小和preserveAspectRatio 属性的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- the viewport will be 800px by 600px --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;600&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- SVG content drawn onto the SVG canvas --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>在 SVG 中，可以使用或不使用单位标识符来设置值。无单位值据说是使用用户单位在用户空间中指定的。如果以用户单位指定值，则假定该值等于相同数量的“px”单位。这意味着上例中的视口将渲染为 800px x 600px 视口。您还可以使用单位指定值。 SVG 中支持的长度单位标识符有：em、ex、px、pt、pc、cm、mm、in 和百分比。一旦设置了最外层 SVG 元素的宽度和高度，浏览器就会建立 <strong>初始视口坐标系(viewport coordinate system)</strong> 和 <strong>初始用户坐标系(initial user coordinate system.)</strong></p>\n<h2 id=\"初始化坐标系\"><a href=\"#初始化坐标系\" class=\"headerlink\" title=\"初始化坐标系\"></a>初始化坐标系</h2><p>初始视口坐标系是在视口上建立的坐标系，原点位于视口左上角的点(0, 0)，x轴正方向向右，y轴正方向向下，初始坐标系中的一个单位等于视口中的一个“像素”。这个坐标系类似于用CSS盒模型在HTML元素上建立的坐标系。<br>初始用户坐标系是在SVG画布上建立的坐标系。该坐标系最初与视口坐标系相同 - 它的原点位于视口的左上角，正 x 轴指向右侧，正 y 轴指向下方。使用 viewBox 属性，可以修改初始用户坐标系（也称为当前坐标系或使用中的用户空间），使其不再与视口坐标系相同<br><img src=\"/img/svg/svg%E5%88%9D%E5%A7%8B%E5%9D%90%E6%A0%87%E7%B3%BB.PNG\"></p>\n<h2 id=\"SVG-坐标系变换\"><a href=\"#SVG-坐标系变换\" class=\"headerlink\" title=\"SVG 坐标系变换\"></a>SVG 坐标系变换</h2><p>Transform 属性值<br>Transform 属性给元素指定一个或多个变换。它采用 <transform-list> 作为值，该值被定义为变换定义列表，这些变换定义按提供的顺序应用。各个转换定义由空格或逗号分隔。对元素应用转换的示例可能如下所示：</p>\n<p>Svg 变换包含以下几种：<strong>旋转（rotation）__、__缩放（scaling）__、__平移（translation）</strong> 和 __倾斜（skewing）__。 Transform 属性中使用的转换函数的工作方式与 Transform 属性中的 CSS 转换函数的工作方式类似，只是它们采用不同的参数。</p>\n<h3 id=\"矩阵-（Matrix）\"><a href=\"#矩阵-（Matrix）\" class=\"headerlink\" title=\"矩阵 （Matrix）\"></a>矩阵 （Matrix）</h3><p>你可以通过matrix() 方法来将一个或多个变换应用到element 上. Martix 语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">matrix</span>(&lt;a&gt; &lt;b&gt; &lt;c&gt; &lt;d&gt; &lt;e&gt; &lt;f&gt;)<br><br>&lt;g transform=<span class=\"hljs-string\">&quot;matrix(1 ,0, 0,1, 0,0)&quot;</span>&gt;&lt;/g&gt;<br></code></pre></td></tr></table></figure>\n<p>除特别精通数学，一般不建议使用， 更多信息可参考 <a href=\"https://www.w3.org/TR/SVG/coords.html#VectorEffectsCalculation\">w3网址</a></p>\n<h3 id=\"平移（Translation）\"><a href=\"#平移（Translation）\" class=\"headerlink\" title=\"平移（Translation）\"></a>平移（Translation）</h3><p>想要移动一个svg 元素，可以使用 translate() 函数，语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">translate</span>(&lt;tx&gt; [&lt;ty&gt;])<br></code></pre></td></tr></table></figure>\n<p>translate() 接受一个或两个值，分别指定水平和垂直移动。 tx表示沿x轴的平移值； ty 表示沿 y 轴的平移值。<br>ty 值是可选的；如果省略，则默认为零。 tx 和 ty 值可以以空格分隔或以逗号分隔，并且它们在函数内无需任何单位 - 它们默认为用户当前坐标系单位。<br>以下示例将圆向右平移 100 个用户单位，向下平移 300 个用户单位：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;circle cx=<span class=\"hljs-string\">&quot;0&quot;</span> cy=<span class=\"hljs-string\">&quot;0&quot;</span> r=<span class=\"hljs-string\">&quot;100&quot;</span> transform=<span class=\"hljs-string\">&quot;translate(100 300)&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>\n<p>如果使用 translate(100, 300) （其中值以逗号分隔），则上面的示例仍然有效。</p>\n<h3 id=\"缩放（Scaling）\"><a href=\"#缩放（Scaling）\" class=\"headerlink\" title=\"缩放（Scaling）\"></a>缩放（Scaling）</h3><p>您可以使用scale()函数转换来放大或缩小SVG元素。缩放变换的语法是：<br>scale(<sx> [<sy>])<br>scale() 函数接收一个或两个值，分别指定水平和垂直缩放值。 sx表示沿x轴的缩放值，用于水平拉伸或收缩元素； sy 表示沿 y 轴的缩放值，用于垂直拉伸或收缩元素。<br>sy 值是可选的；如果省略，则假定等于 sx。 sx 和 sy 值可以用空格分隔，也可以用逗号分隔，并且它们是无单位的数字。<br>以下示例通过将元素缩放到原始大小的两倍来将元素的大小加倍：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rect</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;150&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;scale(2)&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;0&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<p>以下代码将元素水平放大为原来2倍，垂直缩小为原来的一半：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rect</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;150&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;scale(2 0.5)&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;0&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<p>如果使用scale(2, .5)（其中值以逗号分隔)，则上面的示例仍然有效。<br>这里需要注意的是，当缩放 SVG 元素时，其整个当前坐标系也会缩放，导致该元素也在视口内重新定位。</p>\n<h3 id=\"倾斜（Skew）\"><a href=\"#倾斜（Skew）\" class=\"headerlink\" title=\"倾斜（Skew）\"></a>倾斜（Skew）</h3><p>SVG 元素也可以倾斜。通过两个函数：skewX 和 skewY实现倾斜操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">skewX</span>(&lt;skew-angle&gt;)<br><span class=\"hljs-title function_\">skewY</span>(&lt;skew-angle&gt;)<br></code></pre></td></tr></table></figure>\n<p>skewX 函数指定沿 x 轴的倾斜变换； skewY 函数指定沿 y 轴的倾斜变换。<br>指定的倾斜角度是无单位角度，默认为度。<br>请注意，倾斜元素可能会导致元素在视口内重新定位</p>\n<h3 id=\"旋转（Rotation）\"><a href=\"#旋转（Rotation）\" class=\"headerlink\" title=\"旋转（Rotation）\"></a>旋转（Rotation）</h3><p>您可以使用rotate()函数旋转SVG元素。该函数的语法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">rotate</span>(&lt;rotate-angle&gt; [&lt;cx&gt; &lt;cy&gt;])<br></code></pre></td></tr></table></figure>\n<p>rotate() 可设置指定点，指定角度进行旋转。与 CSS 中的旋转变换不同，您不能指定度以外的角度单位。角度值指定为无单位，默认情况下被视为度值。<br>可选的 cx 和 cy 用于设置旋转中心，无单位值。如果未提供 cx 和 cy，则旋转围绕当前用户坐标系的原点<br>在rotate()函数中指定旋转中心就像CSS中设置transform:rotate()和transform-origin的简写方式。由于 SVG 中的默认旋转中心是当前使用的用户坐标系的左上角，并且这可能不允许您创建所需的旋转效果，因此您最终可能会在rotate() 中指定一个新的中心。如果您知道元素在 SVG 画布中的尺寸和位置，则可以轻松地将其中心指定为旋转中心。<br>以下示例围绕当前用户坐标系中位于 (50, 50) 的指定旋转中心旋转一组元素：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;rotate(45 50 50)&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- elements making up a parrot shape --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>但是，如果你希望元素绕其中心旋转，你可能想将中心指定为 50% 50%，就像在 CSS 中所做的那样；但不幸的是，在rotate()函数内部这样做是不可能的——必须使用绝对坐标。但是，你可以结合使用 CSS 变换源属性和 CSS 变换属性来执行此操作</p>\n<h3 id=\"坐标系变换\"><a href=\"#坐标系变换\" class=\"headerlink\" title=\"坐标系变换\"></a>坐标系变换</h3><p>现在我们已经涵盖了 SVG所有的变换方法 ，我们深入到SVG元素应用变换后的视觉变化。这将是SVG 变换最重要的部分。这将是它们被称为“坐标系变换”而不仅仅是“元素变换”原因。<br>在这个规范中，transform 属性被定义可为元素建立新用户空间（当前坐标系）的两个属性之一 - viewBox 属于另外一个。那么这到底代表什么呢？<br>The transform attribute establishes a new user space (current coordinate system) on the element it is | applied to.<br>此行为类似于应用于 HTML 元素的 CSS 转换的行为 — HTML 元素的坐标系被转换，当连续转换时通常最为明显（我们稍后会介绍）。尽管 HTML 和 SVG 转换在许多方面相似，但它们还是存在一些差异。<br>主要区别在于坐标系。 HTML 元素的坐标系是建立在元素本身上的。同时，在 SVG 中，元素的坐标系最初是当前使用的坐标系或用户空间。<br>当您将变换属性应用于 SVG 元素时，该元素将获得当前使用的用户坐标系的“副本”。您可以将其视为只是为转换后的元素创建一个新的“图层”，其中新图层有自己的当前用户坐标系（viewBox）的副本。<br>然后，元素的新当前坐标系通过已经被元素的transfrom 指定属性变换了 ，从而导致元素本身的变换。就好像元素被绘制到变换后的坐标系中的画布上一样。<br>要了解如何应用 SVG 转换，让我们从视觉部分开始。下图显示了我们将要使用的 SVG 画布。<br><img src=\"/img/svg/svg%E5%88%9D%E5%A7%8B%E5%9D%90%E6%A0%87%E7%B3%BB.png\"></p>\n<p>鹦鹉和狗是我们要转换的元素（组 <g>）。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the dog --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>灰色坐标系是viewBox建立的画布的初始坐标系。为了简单起见，我不会更改初始坐标系 - 我使用与视口大小相同的 viewBox，如上面的代码所示。<br>When you apply the transform attribute to an SVG element, that element gets a “copy” of the current user coordinate system in use.<br>现在我们已经建立了画布和初始用户空间，我们将开始转换元素。我们首先将鹦鹉向左平移 150 个单位，向下平移 200 个单位。<br>当然，鹦鹉是由多种路径和形状组成的。将 Transform 属性应用于包裹这些形状的组 <g> 就足够了；这会将g 下的所有形状都做同等变换。有关详细信息，请参阅有关构建和分组 SVG 的文章。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;translate(150 200)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>下图展示了通过上面的变换来平移鹦鹉。鹦鹉的半透明版本显示应用变换之前的初始位置。<br><img src=\"/img/svg/translate-150-200.png\"><br>Svg 应用变换后的效果和HTML元素应用了CSS 变换效果一致 。我们之前提到过，元素基于transfrom 属性会建立一个新的当前用户坐标系。下图在 鹦鹉元素在变换后建立的初始坐标系的“副本”。注意鹦鹉当前的坐标系是如何平移的。<br><img src=\"/img/svg/%E5%B9%B3%E7%A7%BB%E5%AF%B9%E6%AF%94.png\"><br>这里需要注意的是，在元素上建立的新当前坐标系是初始用户空间的复制，其中保留了元素的位置。这意味着它不是建立在元素的边界上，新的当前坐标系的大小也不受元素大小的限制。这就是 HTML 和 SVG 坐标系之间的差异所在。<br>现在让我们尝试别的东西。我们要把鹦鹉放大一倍：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;scale(2)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>缩放 SVG 元素的结果与缩放 HTML 元素的结果不同。缩放后的 SVG 元素的位置在视口内发生变化。下图显示了将鹦鹉的尺寸放大一倍的结果。注意初始位置和大小，以及最终大小和位置。<br><img src=\"/img/svg/%E6%94%BE%E5%A4%A7%E4%B8%80%E5%80%8D.png\"><br>从上图中我们可以注意到，不仅鹦鹉的尺寸（宽度和高度）增加了一倍，而且坐标（x和y）也乘以缩放因子（这里是2）<br>我们最终得到这个结果的原因是我们之前提到的：元素当前的坐标系被转换，然后鹦鹉被绘制到新的系统中。因此，在本例中，当前坐标系已缩放。此效果类似于使用 viewBox &#x3D; “0 0 400 300” 的效果，它“放大”到坐标系，从而将其中内容的大小加倍<br>因此，如果我们将鹦鹉变换后的当前坐标系绘制出来，我们将得到以下结果：<br><img src=\"/img/svg/%E5%A4%A7%E5%B0%8F%E5%8A%A0%E5%80%8D.png\"><br>鹦鹉的新当前坐标系被放大，同时“放大”到鹦鹉。请注意，在当前坐标系内，鹦鹉不会重新定位，只是缩放坐标系的效果将其在视口内重新定位。鹦鹉被放大后的坐标系中以其原始 x 和 y 坐标绘制。<br>让我们尝试使用不同的缩放因子在两个方向上缩放鹦鹉。如果我们通过应用transform&#x3D;”scale(2 0.5)来缩放鹦鹉，我们会将其宽度加倍，同时使其高度为原始高度的一半。效果将类似于应用viewBox&#x3D;”0 0 400 1200”。<br><img src=\"/img/svg/viewBox%E6%94%BE%E5%A4%A7.png\"><br>注意鹦鹉在缩放坐标系内的位置，并将其与初始系统（半透明鹦鹉）中的位置进行比较：x 和 y 位置坐标被保留。<br>倾斜 SVG 中的元素也会导致该元素因其当前坐标系倾斜而被“移动”。<br>假设我们使用 skewX 函数沿 x 轴对狗应用倾斜变换。我们要将狗水平倾斜 25 度。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;skewX(25)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the dog --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>下图显示了对狗应用倾斜变换的结果。它的坐标系是倾斜，所以小狗也是倾斜的<br><img src=\"/img/svg/x%E8%BD%B4%E5%80%BE%E6%96%9C.png\"><br>请注意，由于坐标系倾斜，狗的位置相对于其原始位置也会发生变化。<br>下图显示了使用 skewY() 而不是 skewX 将狗倾斜相同角度的结果：<br><img src=\"/img/svg/Y%E8%BD%B4%E5%80%BE%E6%96%9C.png\"><br>，让我们尝试旋转鹦鹉。默认旋转中心是当前用户坐标系的左上角。建立在旋转元素上的新的当前系统也将被旋转。在下面的示例中，我们将把鹦鹉旋转 45 度。正旋转方向为顺时针方向。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;rotate(45)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>上述转换的结果如下所示：<br><img src=\"/img/svg/%E6%97%A0%E4%B8%AD%E5%BF%83%E7%82%B9%E6%97%8B%E8%BD%AC.png\"><br>除了坐标系的默认原点外，你可能还想围绕某个点旋转某个元素。使用 transform 属性中的 rotate() 函数，可以明确指定该点。假设我们要将本示例中的鹦鹉围绕其中心旋转。根据鹦鹉的宽度、高度和位置，我可以确定它的中心大约在（150，170）处。然后就可以围绕这一点旋转鹦鹉：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;800&quot;</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parrot&quot;</span> <span class=\"hljs-attr\">transform</span>=<span class=\"hljs-string\">&quot;rotate(45 150 170)&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>此时，鹦鹉被旋转，看起来就像这样：<br><img src=\"/img/svg/%E6%8C%87%E5%AE%9A%E7%82%B9%E6%97%8B%E8%BD%AC.png\"><br>我们说过，变换是作用于坐标系，因此元素最终也会受到影响并发生变换。那么，对于原点位于点（0，0）的坐标系来说，改变旋转中心究竟是如何起作用的呢？<br>当你更改旋转中心时，坐标系先平移，再旋转指定角度，然后根据您指定的旋转中心再次平移特定值。在本示例中</p>\n<pre><code class=\"html\">&lt;g id=&quot;parrot&quot; transform=&quot;rotate(45 150 170)&quot;&gt;\n</code></pre>\n<p>浏览器通过执行了一系列的平移和旋转操作相当于：</p>\n<pre><code class=\"html\">&lt;g id=&quot;parrot&quot; transform=&quot;translate(150 170) rotate(45) translate(-150 -170)&quot;&gt;  \n</code></pre>\n<p>当前坐标系将平移到你设置的中心点。然后它会根据你指定角度进行旋转。最后，在反向平移回来。上述变换视觉效果如下<br><img src=\"/img/svg/%E5%B9%B3%E7%A7%BB-%E6%97%8B%E8%BD%AC-%E5%B9%B3%E7%A7%BB.png\"><br>在进入下一节嵌套和链式变换之前，我想指出的是，每一个元素通过变换后的用户坐标系之间都是相互独立的。下图显示了在狗和鹦鹉上建立的两个坐标系，以及它们是如何相互独立的。<br><img src=\"/img/svg/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%8B%AC%E7%AB%8B.png\"><br>另请注意，每个当前坐标系都隶属于<svg> 上的 viewBox 属性建立的画布的主坐标系内，viewBox 的任何变换都会影响整个画布及其内部的所有元素，无论它们是否有自己建立的坐标系。<br>例如，下面是将整个画布的用户空间从 viewBox&#x3D;”0 0 800 600” 更改为 viewBox&#x3D;”0 0 600 450” 的结果。整个画布被放大，同时保留每个元素原有的变换<br><img src=\"/img/svg/%E6%94%BE%E5%A4%A7.png\"><br>对比上面的图片看一下<br><img src=\"/img/svg/viewbox%E5%AF%B9%E6%AF%94.png\"><br>嵌套和链式转换<br>很多时候你可能想要对一个元素应用多个转换。在原始元素上应用多个转换就是所谓的“链式”转换。<br>当应用链式变换时，需要注意的是:像 HTML 元素变换一样，每个变换都是基于前一次变换后的用户坐标系进行变换。<br>例如，元素要先旋转在平移，则平移将根据旋转后的新的坐标系进行，而不是初始的非旋转坐标系。<br>下面的例子就是这样做的。我们应用之前的旋转，然后沿正 x-axistransform&#x3D;”rotate(45 150 170) translate(200)” 将鹦鹉平移 200 个单位。<br><img src=\"/img/svg/%E5%B5%8C%E5%A5%97%E9%93%BE%E5%BC%8F%E9%93%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2.png\"></p>\n"},{"title":"pnpm 搭建 monorepo目录记录","date":"2024-06-01T10:22:26.000Z","_content":"\n# pnpm-monorepo 搭建记录\n\n## 技术选型\n1. node 版本 `V18.19.1`\n1. 包管理 [`pnpm`](https://www.pnpm.cn/)\n3. 微前端框架 [`micro-app`](https://micro-zoe.github.io/micro-app/docs.html#/)\n\n## 全局安装 pnpm\n```bash\nnpm i pnpm -g \n```\n## 初始化项目\n```bash\nmkdir pnpm-monorepo\ncd pnpm-monorepo\npnpm init\necho -e \"node_modules\" > .gitignore\nnpm pkg set engines.node=\">=18.19.1\"\nnpm pkg set type=\"module\"\n```\n\n## 配置workspace配置文件\n1. 创建 pnpm-workspace.yaml文件\n```bash\ntourch pnpm-workspace.yaml\n``` \n2. 编辑`pnpm-workspace.yaml`添加以下配置\n```yaml\npackages:\n  - 'apps/*'\n  - 'packages/*'\n``` \n3. 根目录下创建 `apps`&&`packages`目录\n```bash\nmkdir apps packages\n```\n## 创建项目基础共享代码包 `share`\n- 创建一个全局公有类，给`apps`下的目录共享\n```bash\ncd packages\npnpm create vite share --tempate vue-ts\ncd ..\npnpm i\nnpm pkg set scripts.share=\"pnpm --filter share\"\n```\n- 在`main.ts`创建一些基础工具类，例如以下\n```ts\nexport function openWindow = (url: string, isNew: boolean) => {     const target = isNew ? '_self' : '_blank';\n      window.open(url, target);\n\n}\n```\n- 删除多余文件\n```\nrm -rf src/components src/App.vue src/style.css src/vite-env.d.ts index.html .gitignore\n```\n- 将`share`已库的形式编译打包\nvite编译入口文件默认为 `index.html`文件，我们需要修改build 入口文件修改 `src/main.ts`, `vite-config.ts` 配置如下\n```ts\nimport { defineConfig } from 'vite';\nimport { resolve } from 'path';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: resolve(__dirname, 'src/main.ts'),\n      formats: ['es'],\n      fileName: format => `utils.${format}.js`\n    },\n    rollupOptions: {\n      external: ['vue'],\n      output: {\n        globals: {\n          vue: 'Vue'\n        }\n      }\n    }\n  },\n  resolve: { alias: { src: resolve('src/') } },\n  plugins: []\n});\n\n```\n为库提供自动生成类型插件，可以安装`vite-plugin-dts`\n```bash\npnpm share install vite-plugin-dts\n```\n在vite-config添加以下配置\n```ts\nimport { defineConfig } from 'vite';\nimport { resolve } from 'path';\nimport dts from 'vite-plugin-dts'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: resolve(__dirname, 'src/main.ts'),\n      formats: ['es'],\n      fileName: format => `utils.${format}.js`\n    },\n    rollupOptions: {\n      external: ['vue'],\n      output: {\n        globals: {\n          vue: 'Vue'\n        }\n      }\n    }\n  },\n  resolve: { alias: { src: resolve('src/') } },\n  plugins: [dts()]\n});\n\n```\n- 在`package.json`添加入库文件&&类型文件\n```json\n{\n ...,\n \"name\": \"@co/share\",\n \"main\": \"./dist/common.js\",\n \"types\": \"./dist/main.d.ts\",\n}\n``` \n## 创建web应用\n- 进入 `apps` 创建APP\n```bash\ncd apps\npnpm create vite base-micro vue-ts\n```\n- 进入跟目录创建`.npmrc`\n```bash\ntouch .npmrc\n```\n- `.npmrc` 添加以下配置\n```yaml\nregistry=https://registry.npmjs.org/\nlink-workspace-packages=true # 允许pnpm从本地安装包\n```\n- 在 `base-micro` 安装包\n```bash\npnpm install @co/share --filter base-micro\n```\n安装后，`base-micro`应用的 `package.json`中出现如下依赖\n```json\n {\n  ...,\n    \"dependencies\": {\n    \"@co/share\": \"workspace:*\", # 本地库依赖\n    }\n }\n```\n- 在base-micro  `main.ts` 中 可以引用 `@co/share`中的方法\n```ts\nimport { createApp } from 'vue';\nimport 'nprogress/nprogress.css';\nimport App from './App.vue';\nimport { setupRouter } from './router';\nimport { openWindow } from '@co/share';\nconst app = createApp(App);\nfunction bootStrap() {\n  setupRouter(app);\n  app.mount('#app');\n}\nbootStrap();\nopenWindow('https://cn.bing.com')\n\n```\n","source":"_posts/pnpm-monorepo/pnpm-monorepo.md","raw":"---\ntitle: pnpm 搭建 monorepo目录记录\ndate: 2024-06-01 18:22:26\ntags: monorepo\n---\n\n# pnpm-monorepo 搭建记录\n\n## 技术选型\n1. node 版本 `V18.19.1`\n1. 包管理 [`pnpm`](https://www.pnpm.cn/)\n3. 微前端框架 [`micro-app`](https://micro-zoe.github.io/micro-app/docs.html#/)\n\n## 全局安装 pnpm\n```bash\nnpm i pnpm -g \n```\n## 初始化项目\n```bash\nmkdir pnpm-monorepo\ncd pnpm-monorepo\npnpm init\necho -e \"node_modules\" > .gitignore\nnpm pkg set engines.node=\">=18.19.1\"\nnpm pkg set type=\"module\"\n```\n\n## 配置workspace配置文件\n1. 创建 pnpm-workspace.yaml文件\n```bash\ntourch pnpm-workspace.yaml\n``` \n2. 编辑`pnpm-workspace.yaml`添加以下配置\n```yaml\npackages:\n  - 'apps/*'\n  - 'packages/*'\n``` \n3. 根目录下创建 `apps`&&`packages`目录\n```bash\nmkdir apps packages\n```\n## 创建项目基础共享代码包 `share`\n- 创建一个全局公有类，给`apps`下的目录共享\n```bash\ncd packages\npnpm create vite share --tempate vue-ts\ncd ..\npnpm i\nnpm pkg set scripts.share=\"pnpm --filter share\"\n```\n- 在`main.ts`创建一些基础工具类，例如以下\n```ts\nexport function openWindow = (url: string, isNew: boolean) => {     const target = isNew ? '_self' : '_blank';\n      window.open(url, target);\n\n}\n```\n- 删除多余文件\n```\nrm -rf src/components src/App.vue src/style.css src/vite-env.d.ts index.html .gitignore\n```\n- 将`share`已库的形式编译打包\nvite编译入口文件默认为 `index.html`文件，我们需要修改build 入口文件修改 `src/main.ts`, `vite-config.ts` 配置如下\n```ts\nimport { defineConfig } from 'vite';\nimport { resolve } from 'path';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: resolve(__dirname, 'src/main.ts'),\n      formats: ['es'],\n      fileName: format => `utils.${format}.js`\n    },\n    rollupOptions: {\n      external: ['vue'],\n      output: {\n        globals: {\n          vue: 'Vue'\n        }\n      }\n    }\n  },\n  resolve: { alias: { src: resolve('src/') } },\n  plugins: []\n});\n\n```\n为库提供自动生成类型插件，可以安装`vite-plugin-dts`\n```bash\npnpm share install vite-plugin-dts\n```\n在vite-config添加以下配置\n```ts\nimport { defineConfig } from 'vite';\nimport { resolve } from 'path';\nimport dts from 'vite-plugin-dts'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: resolve(__dirname, 'src/main.ts'),\n      formats: ['es'],\n      fileName: format => `utils.${format}.js`\n    },\n    rollupOptions: {\n      external: ['vue'],\n      output: {\n        globals: {\n          vue: 'Vue'\n        }\n      }\n    }\n  },\n  resolve: { alias: { src: resolve('src/') } },\n  plugins: [dts()]\n});\n\n```\n- 在`package.json`添加入库文件&&类型文件\n```json\n{\n ...,\n \"name\": \"@co/share\",\n \"main\": \"./dist/common.js\",\n \"types\": \"./dist/main.d.ts\",\n}\n``` \n## 创建web应用\n- 进入 `apps` 创建APP\n```bash\ncd apps\npnpm create vite base-micro vue-ts\n```\n- 进入跟目录创建`.npmrc`\n```bash\ntouch .npmrc\n```\n- `.npmrc` 添加以下配置\n```yaml\nregistry=https://registry.npmjs.org/\nlink-workspace-packages=true # 允许pnpm从本地安装包\n```\n- 在 `base-micro` 安装包\n```bash\npnpm install @co/share --filter base-micro\n```\n安装后，`base-micro`应用的 `package.json`中出现如下依赖\n```json\n {\n  ...,\n    \"dependencies\": {\n    \"@co/share\": \"workspace:*\", # 本地库依赖\n    }\n }\n```\n- 在base-micro  `main.ts` 中 可以引用 `@co/share`中的方法\n```ts\nimport { createApp } from 'vue';\nimport 'nprogress/nprogress.css';\nimport App from './App.vue';\nimport { setupRouter } from './router';\nimport { openWindow } from '@co/share';\nconst app = createApp(App);\nfunction bootStrap() {\n  setupRouter(app);\n  app.mount('#app');\n}\nbootStrap();\nopenWindow('https://cn.bing.com')\n\n```\n","slug":"pnpm-monorepo/pnpm-monorepo","published":1,"updated":"2024-06-06T07:08:58.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nc1001cjcsk86v3ay44","content":"<h1 id=\"pnpm-monorepo-搭建记录\"><a href=\"#pnpm-monorepo-搭建记录\" class=\"headerlink\" title=\"pnpm-monorepo 搭建记录\"></a>pnpm-monorepo 搭建记录</h1><h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><ol>\n<li>node 版本 <code>V18.19.1</code></li>\n<li>包管理 <a href=\"https://www.pnpm.cn/\"><code>pnpm</code></a></li>\n<li>微前端框架 <a href=\"https://micro-zoe.github.io/micro-app/docs.html#/\"><code>micro-app</code></a></li>\n</ol>\n<h2 id=\"全局安装-pnpm\"><a href=\"#全局安装-pnpm\" class=\"headerlink\" title=\"全局安装 pnpm\"></a>全局安装 pnpm</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i pnpm -g <br></code></pre></td></tr></table></figure>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mkdir</span> pnpm-monorepo<br><span class=\"hljs-built_in\">cd</span> pnpm-monorepo<br>pnpm init<br><span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">&quot;node_modules&quot;</span> &gt; .gitignore<br>npm pkg <span class=\"hljs-built_in\">set</span> engines.node=<span class=\"hljs-string\">&quot;&gt;=18.19.1&quot;</span><br>npm pkg <span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置workspace配置文件\"><a href=\"#配置workspace配置文件\" class=\"headerlink\" title=\"配置workspace配置文件\"></a>配置workspace配置文件</h2><ol>\n<li>创建 pnpm-workspace.yaml文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">tourch pnpm-workspace.yaml<br></code></pre></td></tr></table></figure></li>\n<li>编辑<code>pnpm-workspace.yaml</code>添加以下配置<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">packages:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&#x27;apps/*&#x27;</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&#x27;packages/*&#x27;</span><br></code></pre></td></tr></table></figure></li>\n<li>根目录下创建 <code>apps</code>&amp;&amp;<code>packages</code>目录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mkdir</span> apps packages<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"创建项目基础共享代码包-share\"><a href=\"#创建项目基础共享代码包-share\" class=\"headerlink\" title=\"创建项目基础共享代码包 share\"></a>创建项目基础共享代码包 <code>share</code></h2><ul>\n<li>创建一个全局公有类，给<code>apps</code>下的目录共享<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> packages<br>pnpm create vite share --tempate vue-ts<br><span class=\"hljs-built_in\">cd</span> ..<br>pnpm i<br>npm pkg <span class=\"hljs-built_in\">set</span> scripts.share=<span class=\"hljs-string\">&quot;pnpm --filter share&quot;</span><br></code></pre></td></tr></table></figure></li>\n<li>在<code>main.ts</code>创建一些基础工具类，例如以下<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> openWindow = <span class=\"hljs-function\">(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">string</span>, isNew: <span class=\"hljs-built_in\">boolean</span></span>) =&gt;</span> &#123;     <span class=\"hljs-keyword\">const</span> target = isNew ? <span class=\"hljs-string\">&#x27;_self&#x27;</span> : <span class=\"hljs-string\">&#x27;_blank&#x27;</span>;<br>      <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">open</span>(url, target);<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>删除多余文件<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">rm -rf src<span class=\"hljs-regexp\">/components src/</span>App.vue src<span class=\"hljs-regexp\">/style.css src/</span>vite-env.d.ts index.html .gitignore<br></code></pre></td></tr></table></figure></li>\n<li>将<code>share</code>已库的形式编译打包<br>vite编译入口文件默认为 <code>index.html</code>文件，我们需要修改build 入口文件修改 <code>src/main.ts</code>, <code>vite-config.ts</code> 配置如下<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; defineConfig &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; resolve &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;path&#x27;</span>;<br><br><span class=\"hljs-comment\">// https://vitejs.dev/config/</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-attr\">build</span>: &#123;<br>    <span class=\"hljs-attr\">lib</span>: &#123;<br>      <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;src/main.ts&#x27;</span>),<br>      <span class=\"hljs-attr\">formats</span>: [<span class=\"hljs-string\">&#x27;es&#x27;</span>],<br>      <span class=\"hljs-attr\">fileName</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">format</span> =&gt;</span> <span class=\"hljs-string\">`utils.<span class=\"hljs-subst\">$&#123;format&#125;</span>.js`</span><br>    &#125;,<br>    <span class=\"hljs-attr\">rollupOptions</span>: &#123;<br>      <span class=\"hljs-attr\">external</span>: [<span class=\"hljs-string\">&#x27;vue&#x27;</span>],<br>      <span class=\"hljs-attr\">output</span>: &#123;<br>        <span class=\"hljs-attr\">globals</span>: &#123;<br>          <span class=\"hljs-attr\">vue</span>: <span class=\"hljs-string\">&#x27;Vue&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">resolve</span>: &#123; <span class=\"hljs-attr\">alias</span>: &#123; <span class=\"hljs-attr\">src</span>: <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;src/&#x27;</span>) &#125; &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: []<br>&#125;);<br><br></code></pre></td></tr></table></figure>\n为库提供自动生成类型插件，可以安装<code>vite-plugin-dts</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm share install vite-plugin-dts<br></code></pre></td></tr></table></figure>\n在vite-config添加以下配置<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; defineConfig &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; resolve &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;path&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> dts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite-plugin-dts&#x27;</span><br><span class=\"hljs-comment\">// https://vitejs.dev/config/</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-attr\">build</span>: &#123;<br>    <span class=\"hljs-attr\">lib</span>: &#123;<br>      <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;src/main.ts&#x27;</span>),<br>      <span class=\"hljs-attr\">formats</span>: [<span class=\"hljs-string\">&#x27;es&#x27;</span>],<br>      <span class=\"hljs-attr\">fileName</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">format</span> =&gt;</span> <span class=\"hljs-string\">`utils.<span class=\"hljs-subst\">$&#123;format&#125;</span>.js`</span><br>    &#125;,<br>    <span class=\"hljs-attr\">rollupOptions</span>: &#123;<br>      <span class=\"hljs-attr\">external</span>: [<span class=\"hljs-string\">&#x27;vue&#x27;</span>],<br>      <span class=\"hljs-attr\">output</span>: &#123;<br>        <span class=\"hljs-attr\">globals</span>: &#123;<br>          <span class=\"hljs-attr\">vue</span>: <span class=\"hljs-string\">&#x27;Vue&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">resolve</span>: &#123; <span class=\"hljs-attr\">alias</span>: &#123; <span class=\"hljs-attr\">src</span>: <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;src/&#x27;</span>) &#125; &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-title function_\">dts</span>()]<br>&#125;);<br><br></code></pre></td></tr></table></figure></li>\n<li>在<code>package.json</code>添加入库文件&amp;&amp;类型文件<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br> ...<span class=\"hljs-punctuation\">,</span><br> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;@co/share&quot;</span><span class=\"hljs-punctuation\">,</span><br> <span class=\"hljs-attr\">&quot;main&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;./dist/common.js&quot;</span><span class=\"hljs-punctuation\">,</span><br> <span class=\"hljs-attr\">&quot;types&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;./dist/main.d.ts&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"创建web应用\"><a href=\"#创建web应用\" class=\"headerlink\" title=\"创建web应用\"></a>创建web应用</h2><ul>\n<li>进入 <code>apps</code> 创建APP<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> apps<br>pnpm create vite base-micro vue-ts<br></code></pre></td></tr></table></figure></li>\n<li>进入跟目录创建<code>.npmrc</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">touch</span> .npmrc<br></code></pre></td></tr></table></figure></li>\n<li><code>.npmrc</code> 添加以下配置<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">registry=https://registry.npmjs.org/</span><br><span class=\"hljs-string\">link-workspace-packages=true</span> <span class=\"hljs-comment\"># 允许pnpm从本地安装包</span><br></code></pre></td></tr></table></figure></li>\n<li>在 <code>base-micro</code> 安装包<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm install @co/share --filter base-micro<br></code></pre></td></tr></table></figure>\n安装后，<code>base-micro</code>应用的 <code>package.json</code>中出现如下依赖<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br> ...<span class=\"hljs-punctuation\">,</span><br>   <span class=\"hljs-attr\">&quot;dependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>   <span class=\"hljs-attr\">&quot;@co/share&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;workspace:*&quot;</span><span class=\"hljs-punctuation\">,</span> # 本地库依赖<br>   <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li>在base-micro  <code>main.ts</code> 中 可以引用 <code>@co/share</code>中的方法<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;nprogress/nprogress.css&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App.vue&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; setupRouter &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; openWindow &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@co/share&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>(<span class=\"hljs-title class_\">App</span>);<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootStrap</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">setupRouter</span>(app);<br>  app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>);<br>&#125;<br><span class=\"hljs-title function_\">bootStrap</span>();<br><span class=\"hljs-title function_\">openWindow</span>(<span class=\"hljs-string\">&#x27;https://cn.bing.com&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"pnpm-monorepo-搭建记录\"><a href=\"#pnpm-monorepo-搭建记录\" class=\"headerlink\" title=\"pnpm-monorepo 搭建记录\"></a>pnpm-monorepo 搭建记录</h1><h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><ol>\n<li>node 版本 <code>V18.19.1</code></li>\n<li>包管理 <a href=\"https://www.pnpm.cn/\"><code>pnpm</code></a></li>\n<li>微前端框架 <a href=\"https://micro-zoe.github.io/micro-app/docs.html#/\"><code>micro-app</code></a></li>\n</ol>\n<h2 id=\"全局安装-pnpm\"><a href=\"#全局安装-pnpm\" class=\"headerlink\" title=\"全局安装 pnpm\"></a>全局安装 pnpm</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i pnpm -g <br></code></pre></td></tr></table></figure>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mkdir</span> pnpm-monorepo<br><span class=\"hljs-built_in\">cd</span> pnpm-monorepo<br>pnpm init<br><span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">&quot;node_modules&quot;</span> &gt; .gitignore<br>npm pkg <span class=\"hljs-built_in\">set</span> engines.node=<span class=\"hljs-string\">&quot;&gt;=18.19.1&quot;</span><br>npm pkg <span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置workspace配置文件\"><a href=\"#配置workspace配置文件\" class=\"headerlink\" title=\"配置workspace配置文件\"></a>配置workspace配置文件</h2><ol>\n<li>创建 pnpm-workspace.yaml文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">tourch pnpm-workspace.yaml<br></code></pre></td></tr></table></figure></li>\n<li>编辑<code>pnpm-workspace.yaml</code>添加以下配置<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">packages:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&#x27;apps/*&#x27;</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&#x27;packages/*&#x27;</span><br></code></pre></td></tr></table></figure></li>\n<li>根目录下创建 <code>apps</code>&amp;&amp;<code>packages</code>目录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mkdir</span> apps packages<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"创建项目基础共享代码包-share\"><a href=\"#创建项目基础共享代码包-share\" class=\"headerlink\" title=\"创建项目基础共享代码包 share\"></a>创建项目基础共享代码包 <code>share</code></h2><ul>\n<li>创建一个全局公有类，给<code>apps</code>下的目录共享<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> packages<br>pnpm create vite share --tempate vue-ts<br><span class=\"hljs-built_in\">cd</span> ..<br>pnpm i<br>npm pkg <span class=\"hljs-built_in\">set</span> scripts.share=<span class=\"hljs-string\">&quot;pnpm --filter share&quot;</span><br></code></pre></td></tr></table></figure></li>\n<li>在<code>main.ts</code>创建一些基础工具类，例如以下<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> openWindow = <span class=\"hljs-function\">(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">string</span>, isNew: <span class=\"hljs-built_in\">boolean</span></span>) =&gt;</span> &#123;     <span class=\"hljs-keyword\">const</span> target = isNew ? <span class=\"hljs-string\">&#x27;_self&#x27;</span> : <span class=\"hljs-string\">&#x27;_blank&#x27;</span>;<br>      <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">open</span>(url, target);<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>删除多余文件<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">rm -rf src<span class=\"hljs-regexp\">/components src/</span>App.vue src<span class=\"hljs-regexp\">/style.css src/</span>vite-env.d.ts index.html .gitignore<br></code></pre></td></tr></table></figure></li>\n<li>将<code>share</code>已库的形式编译打包<br>vite编译入口文件默认为 <code>index.html</code>文件，我们需要修改build 入口文件修改 <code>src/main.ts</code>, <code>vite-config.ts</code> 配置如下<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; defineConfig &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; resolve &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;path&#x27;</span>;<br><br><span class=\"hljs-comment\">// https://vitejs.dev/config/</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-attr\">build</span>: &#123;<br>    <span class=\"hljs-attr\">lib</span>: &#123;<br>      <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;src/main.ts&#x27;</span>),<br>      <span class=\"hljs-attr\">formats</span>: [<span class=\"hljs-string\">&#x27;es&#x27;</span>],<br>      <span class=\"hljs-attr\">fileName</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">format</span> =&gt;</span> <span class=\"hljs-string\">`utils.<span class=\"hljs-subst\">$&#123;format&#125;</span>.js`</span><br>    &#125;,<br>    <span class=\"hljs-attr\">rollupOptions</span>: &#123;<br>      <span class=\"hljs-attr\">external</span>: [<span class=\"hljs-string\">&#x27;vue&#x27;</span>],<br>      <span class=\"hljs-attr\">output</span>: &#123;<br>        <span class=\"hljs-attr\">globals</span>: &#123;<br>          <span class=\"hljs-attr\">vue</span>: <span class=\"hljs-string\">&#x27;Vue&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">resolve</span>: &#123; <span class=\"hljs-attr\">alias</span>: &#123; <span class=\"hljs-attr\">src</span>: <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;src/&#x27;</span>) &#125; &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: []<br>&#125;);<br><br></code></pre></td></tr></table></figure>\n为库提供自动生成类型插件，可以安装<code>vite-plugin-dts</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm share install vite-plugin-dts<br></code></pre></td></tr></table></figure>\n在vite-config添加以下配置<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; defineConfig &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; resolve &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;path&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> dts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite-plugin-dts&#x27;</span><br><span class=\"hljs-comment\">// https://vitejs.dev/config/</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  <span class=\"hljs-attr\">build</span>: &#123;<br>    <span class=\"hljs-attr\">lib</span>: &#123;<br>      <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;src/main.ts&#x27;</span>),<br>      <span class=\"hljs-attr\">formats</span>: [<span class=\"hljs-string\">&#x27;es&#x27;</span>],<br>      <span class=\"hljs-attr\">fileName</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">format</span> =&gt;</span> <span class=\"hljs-string\">`utils.<span class=\"hljs-subst\">$&#123;format&#125;</span>.js`</span><br>    &#125;,<br>    <span class=\"hljs-attr\">rollupOptions</span>: &#123;<br>      <span class=\"hljs-attr\">external</span>: [<span class=\"hljs-string\">&#x27;vue&#x27;</span>],<br>      <span class=\"hljs-attr\">output</span>: &#123;<br>        <span class=\"hljs-attr\">globals</span>: &#123;<br>          <span class=\"hljs-attr\">vue</span>: <span class=\"hljs-string\">&#x27;Vue&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">resolve</span>: &#123; <span class=\"hljs-attr\">alias</span>: &#123; <span class=\"hljs-attr\">src</span>: <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;src/&#x27;</span>) &#125; &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-title function_\">dts</span>()]<br>&#125;);<br><br></code></pre></td></tr></table></figure></li>\n<li>在<code>package.json</code>添加入库文件&amp;&amp;类型文件<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br> ...<span class=\"hljs-punctuation\">,</span><br> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;@co/share&quot;</span><span class=\"hljs-punctuation\">,</span><br> <span class=\"hljs-attr\">&quot;main&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;./dist/common.js&quot;</span><span class=\"hljs-punctuation\">,</span><br> <span class=\"hljs-attr\">&quot;types&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;./dist/main.d.ts&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"创建web应用\"><a href=\"#创建web应用\" class=\"headerlink\" title=\"创建web应用\"></a>创建web应用</h2><ul>\n<li>进入 <code>apps</code> 创建APP<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> apps<br>pnpm create vite base-micro vue-ts<br></code></pre></td></tr></table></figure></li>\n<li>进入跟目录创建<code>.npmrc</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">touch</span> .npmrc<br></code></pre></td></tr></table></figure></li>\n<li><code>.npmrc</code> 添加以下配置<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">registry=https://registry.npmjs.org/</span><br><span class=\"hljs-string\">link-workspace-packages=true</span> <span class=\"hljs-comment\"># 允许pnpm从本地安装包</span><br></code></pre></td></tr></table></figure></li>\n<li>在 <code>base-micro</code> 安装包<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm install @co/share --filter base-micro<br></code></pre></td></tr></table></figure>\n安装后，<code>base-micro</code>应用的 <code>package.json</code>中出现如下依赖<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br> ...<span class=\"hljs-punctuation\">,</span><br>   <span class=\"hljs-attr\">&quot;dependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>   <span class=\"hljs-attr\">&quot;@co/share&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;workspace:*&quot;</span><span class=\"hljs-punctuation\">,</span> # 本地库依赖<br>   <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li>在base-micro  <code>main.ts</code> 中 可以引用 <code>@co/share</code>中的方法<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;nprogress/nprogress.css&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App.vue&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; setupRouter &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; openWindow &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@co/share&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>(<span class=\"hljs-title class_\">App</span>);<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootStrap</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">setupRouter</span>(app);<br>  app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>);<br>&#125;<br><span class=\"hljs-title function_\">bootStrap</span>();<br><span class=\"hljs-title function_\">openWindow</span>(<span class=\"hljs-string\">&#x27;https://cn.bing.com&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Bash常用命令","date":"2024-09-04T02:38:39.000Z","_content":"\n## ssh 远程登录\n```bash\n ssh usename@host -p ${port}\n```\n\n## scp 上传文件\n```bash\nscp -P ${port} ${localfile} ${usename}@${remote-host}:${remote-dir}\n```\n\n## zip 加密压缩\n```\nzip -er ${filename}.zip ${dir}\n```\n\n## unzip 解压命令\n```bash\n unzip ${zipFileName}.zip -d ${targetDir}\n```\n","source":"_posts/vim/vim-code copy.md","raw":"---\ntitle: Bash常用命令\ndate: 2024-09-4 10:38:39\ntags: BASH\ncategory: Linux\n---\n\n## ssh 远程登录\n```bash\n ssh usename@host -p ${port}\n```\n\n## scp 上传文件\n```bash\nscp -P ${port} ${localfile} ${usename}@${remote-host}:${remote-dir}\n```\n\n## zip 加密压缩\n```\nzip -er ${filename}.zip ${dir}\n```\n\n## unzip 解压命令\n```bash\n unzip ${zipFileName}.zip -d ${targetDir}\n```\n","slug":"vim/vim-code copy","published":1,"updated":"2024-09-11T03:03:36.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nc4001yjcsk47915kvh","content":"<h2 id=\"ssh-远程登录\"><a href=\"#ssh-远程登录\" class=\"headerlink\" title=\"ssh 远程登录\"></a>ssh 远程登录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ssh usename@host -p <span class=\"hljs-variable\">$&#123;port&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"scp-上传文件\"><a href=\"#scp-上传文件\" class=\"headerlink\" title=\"scp 上传文件\"></a>scp 上传文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">scp -P <span class=\"hljs-variable\">$&#123;port&#125;</span> <span class=\"hljs-variable\">$&#123;localfile&#125;</span> <span class=\"hljs-variable\">$&#123;usename&#125;</span>@<span class=\"hljs-variable\">$&#123;remote-host&#125;</span>:<span class=\"hljs-variable\">$&#123;remote-dir&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"zip-加密压缩\"><a href=\"#zip-加密压缩\" class=\"headerlink\" title=\"zip 加密压缩\"></a>zip 加密压缩</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">zip</span> -er <span class=\"hljs-variable\">$&#123;filename&#125;</span>.zip <span class=\"hljs-variable\">$&#123;dir&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"unzip-解压命令\"><a href=\"#unzip-解压命令\" class=\"headerlink\" title=\"unzip 解压命令\"></a>unzip 解压命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">unzip <span class=\"hljs-variable\">$&#123;zipFileName&#125;</span>.zip -d <span class=\"hljs-variable\">$&#123;targetDir&#125;</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ssh-远程登录\"><a href=\"#ssh-远程登录\" class=\"headerlink\" title=\"ssh 远程登录\"></a>ssh 远程登录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ssh usename@host -p <span class=\"hljs-variable\">$&#123;port&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"scp-上传文件\"><a href=\"#scp-上传文件\" class=\"headerlink\" title=\"scp 上传文件\"></a>scp 上传文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">scp -P <span class=\"hljs-variable\">$&#123;port&#125;</span> <span class=\"hljs-variable\">$&#123;localfile&#125;</span> <span class=\"hljs-variable\">$&#123;usename&#125;</span>@<span class=\"hljs-variable\">$&#123;remote-host&#125;</span>:<span class=\"hljs-variable\">$&#123;remote-dir&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"zip-加密压缩\"><a href=\"#zip-加密压缩\" class=\"headerlink\" title=\"zip 加密压缩\"></a>zip 加密压缩</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">zip</span> -er <span class=\"hljs-variable\">$&#123;filename&#125;</span>.zip <span class=\"hljs-variable\">$&#123;dir&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"unzip-解压命令\"><a href=\"#unzip-解压命令\" class=\"headerlink\" title=\"unzip 解压命令\"></a>unzip 解压命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">unzip <span class=\"hljs-variable\">$&#123;zipFileName&#125;</span>.zip -d <span class=\"hljs-variable\">$&#123;targetDir&#125;</span><br></code></pre></td></tr></table></figure>\n"},{"title":"vim 常用命令","date":"2023-12-04T02:38:39.000Z","_content":"\n# vim 显示行号\n```bash\n # 设置行号展示\n set number\n # 取消行号展示\n set nonumber\n```\n｜ 每次都显示行号 可以通过编辑 vimrc\n```bash \nvim ~/.vimrc\nset number\n```\n# vim 格式化文件\n在Vim中，你可以使用以下命令来格式化文件：\n首先，进入Vim编辑器并打开你要格式化的文件。\n1. 确保你处于正常模式（按下Esc键）。\n2. 使用gg命令将光标移动到文件的开头。\n3. 输入=G命令，它会自动缩进整个文件。\n\n```bash\n> gg\n> =G\n```\n| 如果你只想格式化选定的代码块，可以使用v命令进入可视模式，然后使用移动命令选择代码块，最后输入=命令进行缩进。\n# vim 删除指定行\n1. 要删除当前行，请按下 dd。\n2. 要删除特定行，请按下 :nd，其中 n 代表行号。例如，要删除第 5 行，您可以输入 :5d。\n3. 要删除多行，请使用 :[start],[end]d 的语法。例如，要删除第 5 行到第 10 行，您可以输入 :5,10d。\n```bash\n# 删除当前行\ndd\n# 删除特定行\n:5d\n#删除范围\n:5,10d\n```\n","source":"_posts/vim/vim-code.md","raw":"---\ntitle: vim 常用命令\ndate: 2023-12-4 10:38:39\ntags: vim\ncategory: Linux\n---\n\n# vim 显示行号\n```bash\n # 设置行号展示\n set number\n # 取消行号展示\n set nonumber\n```\n｜ 每次都显示行号 可以通过编辑 vimrc\n```bash \nvim ~/.vimrc\nset number\n```\n# vim 格式化文件\n在Vim中，你可以使用以下命令来格式化文件：\n首先，进入Vim编辑器并打开你要格式化的文件。\n1. 确保你处于正常模式（按下Esc键）。\n2. 使用gg命令将光标移动到文件的开头。\n3. 输入=G命令，它会自动缩进整个文件。\n\n```bash\n> gg\n> =G\n```\n| 如果你只想格式化选定的代码块，可以使用v命令进入可视模式，然后使用移动命令选择代码块，最后输入=命令进行缩进。\n# vim 删除指定行\n1. 要删除当前行，请按下 dd。\n2. 要删除特定行，请按下 :nd，其中 n 代表行号。例如，要删除第 5 行，您可以输入 :5d。\n3. 要删除多行，请使用 :[start],[end]d 的语法。例如，要删除第 5 行到第 10 行，您可以输入 :5,10d。\n```bash\n# 删除当前行\ndd\n# 删除特定行\n:5d\n#删除范围\n:5,10d\n```\n","slug":"vim/vim-code","published":1,"updated":"2024-09-11T03:03:38.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nc6001zjcsk3l25dx64","content":"<h1 id=\"vim-显示行号\"><a href=\"#vim-显示行号\" class=\"headerlink\" title=\"vim 显示行号\"></a>vim 显示行号</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 设置行号展示</span><br><span class=\"hljs-built_in\">set</span> number<br><span class=\"hljs-comment\"># 取消行号展示</span><br><span class=\"hljs-built_in\">set</span> nonumber<br></code></pre></td></tr></table></figure>\n<p>｜ 每次都显示行号 可以通过编辑 vimrc</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vim ~/.vimrc<br><span class=\"hljs-built_in\">set</span> number<br></code></pre></td></tr></table></figure>\n<h1 id=\"vim-格式化文件\"><a href=\"#vim-格式化文件\" class=\"headerlink\" title=\"vim 格式化文件\"></a>vim 格式化文件</h1><p>在Vim中，你可以使用以下命令来格式化文件：<br>首先，进入Vim编辑器并打开你要格式化的文件。</p>\n<ol>\n<li>确保你处于正常模式（按下Esc键）。</li>\n<li>使用gg命令将光标移动到文件的开头。</li>\n<li>输入&#x3D;G命令，它会自动缩进整个文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">&gt; gg<br>&gt; =G<br></code></pre></td></tr></table></figure>\n<p>| 如果你只想格式化选定的代码块，可以使用v命令进入可视模式，然后使用移动命令选择代码块，最后输入&#x3D;命令进行缩进。</p>\n<h1 id=\"vim-删除指定行\"><a href=\"#vim-删除指定行\" class=\"headerlink\" title=\"vim 删除指定行\"></a>vim 删除指定行</h1><ol>\n<li>要删除当前行，请按下 dd。</li>\n<li>要删除特定行，请按下 :nd，其中 n 代表行号。例如，要删除第 5 行，您可以输入 :5d。</li>\n<li>要删除多行，请使用 :[start],[end]d 的语法。例如，要删除第 5 行到第 10 行，您可以输入 :5,10d。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 删除当前行</span><br><span class=\"hljs-built_in\">dd</span><br><span class=\"hljs-comment\"># 删除特定行</span><br>:5d<br><span class=\"hljs-comment\">#删除范围</span><br>:5,10d<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vim-显示行号\"><a href=\"#vim-显示行号\" class=\"headerlink\" title=\"vim 显示行号\"></a>vim 显示行号</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 设置行号展示</span><br><span class=\"hljs-built_in\">set</span> number<br><span class=\"hljs-comment\"># 取消行号展示</span><br><span class=\"hljs-built_in\">set</span> nonumber<br></code></pre></td></tr></table></figure>\n<p>｜ 每次都显示行号 可以通过编辑 vimrc</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vim ~/.vimrc<br><span class=\"hljs-built_in\">set</span> number<br></code></pre></td></tr></table></figure>\n<h1 id=\"vim-格式化文件\"><a href=\"#vim-格式化文件\" class=\"headerlink\" title=\"vim 格式化文件\"></a>vim 格式化文件</h1><p>在Vim中，你可以使用以下命令来格式化文件：<br>首先，进入Vim编辑器并打开你要格式化的文件。</p>\n<ol>\n<li>确保你处于正常模式（按下Esc键）。</li>\n<li>使用gg命令将光标移动到文件的开头。</li>\n<li>输入&#x3D;G命令，它会自动缩进整个文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">&gt; gg<br>&gt; =G<br></code></pre></td></tr></table></figure>\n<p>| 如果你只想格式化选定的代码块，可以使用v命令进入可视模式，然后使用移动命令选择代码块，最后输入&#x3D;命令进行缩进。</p>\n<h1 id=\"vim-删除指定行\"><a href=\"#vim-删除指定行\" class=\"headerlink\" title=\"vim 删除指定行\"></a>vim 删除指定行</h1><ol>\n<li>要删除当前行，请按下 dd。</li>\n<li>要删除特定行，请按下 :nd，其中 n 代表行号。例如，要删除第 5 行，您可以输入 :5d。</li>\n<li>要删除多行，请使用 :[start],[end]d 的语法。例如，要删除第 5 行到第 10 行，您可以输入 :5,10d。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 删除当前行</span><br><span class=\"hljs-built_in\">dd</span><br><span class=\"hljs-comment\"># 删除特定行</span><br>:5d<br><span class=\"hljs-comment\">#删除范围</span><br>:5,10d<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"three.js 学习第一章","date":"2024-03-31T06:48:06.000Z","_content":"\n# 基本概念\n\n# 场景\n","source":"_posts/three/three_01.md","raw":"---\ntitle: three.js 学习第一章\ndate: 2024-03-31 14:48:06\ntags: three.js\n---\n\n# 基本概念\n\n# 场景\n","slug":"three/three_01","published":1,"updated":"2024-08-08T11:17:45.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0xa1nc60022jcsk54436f6c","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cm0xa1nbs0007jcskfpjc8x5x","category_id":"cm0xa1nbs0005jcskcy3uds65","_id":"cm0xa1nbw000fjcskb6s17eyf"},{"post_id":"cm0xa1nbp0002jcsk0zdv40cx","category_id":"cm0xa1nbs0005jcskcy3uds65","_id":"cm0xa1nbw000ijcsk1wfucvci"},{"post_id":"cm0xa1nbs0006jcsk397ha3gl","category_id":"cm0xa1nbs0005jcskcy3uds65","_id":"cm0xa1nbx000ljcskg0pdcok6"},{"post_id":"cm0xa1nbz000yjcskdva35qmz","category_id":"cm0xa1nbz000vjcsk8ifbehyo","_id":"cm0xa1nc10016jcsk5fwd02q3"},{"post_id":"cm0xa1nby000rjcsk5mxph69g","category_id":"cm0xa1nbz000vjcsk8ifbehyo","_id":"cm0xa1nc10019jcsk422189l4"},{"post_id":"cm0xa1nc00010jcskcg998eng","category_id":"cm0xa1nc00014jcsk0mkmfszc","_id":"cm0xa1nc2001hjcskcj9dcenl"},{"post_id":"cm0xa1nc00012jcsk3hb5aszm","category_id":"cm0xa1nc1001djcsk7ngbhsmi","_id":"cm0xa1nc2001ljcskgbdm03q4"},{"post_id":"cm0xa1nc10015jcskepep8v8b","category_id":"cm0xa1nc1001djcsk7ngbhsmi","_id":"cm0xa1nc2001ojcskhkdo5bck"},{"post_id":"cm0xa1nc4001yjcsk47915kvh","category_id":"cm0xa1nc60020jcsk075a9cav","_id":"cm0xa1nc70026jcsk5exs8yjr"},{"post_id":"cm0xa1nc6001zjcsk3l25dx64","category_id":"cm0xa1nc60020jcsk075a9cav","_id":"cm0xa1nc70029jcsk9y8a6a54"}],"PostTag":[{"post_id":"cm0xa1nbn0001jcskhryxcqa0","tag_id":"cm0xa1nbq0003jcskdwrvfot8","_id":"cm0xa1nbt0009jcskg88c9pn0"},{"post_id":"cm0xa1nbp0002jcsk0zdv40cx","tag_id":"cm0xa1nbt0008jcskeo6f2pku","_id":"cm0xa1nbw000gjcskhjxw23v9"},{"post_id":"cm0xa1nbr0004jcsk0u91e2hf","tag_id":"cm0xa1nbu000djcsk4cuhh8g5","_id":"cm0xa1nbx000mjcsk15s44kaq"},{"post_id":"cm0xa1nbs0006jcsk397ha3gl","tag_id":"cm0xa1nbt0008jcskeo6f2pku","_id":"cm0xa1nby000qjcskajf4bbty"},{"post_id":"cm0xa1nbs0007jcskfpjc8x5x","tag_id":"cm0xa1nbt0008jcskeo6f2pku","_id":"cm0xa1nbz000ujcskb0niaxme"},{"post_id":"cm0xa1nbu000cjcsk0dmrepys","tag_id":"cm0xa1nby000sjcsk3gmff4wb","_id":"cm0xa1nc0000zjcsk39a18r52"},{"post_id":"cm0xa1nbv000ejcsk0xsm64rm","tag_id":"cm0xa1nby000sjcsk3gmff4wb","_id":"cm0xa1nc00013jcskbr072206"},{"post_id":"cm0xa1nc00012jcsk3hb5aszm","tag_id":"cm0xa1nbq0003jcskdwrvfot8","_id":"cm0xa1nc10017jcsk2s8x1e2r"},{"post_id":"cm0xa1nc10015jcskepep8v8b","tag_id":"cm0xa1nbq0003jcskdwrvfot8","_id":"cm0xa1nc1001bjcskfu860qik"},{"post_id":"cm0xa1nbx000kjcsk0vc0au6v","tag_id":"cm0xa1nc00011jcskfvov8dvj","_id":"cm0xa1nc2001ejcskg5te8ct0"},{"post_id":"cm0xa1nbx000njcskhxd9etxc","tag_id":"cm0xa1nc00011jcskfvov8dvj","_id":"cm0xa1nc2001gjcskcjyh5xfc"},{"post_id":"cm0xa1nby000pjcskgrc169v8","tag_id":"cm0xa1nc00011jcskfvov8dvj","_id":"cm0xa1nc2001kjcskdjm4d4jd"},{"post_id":"cm0xa1nby000rjcsk5mxph69g","tag_id":"cm0xa1nc2001jjcsk046y6yz3","_id":"cm0xa1nc2001njcsk3l8r3evt"},{"post_id":"cm0xa1nbz000tjcskb84g0c4g","tag_id":"cm0xa1nc2001mjcsk7axvae1r","_id":"cm0xa1nc2001qjcsk0hde0bvg"},{"post_id":"cm0xa1nbz000wjcskcwn7gkbk","tag_id":"cm0xa1nc2001pjcsk1o1ugq41","_id":"cm0xa1nc3001sjcskdchghsbu"},{"post_id":"cm0xa1nbz000yjcskdva35qmz","tag_id":"cm0xa1nc2001rjcskddjrbu3t","_id":"cm0xa1nc3001ujcsk2p5mhw9m"},{"post_id":"cm0xa1nc00010jcskcg998eng","tag_id":"cm0xa1nc3001tjcsk4cfx5mju","_id":"cm0xa1nc3001wjcskfns26boz"},{"post_id":"cm0xa1nc1001cjcsk86v3ay44","tag_id":"cm0xa1nc3001vjcskewfkb6h2","_id":"cm0xa1nc3001xjcsk96p8c6pr"},{"post_id":"cm0xa1nc4001yjcsk47915kvh","tag_id":"cm0xa1nc60021jcskdfzlan2j","_id":"cm0xa1nc70025jcskatu5dw1k"},{"post_id":"cm0xa1nc6001zjcsk3l25dx64","tag_id":"cm0xa1nc70024jcsk7vit5z7f","_id":"cm0xa1nc70028jcsk4ay8f6cc"},{"post_id":"cm0xa1nc60022jcsk54436f6c","tag_id":"cm0xa1nc70027jcsk9c3n47ez","_id":"cm0xa1nc7002ajcsk73cm2o1n"}],"Tag":[{"name":"svg","_id":"cm0xa1nbq0003jcskdwrvfot8"},{"name":"algorithm","_id":"cm0xa1nbt0008jcskeo6f2pku"},{"name":"wasm","_id":"cm0xa1nbu000djcsk4cuhh8g5"},{"name":"electron","_id":"cm0xa1nby000sjcsk3gmff4wb"},{"name":"数据结构","_id":"cm0xa1nc00011jcskfvov8dvj"},{"name":"vue","_id":"cm0xa1nc2001jjcsk046y6yz3"},{"name":"微前端","_id":"cm0xa1nc2001mjcsk7axvae1r"},{"name":"javascript","_id":"cm0xa1nc2001pjcsk1o1ugq41"},{"name":"前端","_id":"cm0xa1nc2001rjcskddjrbu3t"},{"name":"python","_id":"cm0xa1nc3001tjcsk4cfx5mju"},{"name":"monorepo","_id":"cm0xa1nc3001vjcskewfkb6h2"},{"name":"BASH","_id":"cm0xa1nc60021jcskdfzlan2j"},{"name":"vim","_id":"cm0xa1nc70024jcsk7vit5z7f"},{"name":"three.js","_id":"cm0xa1nc70027jcsk9c3n47ez"}]}}